
UACS-Reader-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fcc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  0800a0d8  0800a0d8  0000b0d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1bc  0800a1bc  0000c1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a1bc  0800a1bc  0000b1bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1c4  0800a1c4  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1c4  0800a1c4  0000b1c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a1c8  0800a1c8  0000b1c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800a1cc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001458  200001d8  0800a3a4  0000c1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001630  0800a3a4  0000c630  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013543  00000000  00000000  0000c201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000386f  00000000  00000000  0001f744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001090  00000000  00000000  00022fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c76  00000000  00000000  00024048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b117  00000000  00000000  00024cbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015de7  00000000  00000000  0003fdd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b993  00000000  00000000  00055bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e154f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a4c  00000000  00000000  000e1594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  000e5fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001d8 	.word	0x200001d8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a0c0 	.word	0x0800a0c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001dc 	.word	0x200001dc
 8000148:	0800a0c0 	.word	0x0800a0c0

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b088      	sub	sp, #32
 8000174:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000176:	f000 fce3 	bl	8000b40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800017a:	f000 f84d 	bl	8000218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800017e:	f000 f92d 	bl	80003dc <MX_GPIO_Init>
  MX_DMA_Init();
 8000182:	f000 f905 	bl	8000390 <MX_DMA_Init>
  MX_SPI1_Init();
 8000186:	f000 f8a3 	bl	80002d0 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 800018a:	f000 f8d7 	bl	800033c <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 800018e:	f008 fb79 	bl	8008884 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  uint8_t status;
  uint8_t str[MAX_LEN]; // Max_LEN = 16
  uint8_t sNum[5];
  uint8_t TxBuffer[] = "88\n";
 8000192:	4b1f      	ldr	r3, [pc, #124]	@ (8000210 <main+0xa0>)
 8000194:	603b      	str	r3, [r7, #0]
  uint8_t TxBufferLen = strlen(TxBuffer);
 8000196:	463b      	mov	r3, r7
 8000198:	4618      	mov	r0, r3
 800019a:	f7ff ffe1 	bl	8000160 <strlen>
 800019e:	4603      	mov	r3, r0
 80001a0:	77fb      	strb	r3, [r7, #31]
  MFRC522_Init();
 80001a2:	f000 fa59 	bl	8000658 <MFRC522_Init>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80001a6:	2201      	movs	r2, #1
 80001a8:	2180      	movs	r1, #128	@ 0x80
 80001aa:	481a      	ldr	r0, [pc, #104]	@ (8000214 <main+0xa4>)
 80001ac:	f001 f9f4 	bl	8001598 <HAL_GPIO_WritePin>
	  memcpy(sNum, str, 5);
	  HAL_Delay(100);

	  HAL_Delay(2000);
	  */
	  if (CDC_Transmit_FS(TxBuffer, TxBufferLen) == USBD_OK){
 80001b0:	7ffa      	ldrb	r2, [r7, #31]
 80001b2:	463b      	mov	r3, r7
 80001b4:	4611      	mov	r1, r2
 80001b6:	4618      	mov	r0, r3
 80001b8:	f008 fc30 	bl	8008a1c <CDC_Transmit_FS>
 80001bc:	4603      	mov	r3, r0
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d110      	bne.n	80001e4 <main+0x74>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80001c2:	2201      	movs	r2, #1
 80001c4:	2180      	movs	r1, #128	@ 0x80
 80001c6:	4813      	ldr	r0, [pc, #76]	@ (8000214 <main+0xa4>)
 80001c8:	f001 f9e6 	bl	8001598 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 80001cc:	2064      	movs	r0, #100	@ 0x64
 80001ce:	f000 fd19 	bl	8000c04 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80001d2:	2200      	movs	r2, #0
 80001d4:	2180      	movs	r1, #128	@ 0x80
 80001d6:	480f      	ldr	r0, [pc, #60]	@ (8000214 <main+0xa4>)
 80001d8:	f001 f9de 	bl	8001598 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 80001dc:	2064      	movs	r0, #100	@ 0x64
 80001de:	f000 fd11 	bl	8000c04 <HAL_Delay>
 80001e2:	e7e5      	b.n	80001b0 <main+0x40>
	  }else{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80001e4:	2200      	movs	r2, #0
 80001e6:	2180      	movs	r1, #128	@ 0x80
 80001e8:	480a      	ldr	r0, [pc, #40]	@ (8000214 <main+0xa4>)
 80001ea:	f001 f9d5 	bl	8001598 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80001ee:	2201      	movs	r2, #1
 80001f0:	2140      	movs	r1, #64	@ 0x40
 80001f2:	4808      	ldr	r0, [pc, #32]	@ (8000214 <main+0xa4>)
 80001f4:	f001 f9d0 	bl	8001598 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 80001f8:	2064      	movs	r0, #100	@ 0x64
 80001fa:	f000 fd03 	bl	8000c04 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80001fe:	2200      	movs	r2, #0
 8000200:	2140      	movs	r1, #64	@ 0x40
 8000202:	4804      	ldr	r0, [pc, #16]	@ (8000214 <main+0xa4>)
 8000204:	f001 f9c8 	bl	8001598 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 8000208:	2064      	movs	r0, #100	@ 0x64
 800020a:	f000 fcfb 	bl	8000c04 <HAL_Delay>
	  if (CDC_Transmit_FS(TxBuffer, TxBufferLen) == USBD_OK){
 800020e:	e7cf      	b.n	80001b0 <main+0x40>
 8000210:	000a3838 	.word	0x000a3838
 8000214:	40010c00 	.word	0x40010c00

08000218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b094      	sub	sp, #80	@ 0x50
 800021c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000222:	2228      	movs	r2, #40	@ 0x28
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f009 f8f5 	bl	8009416 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800022c:	f107 0314 	add.w	r3, r7, #20
 8000230:	2200      	movs	r2, #0
 8000232:	601a      	str	r2, [r3, #0]
 8000234:	605a      	str	r2, [r3, #4]
 8000236:	609a      	str	r2, [r3, #8]
 8000238:	60da      	str	r2, [r3, #12]
 800023a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	2200      	movs	r2, #0
 8000240:	601a      	str	r2, [r3, #0]
 8000242:	605a      	str	r2, [r3, #4]
 8000244:	609a      	str	r2, [r3, #8]
 8000246:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000248:	2301      	movs	r3, #1
 800024a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800024c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000250:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000252:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000256:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000258:	2301      	movs	r3, #1
 800025a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800025c:	2302      	movs	r3, #2
 800025e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000260:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000264:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000266:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800026a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000270:	4618      	mov	r0, r3
 8000272:	f002 ff09 	bl	8003088 <HAL_RCC_OscConfig>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800027c:	f000 f952 	bl	8000524 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000280:	230f      	movs	r3, #15
 8000282:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000284:	2302      	movs	r3, #2
 8000286:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800028c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000290:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000292:	2300      	movs	r3, #0
 8000294:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000296:	f107 0314 	add.w	r3, r7, #20
 800029a:	2102      	movs	r1, #2
 800029c:	4618      	mov	r0, r3
 800029e:	f003 f975 	bl	800358c <HAL_RCC_ClockConfig>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80002a8:	f000 f93c 	bl	8000524 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002ac:	2310      	movs	r3, #16
 80002ae:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002b0:	2300      	movs	r3, #0
 80002b2:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002b4:	1d3b      	adds	r3, r7, #4
 80002b6:	4618      	mov	r0, r3
 80002b8:	f003 faf8 	bl	80038ac <HAL_RCCEx_PeriphCLKConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002c2:	f000 f92f 	bl	8000524 <Error_Handler>
  }
}
 80002c6:	bf00      	nop
 80002c8:	3750      	adds	r7, #80	@ 0x50
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
	...

080002d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002d4:	4b17      	ldr	r3, [pc, #92]	@ (8000334 <MX_SPI1_Init+0x64>)
 80002d6:	4a18      	ldr	r2, [pc, #96]	@ (8000338 <MX_SPI1_Init+0x68>)
 80002d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002da:	4b16      	ldr	r3, [pc, #88]	@ (8000334 <MX_SPI1_Init+0x64>)
 80002dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80002e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002e2:	4b14      	ldr	r3, [pc, #80]	@ (8000334 <MX_SPI1_Init+0x64>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80002e8:	4b12      	ldr	r3, [pc, #72]	@ (8000334 <MX_SPI1_Init+0x64>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002ee:	4b11      	ldr	r3, [pc, #68]	@ (8000334 <MX_SPI1_Init+0x64>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000334 <MX_SPI1_Init+0x64>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000334 <MX_SPI1_Init+0x64>)
 80002fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000300:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000302:	4b0c      	ldr	r3, [pc, #48]	@ (8000334 <MX_SPI1_Init+0x64>)
 8000304:	2210      	movs	r2, #16
 8000306:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000308:	4b0a      	ldr	r3, [pc, #40]	@ (8000334 <MX_SPI1_Init+0x64>)
 800030a:	2200      	movs	r2, #0
 800030c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800030e:	4b09      	ldr	r3, [pc, #36]	@ (8000334 <MX_SPI1_Init+0x64>)
 8000310:	2200      	movs	r2, #0
 8000312:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000314:	4b07      	ldr	r3, [pc, #28]	@ (8000334 <MX_SPI1_Init+0x64>)
 8000316:	2200      	movs	r2, #0
 8000318:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800031a:	4b06      	ldr	r3, [pc, #24]	@ (8000334 <MX_SPI1_Init+0x64>)
 800031c:	220a      	movs	r2, #10
 800031e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000320:	4804      	ldr	r0, [pc, #16]	@ (8000334 <MX_SPI1_Init+0x64>)
 8000322:	f003 fb79 	bl	8003a18 <HAL_SPI_Init>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800032c:	f000 f8fa 	bl	8000524 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000330:	bf00      	nop
 8000332:	bd80      	pop	{r7, pc}
 8000334:	200001f4 	.word	0x200001f4
 8000338:	40013000 	.word	0x40013000

0800033c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000340:	4b11      	ldr	r3, [pc, #68]	@ (8000388 <MX_USART3_UART_Init+0x4c>)
 8000342:	4a12      	ldr	r2, [pc, #72]	@ (800038c <MX_USART3_UART_Init+0x50>)
 8000344:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000346:	4b10      	ldr	r3, [pc, #64]	@ (8000388 <MX_USART3_UART_Init+0x4c>)
 8000348:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800034c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800034e:	4b0e      	ldr	r3, [pc, #56]	@ (8000388 <MX_USART3_UART_Init+0x4c>)
 8000350:	2200      	movs	r2, #0
 8000352:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000354:	4b0c      	ldr	r3, [pc, #48]	@ (8000388 <MX_USART3_UART_Init+0x4c>)
 8000356:	2200      	movs	r2, #0
 8000358:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800035a:	4b0b      	ldr	r3, [pc, #44]	@ (8000388 <MX_USART3_UART_Init+0x4c>)
 800035c:	2200      	movs	r2, #0
 800035e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000360:	4b09      	ldr	r3, [pc, #36]	@ (8000388 <MX_USART3_UART_Init+0x4c>)
 8000362:	220c      	movs	r2, #12
 8000364:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000366:	4b08      	ldr	r3, [pc, #32]	@ (8000388 <MX_USART3_UART_Init+0x4c>)
 8000368:	2200      	movs	r2, #0
 800036a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800036c:	4b06      	ldr	r3, [pc, #24]	@ (8000388 <MX_USART3_UART_Init+0x4c>)
 800036e:	2200      	movs	r2, #0
 8000370:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000372:	4805      	ldr	r0, [pc, #20]	@ (8000388 <MX_USART3_UART_Init+0x4c>)
 8000374:	f003 fe37 	bl	8003fe6 <HAL_UART_Init>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800037e:	f000 f8d1 	bl	8000524 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	2000024c 	.word	0x2000024c
 800038c:	40004800 	.word	0x40004800

08000390 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000396:	4b10      	ldr	r3, [pc, #64]	@ (80003d8 <MX_DMA_Init+0x48>)
 8000398:	695b      	ldr	r3, [r3, #20]
 800039a:	4a0f      	ldr	r2, [pc, #60]	@ (80003d8 <MX_DMA_Init+0x48>)
 800039c:	f043 0301 	orr.w	r3, r3, #1
 80003a0:	6153      	str	r3, [r2, #20]
 80003a2:	4b0d      	ldr	r3, [pc, #52]	@ (80003d8 <MX_DMA_Init+0x48>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	f003 0301 	and.w	r3, r3, #1
 80003aa:	607b      	str	r3, [r7, #4]
 80003ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80003ae:	2200      	movs	r2, #0
 80003b0:	2100      	movs	r1, #0
 80003b2:	200c      	movs	r0, #12
 80003b4:	f000 fd21 	bl	8000dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80003b8:	200c      	movs	r0, #12
 80003ba:	f000 fd3a 	bl	8000e32 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80003be:	2200      	movs	r2, #0
 80003c0:	2100      	movs	r1, #0
 80003c2:	200d      	movs	r0, #13
 80003c4:	f000 fd19 	bl	8000dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80003c8:	200d      	movs	r0, #13
 80003ca:	f000 fd32 	bl	8000e32 <HAL_NVIC_EnableIRQ>

}
 80003ce:	bf00      	nop
 80003d0:	3708      	adds	r7, #8
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	40021000 	.word	0x40021000

080003dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b088      	sub	sp, #32
 80003e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e2:	f107 0310 	add.w	r3, r7, #16
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	605a      	str	r2, [r3, #4]
 80003ec:	609a      	str	r2, [r3, #8]
 80003ee:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003f0:	4b32      	ldr	r3, [pc, #200]	@ (80004bc <MX_GPIO_Init+0xe0>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	4a31      	ldr	r2, [pc, #196]	@ (80004bc <MX_GPIO_Init+0xe0>)
 80003f6:	f043 0320 	orr.w	r3, r3, #32
 80003fa:	6193      	str	r3, [r2, #24]
 80003fc:	4b2f      	ldr	r3, [pc, #188]	@ (80004bc <MX_GPIO_Init+0xe0>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	f003 0320 	and.w	r3, r3, #32
 8000404:	60fb      	str	r3, [r7, #12]
 8000406:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000408:	4b2c      	ldr	r3, [pc, #176]	@ (80004bc <MX_GPIO_Init+0xe0>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	4a2b      	ldr	r2, [pc, #172]	@ (80004bc <MX_GPIO_Init+0xe0>)
 800040e:	f043 0304 	orr.w	r3, r3, #4
 8000412:	6193      	str	r3, [r2, #24]
 8000414:	4b29      	ldr	r3, [pc, #164]	@ (80004bc <MX_GPIO_Init+0xe0>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	f003 0304 	and.w	r3, r3, #4
 800041c:	60bb      	str	r3, [r7, #8]
 800041e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000420:	4b26      	ldr	r3, [pc, #152]	@ (80004bc <MX_GPIO_Init+0xe0>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	4a25      	ldr	r2, [pc, #148]	@ (80004bc <MX_GPIO_Init+0xe0>)
 8000426:	f043 0308 	orr.w	r3, r3, #8
 800042a:	6193      	str	r3, [r2, #24]
 800042c:	4b23      	ldr	r3, [pc, #140]	@ (80004bc <MX_GPIO_Init+0xe0>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	f003 0308 	and.w	r3, r3, #8
 8000434:	607b      	str	r3, [r7, #4]
 8000436:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RFID_SDA_Pin|LED_R2_Pin|LED_G2_Pin, GPIO_PIN_RESET);
 8000438:	2200      	movs	r2, #0
 800043a:	f44f 7144 	mov.w	r1, #784	@ 0x310
 800043e:	4820      	ldr	r0, [pc, #128]	@ (80004c0 <MX_GPIO_Init+0xe4>)
 8000440:	f001 f8aa 	bl	8001598 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RFID_RST_Pin|LED_R1_Pin|LED_G1_Pin, GPIO_PIN_RESET);
 8000444:	2200      	movs	r2, #0
 8000446:	21c1      	movs	r1, #193	@ 0xc1
 8000448:	481e      	ldr	r0, [pc, #120]	@ (80004c4 <MX_GPIO_Init+0xe8>)
 800044a:	f001 f8a5 	bl	8001598 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RFID_IRQ_Pin */
  GPIO_InitStruct.Pin = RFID_IRQ_Pin;
 800044e:	2308      	movs	r3, #8
 8000450:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000452:	2300      	movs	r3, #0
 8000454:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000456:	2300      	movs	r3, #0
 8000458:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RFID_IRQ_GPIO_Port, &GPIO_InitStruct);
 800045a:	f107 0310 	add.w	r3, r7, #16
 800045e:	4619      	mov	r1, r3
 8000460:	4817      	ldr	r0, [pc, #92]	@ (80004c0 <MX_GPIO_Init+0xe4>)
 8000462:	f000 ff15 	bl	8001290 <HAL_GPIO_Init>

  /*Configure GPIO pins : RFID_SDA_Pin LED_R2_Pin LED_G2_Pin */
  GPIO_InitStruct.Pin = RFID_SDA_Pin|LED_R2_Pin|LED_G2_Pin;
 8000466:	f44f 7344 	mov.w	r3, #784	@ 0x310
 800046a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800046c:	2301      	movs	r3, #1
 800046e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000470:	2300      	movs	r3, #0
 8000472:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000474:	2302      	movs	r3, #2
 8000476:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000478:	f107 0310 	add.w	r3, r7, #16
 800047c:	4619      	mov	r1, r3
 800047e:	4810      	ldr	r0, [pc, #64]	@ (80004c0 <MX_GPIO_Init+0xe4>)
 8000480:	f000 ff06 	bl	8001290 <HAL_GPIO_Init>

  /*Configure GPIO pins : RFID_RST_Pin LED_R1_Pin LED_G1_Pin */
  GPIO_InitStruct.Pin = RFID_RST_Pin|LED_R1_Pin|LED_G1_Pin;
 8000484:	23c1      	movs	r3, #193	@ 0xc1
 8000486:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000488:	2301      	movs	r3, #1
 800048a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048c:	2300      	movs	r3, #0
 800048e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000490:	2302      	movs	r3, #2
 8000492:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000494:	f107 0310 	add.w	r3, r7, #16
 8000498:	4619      	mov	r1, r3
 800049a:	480a      	ldr	r0, [pc, #40]	@ (80004c4 <MX_GPIO_Init+0xe8>)
 800049c:	f000 fef8 	bl	8001290 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_OUT_Pin */
  GPIO_InitStruct.Pin = AUDIO_OUT_Pin;
 80004a0:	2310      	movs	r3, #16
 80004a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004a4:	2303      	movs	r3, #3
 80004a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(AUDIO_OUT_GPIO_Port, &GPIO_InitStruct);
 80004a8:	f107 0310 	add.w	r3, r7, #16
 80004ac:	4619      	mov	r1, r3
 80004ae:	4805      	ldr	r0, [pc, #20]	@ (80004c4 <MX_GPIO_Init+0xe8>)
 80004b0:	f000 feee 	bl	8001290 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80004b4:	bf00      	nop
 80004b6:	3720      	adds	r7, #32
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	40021000 	.word	0x40021000
 80004c0:	40010800 	.word	0x40010800
 80004c4:	40010c00 	.word	0x40010c00

080004c8 <USB_CDC_RxHandler>:

/* USER CODE BEGIN 4 */
void USB_CDC_RxHandler(uint8_t* Buf, uint32_t Len)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80004d2:	2200      	movs	r2, #0
 80004d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004d8:	4810      	ldr	r0, [pc, #64]	@ (800051c <USB_CDC_RxHandler+0x54>)
 80004da:	f001 f85d 	bl	8001598 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80004de:	2200      	movs	r2, #0
 80004e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004e4:	480d      	ldr	r0, [pc, #52]	@ (800051c <USB_CDC_RxHandler+0x54>)
 80004e6:	f001 f857 	bl	8001598 <HAL_GPIO_WritePin>
	if(strcmp((char*)Buf, "yes")==0){
 80004ea:	490d      	ldr	r1, [pc, #52]	@ (8000520 <USB_CDC_RxHandler+0x58>)
 80004ec:	6878      	ldr	r0, [r7, #4]
 80004ee:	f7ff fe2d 	bl	800014c <strcmp>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d106      	bne.n	8000506 <USB_CDC_RxHandler+0x3e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80004f8:	2201      	movs	r2, #1
 80004fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004fe:	4807      	ldr	r0, [pc, #28]	@ (800051c <USB_CDC_RxHandler+0x54>)
 8000500:	f001 f84a 	bl	8001598 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
	}
    /*CDC_Transmit_FS(Buf, Len);*/
}
 8000504:	e005      	b.n	8000512 <USB_CDC_RxHandler+0x4a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000506:	2201      	movs	r2, #1
 8000508:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800050c:	4803      	ldr	r0, [pc, #12]	@ (800051c <USB_CDC_RxHandler+0x54>)
 800050e:	f001 f843 	bl	8001598 <HAL_GPIO_WritePin>
}
 8000512:	bf00      	nop
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40010800 	.word	0x40010800
 8000520:	0800a0d8 	.word	0x0800a0d8

08000524 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000528:	b672      	cpsid	i
}
 800052a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800052c:	bf00      	nop
 800052e:	e7fd      	b.n	800052c <Error_Handler+0x8>

08000530 <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b086      	sub	sp, #24
 8000534:	af02      	add	r7, sp, #8
 8000536:	4603      	mov	r3, r0
 8000538:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 800053a:	f107 020f 	add.w	r2, r7, #15
 800053e:	1df9      	adds	r1, r7, #7
 8000540:	2364      	movs	r3, #100	@ 0x64
 8000542:	9300      	str	r3, [sp, #0]
 8000544:	2301      	movs	r3, #1
 8000546:	4804      	ldr	r0, [pc, #16]	@ (8000558 <RC522_SPI_Transfer+0x28>)
 8000548:	f003 faea 	bl	8003b20 <HAL_SPI_TransmitReceive>

	return rx_data;
 800054c:	7bfb      	ldrb	r3, [r7, #15]
}
 800054e:	4618      	mov	r0, r3
 8000550:	3710      	adds	r7, #16
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	200001f4 	.word	0x200001f4

0800055c <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	4603      	mov	r3, r0
 8000564:	460a      	mov	r2, r1
 8000566:	71fb      	strb	r3, [r7, #7]
 8000568:	4613      	mov	r3, r2
 800056a:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 800056c:	2200      	movs	r2, #0
 800056e:	2110      	movs	r1, #16
 8000570:	480c      	ldr	r0, [pc, #48]	@ (80005a4 <Write_MFRC522+0x48>)
 8000572:	f001 f811 	bl	8001598 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	005b      	lsls	r3, r3, #1
 800057a:	b2db      	uxtb	r3, r3
 800057c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8000580:	b2db      	uxtb	r3, r3
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff ffd4 	bl	8000530 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 8000588:	79bb      	ldrb	r3, [r7, #6]
 800058a:	4618      	mov	r0, r3
 800058c:	f7ff ffd0 	bl	8000530 <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8000590:	2201      	movs	r2, #1
 8000592:	2110      	movs	r1, #16
 8000594:	4803      	ldr	r0, [pc, #12]	@ (80005a4 <Write_MFRC522+0x48>)
 8000596:	f000 ffff 	bl	8001598 <HAL_GPIO_WritePin>
}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40010800 	.word	0x40010800

080005a8 <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2110      	movs	r1, #16
 80005b6:	4810      	ldr	r0, [pc, #64]	@ (80005f8 <Read_MFRC522+0x50>)
 80005b8:	f000 ffee 	bl	8001598 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 80005bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005c0:	005b      	lsls	r3, r3, #1
 80005c2:	b25b      	sxtb	r3, r3
 80005c4:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80005c8:	b25b      	sxtb	r3, r3
 80005ca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80005ce:	b25b      	sxtb	r3, r3
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	4618      	mov	r0, r3
 80005d4:	f7ff ffac 	bl	8000530 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 80005d8:	2000      	movs	r0, #0
 80005da:	f7ff ffa9 	bl	8000530 <RC522_SPI_Transfer>
 80005de:	4603      	mov	r3, r0
 80005e0:	73fb      	strb	r3, [r7, #15]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80005e2:	2201      	movs	r2, #1
 80005e4:	2110      	movs	r1, #16
 80005e6:	4804      	ldr	r0, [pc, #16]	@ (80005f8 <Read_MFRC522+0x50>)
 80005e8:	f000 ffd6 	bl	8001598 <HAL_GPIO_WritePin>

	return val;
 80005ec:	7bfb      	ldrb	r3, [r7, #15]

}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40010800 	.word	0x40010800

080005fc <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	460a      	mov	r2, r1
 8000606:	71fb      	strb	r3, [r7, #7]
 8000608:	4613      	mov	r3, r2
 800060a:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	4618      	mov	r0, r3
 8000610:	f7ff ffca 	bl	80005a8 <Read_MFRC522>
 8000614:	4603      	mov	r3, r0
 8000616:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8000618:	7bfa      	ldrb	r2, [r7, #15]
 800061a:	79bb      	ldrb	r3, [r7, #6]
 800061c:	4313      	orrs	r3, r2
 800061e:	b2da      	uxtb	r2, r3
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	4611      	mov	r1, r2
 8000624:	4618      	mov	r0, r3
 8000626:	f7ff ff99 	bl	800055c <Write_MFRC522>
}
 800062a:	bf00      	nop
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}

08000632 <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 8000632:	b580      	push	{r7, lr}
 8000634:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 8000636:	2014      	movs	r0, #20
 8000638:	f7ff ffb6 	bl	80005a8 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 800063c:	2103      	movs	r1, #3
 800063e:	2014      	movs	r0, #20
 8000640:	f7ff ffdc 	bl	80005fc <SetBitMask>
}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}

08000648 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 800064c:	210f      	movs	r1, #15
 800064e:	2001      	movs	r0, #1
 8000650:	f7ff ff84 	bl	800055c <Write_MFRC522>
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}

08000658 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 800065c:	2201      	movs	r2, #1
 800065e:	2110      	movs	r1, #16
 8000660:	4812      	ldr	r0, [pc, #72]	@ (80006ac <MFRC522_Init+0x54>)
 8000662:	f000 ff99 	bl	8001598 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 8000666:	2201      	movs	r2, #1
 8000668:	2101      	movs	r1, #1
 800066a:	4811      	ldr	r0, [pc, #68]	@ (80006b0 <MFRC522_Init+0x58>)
 800066c:	f000 ff94 	bl	8001598 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 8000670:	f7ff ffea 	bl	8000648 <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8000674:	218d      	movs	r1, #141	@ 0x8d
 8000676:	202a      	movs	r0, #42	@ 0x2a
 8000678:	f7ff ff70 	bl	800055c <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 800067c:	213e      	movs	r1, #62	@ 0x3e
 800067e:	202b      	movs	r0, #43	@ 0x2b
 8000680:	f7ff ff6c 	bl	800055c <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 8000684:	211e      	movs	r1, #30
 8000686:	202d      	movs	r0, #45	@ 0x2d
 8000688:	f7ff ff68 	bl	800055c <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 800068c:	2100      	movs	r1, #0
 800068e:	202c      	movs	r0, #44	@ 0x2c
 8000690:	f7ff ff64 	bl	800055c <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 8000694:	2140      	movs	r1, #64	@ 0x40
 8000696:	2015      	movs	r0, #21
 8000698:	f7ff ff60 	bl	800055c <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 800069c:	213d      	movs	r1, #61	@ 0x3d
 800069e:	2011      	movs	r0, #17
 80006a0:	f7ff ff5c 	bl	800055c <Write_MFRC522>

	AntennaOn();
 80006a4:	f7ff ffc5 	bl	8000632 <AntennaOn>
}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40010800 	.word	0x40010800
 80006b0:	40010c00 	.word	0x40010c00

080006b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006ba:	4b15      	ldr	r3, [pc, #84]	@ (8000710 <HAL_MspInit+0x5c>)
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	4a14      	ldr	r2, [pc, #80]	@ (8000710 <HAL_MspInit+0x5c>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6193      	str	r3, [r2, #24]
 80006c6:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <HAL_MspInit+0x5c>)
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000710 <HAL_MspInit+0x5c>)
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000710 <HAL_MspInit+0x5c>)
 80006d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006dc:	61d3      	str	r3, [r2, #28]
 80006de:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <HAL_MspInit+0x5c>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000714 <HAL_MspInit+0x60>)
 80006ec:	685b      	ldr	r3, [r3, #4]
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	4a04      	ldr	r2, [pc, #16]	@ (8000714 <HAL_MspInit+0x60>)
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000706:	bf00      	nop
 8000708:	3714      	adds	r7, #20
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr
 8000710:	40021000 	.word	0x40021000
 8000714:	40010000 	.word	0x40010000

08000718 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b088      	sub	sp, #32
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000720:	f107 0310 	add.w	r3, r7, #16
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a1b      	ldr	r2, [pc, #108]	@ (80007a0 <HAL_SPI_MspInit+0x88>)
 8000734:	4293      	cmp	r3, r2
 8000736:	d12f      	bne.n	8000798 <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000738:	4b1a      	ldr	r3, [pc, #104]	@ (80007a4 <HAL_SPI_MspInit+0x8c>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	4a19      	ldr	r2, [pc, #100]	@ (80007a4 <HAL_SPI_MspInit+0x8c>)
 800073e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000742:	6193      	str	r3, [r2, #24]
 8000744:	4b17      	ldr	r3, [pc, #92]	@ (80007a4 <HAL_SPI_MspInit+0x8c>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800074c:	60fb      	str	r3, [r7, #12]
 800074e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000750:	4b14      	ldr	r3, [pc, #80]	@ (80007a4 <HAL_SPI_MspInit+0x8c>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	4a13      	ldr	r2, [pc, #76]	@ (80007a4 <HAL_SPI_MspInit+0x8c>)
 8000756:	f043 0304 	orr.w	r3, r3, #4
 800075a:	6193      	str	r3, [r2, #24]
 800075c:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <HAL_SPI_MspInit+0x8c>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	f003 0304 	and.w	r3, r3, #4
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = RFID_SCK_Pin|RFID_MOSI_Pin;
 8000768:	23a0      	movs	r3, #160	@ 0xa0
 800076a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076c:	2302      	movs	r3, #2
 800076e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000770:	2303      	movs	r3, #3
 8000772:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000774:	f107 0310 	add.w	r3, r7, #16
 8000778:	4619      	mov	r1, r3
 800077a:	480b      	ldr	r0, [pc, #44]	@ (80007a8 <HAL_SPI_MspInit+0x90>)
 800077c:	f000 fd88 	bl	8001290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RFID_MISO_Pin;
 8000780:	2340      	movs	r3, #64	@ 0x40
 8000782:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(RFID_MISO_GPIO_Port, &GPIO_InitStruct);
 800078c:	f107 0310 	add.w	r3, r7, #16
 8000790:	4619      	mov	r1, r3
 8000792:	4805      	ldr	r0, [pc, #20]	@ (80007a8 <HAL_SPI_MspInit+0x90>)
 8000794:	f000 fd7c 	bl	8001290 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000798:	bf00      	nop
 800079a:	3720      	adds	r7, #32
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40013000 	.word	0x40013000
 80007a4:	40021000 	.word	0x40021000
 80007a8:	40010800 	.word	0x40010800

080007ac <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b4:	f107 0310 	add.w	r3, r7, #16
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a47      	ldr	r2, [pc, #284]	@ (80008e4 <HAL_UART_MspInit+0x138>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	f040 8086 	bne.w	80008da <HAL_UART_MspInit+0x12e>
  {
    /* USER CODE BEGIN USART3_MspInit 0 */

    /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80007ce:	4b46      	ldr	r3, [pc, #280]	@ (80008e8 <HAL_UART_MspInit+0x13c>)
 80007d0:	69db      	ldr	r3, [r3, #28]
 80007d2:	4a45      	ldr	r2, [pc, #276]	@ (80008e8 <HAL_UART_MspInit+0x13c>)
 80007d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80007d8:	61d3      	str	r3, [r2, #28]
 80007da:	4b43      	ldr	r3, [pc, #268]	@ (80008e8 <HAL_UART_MspInit+0x13c>)
 80007dc:	69db      	ldr	r3, [r3, #28]
 80007de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e6:	4b40      	ldr	r3, [pc, #256]	@ (80008e8 <HAL_UART_MspInit+0x13c>)
 80007e8:	699b      	ldr	r3, [r3, #24]
 80007ea:	4a3f      	ldr	r2, [pc, #252]	@ (80008e8 <HAL_UART_MspInit+0x13c>)
 80007ec:	f043 0308 	orr.w	r3, r3, #8
 80007f0:	6193      	str	r3, [r2, #24]
 80007f2:	4b3d      	ldr	r3, [pc, #244]	@ (80008e8 <HAL_UART_MspInit+0x13c>)
 80007f4:	699b      	ldr	r3, [r3, #24]
 80007f6:	f003 0308 	and.w	r3, r3, #8
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000802:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000804:	2302      	movs	r3, #2
 8000806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000808:	2303      	movs	r3, #3
 800080a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800080c:	f107 0310 	add.w	r3, r7, #16
 8000810:	4619      	mov	r1, r3
 8000812:	4836      	ldr	r0, [pc, #216]	@ (80008ec <HAL_UART_MspInit+0x140>)
 8000814:	f000 fd3c 	bl	8001290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000818:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800081c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000826:	f107 0310 	add.w	r3, r7, #16
 800082a:	4619      	mov	r1, r3
 800082c:	482f      	ldr	r0, [pc, #188]	@ (80008ec <HAL_UART_MspInit+0x140>)
 800082e:	f000 fd2f 	bl	8001290 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8000832:	4b2f      	ldr	r3, [pc, #188]	@ (80008f0 <HAL_UART_MspInit+0x144>)
 8000834:	4a2f      	ldr	r2, [pc, #188]	@ (80008f4 <HAL_UART_MspInit+0x148>)
 8000836:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000838:	4b2d      	ldr	r3, [pc, #180]	@ (80008f0 <HAL_UART_MspInit+0x144>)
 800083a:	2210      	movs	r2, #16
 800083c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800083e:	4b2c      	ldr	r3, [pc, #176]	@ (80008f0 <HAL_UART_MspInit+0x144>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000844:	4b2a      	ldr	r3, [pc, #168]	@ (80008f0 <HAL_UART_MspInit+0x144>)
 8000846:	2280      	movs	r2, #128	@ 0x80
 8000848:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800084a:	4b29      	ldr	r3, [pc, #164]	@ (80008f0 <HAL_UART_MspInit+0x144>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000850:	4b27      	ldr	r3, [pc, #156]	@ (80008f0 <HAL_UART_MspInit+0x144>)
 8000852:	2200      	movs	r2, #0
 8000854:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000856:	4b26      	ldr	r3, [pc, #152]	@ (80008f0 <HAL_UART_MspInit+0x144>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800085c:	4b24      	ldr	r3, [pc, #144]	@ (80008f0 <HAL_UART_MspInit+0x144>)
 800085e:	2200      	movs	r2, #0
 8000860:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000862:	4823      	ldr	r0, [pc, #140]	@ (80008f0 <HAL_UART_MspInit+0x144>)
 8000864:	f000 fb00 	bl	8000e68 <HAL_DMA_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800086e:	f7ff fe59 	bl	8000524 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4a1e      	ldr	r2, [pc, #120]	@ (80008f0 <HAL_UART_MspInit+0x144>)
 8000876:	639a      	str	r2, [r3, #56]	@ 0x38
 8000878:	4a1d      	ldr	r2, [pc, #116]	@ (80008f0 <HAL_UART_MspInit+0x144>)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800087e:	4b1e      	ldr	r3, [pc, #120]	@ (80008f8 <HAL_UART_MspInit+0x14c>)
 8000880:	4a1e      	ldr	r2, [pc, #120]	@ (80008fc <HAL_UART_MspInit+0x150>)
 8000882:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000884:	4b1c      	ldr	r3, [pc, #112]	@ (80008f8 <HAL_UART_MspInit+0x14c>)
 8000886:	2200      	movs	r2, #0
 8000888:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800088a:	4b1b      	ldr	r3, [pc, #108]	@ (80008f8 <HAL_UART_MspInit+0x14c>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000890:	4b19      	ldr	r3, [pc, #100]	@ (80008f8 <HAL_UART_MspInit+0x14c>)
 8000892:	2280      	movs	r2, #128	@ 0x80
 8000894:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000896:	4b18      	ldr	r3, [pc, #96]	@ (80008f8 <HAL_UART_MspInit+0x14c>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800089c:	4b16      	ldr	r3, [pc, #88]	@ (80008f8 <HAL_UART_MspInit+0x14c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80008a2:	4b15      	ldr	r3, [pc, #84]	@ (80008f8 <HAL_UART_MspInit+0x14c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008a8:	4b13      	ldr	r3, [pc, #76]	@ (80008f8 <HAL_UART_MspInit+0x14c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80008ae:	4812      	ldr	r0, [pc, #72]	@ (80008f8 <HAL_UART_MspInit+0x14c>)
 80008b0:	f000 fada 	bl	8000e68 <HAL_DMA_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80008ba:	f7ff fe33 	bl	8000524 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4a0d      	ldr	r2, [pc, #52]	@ (80008f8 <HAL_UART_MspInit+0x14c>)
 80008c2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80008c4:	4a0c      	ldr	r2, [pc, #48]	@ (80008f8 <HAL_UART_MspInit+0x14c>)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2100      	movs	r1, #0
 80008ce:	2027      	movs	r0, #39	@ 0x27
 80008d0:	f000 fa93 	bl	8000dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80008d4:	2027      	movs	r0, #39	@ 0x27
 80008d6:	f000 faac 	bl	8000e32 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 80008da:	bf00      	nop
 80008dc:	3720      	adds	r7, #32
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40004800 	.word	0x40004800
 80008e8:	40021000 	.word	0x40021000
 80008ec:	40010c00 	.word	0x40010c00
 80008f0:	20000294 	.word	0x20000294
 80008f4:	4002001c 	.word	0x4002001c
 80008f8:	200002d8 	.word	0x200002d8
 80008fc:	40020030 	.word	0x40020030

08000900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <NMI_Handler+0x4>

08000908 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <HardFault_Handler+0x4>

08000910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <MemManage_Handler+0x4>

08000918 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <BusFault_Handler+0x4>

08000920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000924:	bf00      	nop
 8000926:	e7fd      	b.n	8000924 <UsageFault_Handler+0x4>

08000928 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr

08000934 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr

08000940 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr

0800094c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000950:	f000 f93c 	bl	8000bcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}

08000958 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800095c:	4802      	ldr	r0, [pc, #8]	@ (8000968 <DMA1_Channel2_IRQHandler+0x10>)
 800095e:	f000 fb91 	bl	8001084 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000294 	.word	0x20000294

0800096c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000970:	4802      	ldr	r0, [pc, #8]	@ (800097c <DMA1_Channel3_IRQHandler+0x10>)
 8000972:	f000 fb87 	bl	8001084 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	200002d8 	.word	0x200002d8

08000980 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000984:	4802      	ldr	r0, [pc, #8]	@ (8000990 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000986:	f000 ff3b 	bl	8001800 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000fec 	.word	0x20000fec

08000994 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000998:	4802      	ldr	r0, [pc, #8]	@ (80009a4 <USART3_IRQHandler+0x10>)
 800099a:	f003 fb75 	bl	8004088 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	2000024c 	.word	0x2000024c

080009a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	60f8      	str	r0, [r7, #12]
 80009b0:	60b9      	str	r1, [r7, #8]
 80009b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]
 80009b8:	e00a      	b.n	80009d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009ba:	f3af 8000 	nop.w
 80009be:	4601      	mov	r1, r0
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	1c5a      	adds	r2, r3, #1
 80009c4:	60ba      	str	r2, [r7, #8]
 80009c6:	b2ca      	uxtb	r2, r1
 80009c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	3301      	adds	r3, #1
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	697a      	ldr	r2, [r7, #20]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	dbf0      	blt.n	80009ba <_read+0x12>
  }

  return len;
 80009d8:	687b      	ldr	r3, [r7, #4]
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3718      	adds	r7, #24
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b086      	sub	sp, #24
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	60f8      	str	r0, [r7, #12]
 80009ea:	60b9      	str	r1, [r7, #8]
 80009ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ee:	2300      	movs	r3, #0
 80009f0:	617b      	str	r3, [r7, #20]
 80009f2:	e009      	b.n	8000a08 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	1c5a      	adds	r2, r3, #1
 80009f8:	60ba      	str	r2, [r7, #8]
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	3301      	adds	r3, #1
 8000a06:	617b      	str	r3, [r7, #20]
 8000a08:	697a      	ldr	r2, [r7, #20]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	dbf1      	blt.n	80009f4 <_write+0x12>
  }
  return len;
 8000a10:	687b      	ldr	r3, [r7, #4]
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3718      	adds	r7, #24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <_close>:

int _close(int file)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	b083      	sub	sp, #12
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr

08000a30 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a40:	605a      	str	r2, [r3, #4]
  return 0;
 8000a42:	2300      	movs	r3, #0
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bc80      	pop	{r7}
 8000a4c:	4770      	bx	lr

08000a4e <_isatty>:

int _isatty(int file)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	b083      	sub	sp, #12
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a56:	2301      	movs	r3, #1
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bc80      	pop	{r7}
 8000a60:	4770      	bx	lr

08000a62 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a62:	b480      	push	{r7}
 8000a64:	b085      	sub	sp, #20
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	60f8      	str	r0, [r7, #12]
 8000a6a:	60b9      	str	r1, [r7, #8]
 8000a6c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a6e:	2300      	movs	r3, #0
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3714      	adds	r7, #20
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr
	...

08000a7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a84:	4a14      	ldr	r2, [pc, #80]	@ (8000ad8 <_sbrk+0x5c>)
 8000a86:	4b15      	ldr	r3, [pc, #84]	@ (8000adc <_sbrk+0x60>)
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a90:	4b13      	ldr	r3, [pc, #76]	@ (8000ae0 <_sbrk+0x64>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d102      	bne.n	8000a9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a98:	4b11      	ldr	r3, [pc, #68]	@ (8000ae0 <_sbrk+0x64>)
 8000a9a:	4a12      	ldr	r2, [pc, #72]	@ (8000ae4 <_sbrk+0x68>)
 8000a9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ae0 <_sbrk+0x64>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d207      	bcs.n	8000abc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aac:	f008 fd02 	bl	80094b4 <__errno>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	220c      	movs	r2, #12
 8000ab4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ab6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000aba:	e009      	b.n	8000ad0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000abc:	4b08      	ldr	r3, [pc, #32]	@ (8000ae0 <_sbrk+0x64>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ac2:	4b07      	ldr	r3, [pc, #28]	@ (8000ae0 <_sbrk+0x64>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4413      	add	r3, r2
 8000aca:	4a05      	ldr	r2, [pc, #20]	@ (8000ae0 <_sbrk+0x64>)
 8000acc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ace:	68fb      	ldr	r3, [r7, #12]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3718      	adds	r7, #24
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20005000 	.word	0x20005000
 8000adc:	00000400 	.word	0x00000400
 8000ae0:	2000031c 	.word	0x2000031c
 8000ae4:	20001630 	.word	0x20001630

08000ae8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr

08000af4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000af4:	f7ff fff8 	bl	8000ae8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000af8:	480b      	ldr	r0, [pc, #44]	@ (8000b28 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000afa:	490c      	ldr	r1, [pc, #48]	@ (8000b2c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000afc:	4a0c      	ldr	r2, [pc, #48]	@ (8000b30 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000afe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b00:	e002      	b.n	8000b08 <LoopCopyDataInit>

08000b02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b06:	3304      	adds	r3, #4

08000b08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b0c:	d3f9      	bcc.n	8000b02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b0e:	4a09      	ldr	r2, [pc, #36]	@ (8000b34 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b10:	4c09      	ldr	r4, [pc, #36]	@ (8000b38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b14:	e001      	b.n	8000b1a <LoopFillZerobss>

08000b16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b18:	3204      	adds	r2, #4

08000b1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b1c:	d3fb      	bcc.n	8000b16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b1e:	f008 fccf 	bl	80094c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b22:	f7ff fb25 	bl	8000170 <main>
  bx lr
 8000b26:	4770      	bx	lr
  ldr r0, =_sdata
 8000b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b2c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8000b30:	0800a1cc 	.word	0x0800a1cc
  ldr r2, =_sbss
 8000b34:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8000b38:	20001630 	.word	0x20001630

08000b3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b3c:	e7fe      	b.n	8000b3c <ADC1_2_IRQHandler>
	...

08000b40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b44:	4b08      	ldr	r3, [pc, #32]	@ (8000b68 <HAL_Init+0x28>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a07      	ldr	r2, [pc, #28]	@ (8000b68 <HAL_Init+0x28>)
 8000b4a:	f043 0310 	orr.w	r3, r3, #16
 8000b4e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b50:	2003      	movs	r0, #3
 8000b52:	f000 f947 	bl	8000de4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b56:	200f      	movs	r0, #15
 8000b58:	f000 f808 	bl	8000b6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b5c:	f7ff fdaa 	bl	80006b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40022000 	.word	0x40022000

08000b6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b74:	4b12      	ldr	r3, [pc, #72]	@ (8000bc0 <HAL_InitTick+0x54>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	4b12      	ldr	r3, [pc, #72]	@ (8000bc4 <HAL_InitTick+0x58>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 f95f 	bl	8000e4e <HAL_SYSTICK_Config>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	e00e      	b.n	8000bb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2b0f      	cmp	r3, #15
 8000b9e:	d80a      	bhi.n	8000bb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	6879      	ldr	r1, [r7, #4]
 8000ba4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ba8:	f000 f927 	bl	8000dfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bac:	4a06      	ldr	r2, [pc, #24]	@ (8000bc8 <HAL_InitTick+0x5c>)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	e000      	b.n	8000bb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000000 	.word	0x20000000
 8000bc4:	20000008 	.word	0x20000008
 8000bc8:	20000004 	.word	0x20000004

08000bcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd0:	4b05      	ldr	r3, [pc, #20]	@ (8000be8 <HAL_IncTick+0x1c>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4b05      	ldr	r3, [pc, #20]	@ (8000bec <HAL_IncTick+0x20>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4413      	add	r3, r2
 8000bdc:	4a03      	ldr	r2, [pc, #12]	@ (8000bec <HAL_IncTick+0x20>)
 8000bde:	6013      	str	r3, [r2, #0]
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr
 8000be8:	20000008 	.word	0x20000008
 8000bec:	20000320 	.word	0x20000320

08000bf0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf4:	4b02      	ldr	r3, [pc, #8]	@ (8000c00 <HAL_GetTick+0x10>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr
 8000c00:	20000320 	.word	0x20000320

08000c04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c0c:	f7ff fff0 	bl	8000bf0 <HAL_GetTick>
 8000c10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000c1c:	d005      	beq.n	8000c2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c48 <HAL_Delay+0x44>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	461a      	mov	r2, r3
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	4413      	add	r3, r2
 8000c28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c2a:	bf00      	nop
 8000c2c:	f7ff ffe0 	bl	8000bf0 <HAL_GetTick>
 8000c30:	4602      	mov	r2, r0
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	68fa      	ldr	r2, [r7, #12]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d8f7      	bhi.n	8000c2c <HAL_Delay+0x28>
  {
  }
}
 8000c3c:	bf00      	nop
 8000c3e:	bf00      	nop
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000008 	.word	0x20000008

08000c4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c90 <__NVIC_SetPriorityGrouping+0x44>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c62:	68ba      	ldr	r2, [r7, #8]
 8000c64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c68:	4013      	ands	r3, r2
 8000c6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c7e:	4a04      	ldr	r2, [pc, #16]	@ (8000c90 <__NVIC_SetPriorityGrouping+0x44>)
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	60d3      	str	r3, [r2, #12]
}
 8000c84:	bf00      	nop
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c98:	4b04      	ldr	r3, [pc, #16]	@ (8000cac <__NVIC_GetPriorityGrouping+0x18>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	0a1b      	lsrs	r3, r3, #8
 8000c9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	db0b      	blt.n	8000cda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	f003 021f 	and.w	r2, r3, #31
 8000cc8:	4906      	ldr	r1, [pc, #24]	@ (8000ce4 <__NVIC_EnableIRQ+0x34>)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	095b      	lsrs	r3, r3, #5
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr
 8000ce4:	e000e100 	.word	0xe000e100

08000ce8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	6039      	str	r1, [r7, #0]
 8000cf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	db0a      	blt.n	8000d12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	b2da      	uxtb	r2, r3
 8000d00:	490c      	ldr	r1, [pc, #48]	@ (8000d34 <__NVIC_SetPriority+0x4c>)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	0112      	lsls	r2, r2, #4
 8000d08:	b2d2      	uxtb	r2, r2
 8000d0a:	440b      	add	r3, r1
 8000d0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d10:	e00a      	b.n	8000d28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	4908      	ldr	r1, [pc, #32]	@ (8000d38 <__NVIC_SetPriority+0x50>)
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	f003 030f 	and.w	r3, r3, #15
 8000d1e:	3b04      	subs	r3, #4
 8000d20:	0112      	lsls	r2, r2, #4
 8000d22:	b2d2      	uxtb	r2, r2
 8000d24:	440b      	add	r3, r1
 8000d26:	761a      	strb	r2, [r3, #24]
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bc80      	pop	{r7}
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000e100 	.word	0xe000e100
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b089      	sub	sp, #36	@ 0x24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	f1c3 0307 	rsb	r3, r3, #7
 8000d56:	2b04      	cmp	r3, #4
 8000d58:	bf28      	it	cs
 8000d5a:	2304      	movcs	r3, #4
 8000d5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	3304      	adds	r3, #4
 8000d62:	2b06      	cmp	r3, #6
 8000d64:	d902      	bls.n	8000d6c <NVIC_EncodePriority+0x30>
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	3b03      	subs	r3, #3
 8000d6a:	e000      	b.n	8000d6e <NVIC_EncodePriority+0x32>
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43da      	mvns	r2, r3
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	401a      	ands	r2, r3
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d84:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8e:	43d9      	mvns	r1, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d94:	4313      	orrs	r3, r2
         );
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3724      	adds	r7, #36	@ 0x24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr

08000da0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000db0:	d301      	bcc.n	8000db6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000db2:	2301      	movs	r3, #1
 8000db4:	e00f      	b.n	8000dd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000db6:	4a0a      	ldr	r2, [pc, #40]	@ (8000de0 <SysTick_Config+0x40>)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dbe:	210f      	movs	r1, #15
 8000dc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000dc4:	f7ff ff90 	bl	8000ce8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc8:	4b05      	ldr	r3, [pc, #20]	@ (8000de0 <SysTick_Config+0x40>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dce:	4b04      	ldr	r3, [pc, #16]	@ (8000de0 <SysTick_Config+0x40>)
 8000dd0:	2207      	movs	r2, #7
 8000dd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	e000e010 	.word	0xe000e010

08000de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f7ff ff2d 	bl	8000c4c <__NVIC_SetPriorityGrouping>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b086      	sub	sp, #24
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	4603      	mov	r3, r0
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]
 8000e06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e0c:	f7ff ff42 	bl	8000c94 <__NVIC_GetPriorityGrouping>
 8000e10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	68b9      	ldr	r1, [r7, #8]
 8000e16:	6978      	ldr	r0, [r7, #20]
 8000e18:	f7ff ff90 	bl	8000d3c <NVIC_EncodePriority>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e22:	4611      	mov	r1, r2
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff ff5f 	bl	8000ce8 <__NVIC_SetPriority>
}
 8000e2a:	bf00      	nop
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	4603      	mov	r3, r0
 8000e3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff35 	bl	8000cb0 <__NVIC_EnableIRQ>
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b082      	sub	sp, #8
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f7ff ffa2 	bl	8000da0 <SysTick_Config>
 8000e5c:	4603      	mov	r3, r0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
	...

08000e68 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e70:	2300      	movs	r3, #0
 8000e72:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d101      	bne.n	8000e7e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e043      	b.n	8000f06 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	461a      	mov	r2, r3
 8000e84:	4b22      	ldr	r3, [pc, #136]	@ (8000f10 <HAL_DMA_Init+0xa8>)
 8000e86:	4413      	add	r3, r2
 8000e88:	4a22      	ldr	r2, [pc, #136]	@ (8000f14 <HAL_DMA_Init+0xac>)
 8000e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e8e:	091b      	lsrs	r3, r3, #4
 8000e90:	009a      	lsls	r2, r3, #2
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a1f      	ldr	r2, [pc, #124]	@ (8000f18 <HAL_DMA_Init+0xb0>)
 8000e9a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2202      	movs	r2, #2
 8000ea0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000eb2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000eb6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000ec0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	68db      	ldr	r3, [r3, #12]
 8000ec6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ecc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ed8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ee0:	68fa      	ldr	r2, [r7, #12]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	68fa      	ldr	r2, [r7, #12]
 8000eec:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2200      	movs	r2, #0
 8000f00:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3714      	adds	r7, #20
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr
 8000f10:	bffdfff8 	.word	0xbffdfff8
 8000f14:	cccccccd 	.word	0xcccccccd
 8000f18:	40020000 	.word	0x40020000

08000f1c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f24:	2300      	movs	r3, #0
 8000f26:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d008      	beq.n	8000f46 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2204      	movs	r2, #4
 8000f38:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e020      	b.n	8000f88 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f022 020e 	bic.w	r2, r2, #14
 8000f54:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f022 0201 	bic.w	r2, r2, #1
 8000f64:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f6e:	2101      	movs	r1, #1
 8000f70:	fa01 f202 	lsl.w	r2, r1, r2
 8000f74:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2201      	movs	r2, #1
 8000f7a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2200      	movs	r2, #0
 8000f82:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr
	...

08000f94 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d005      	beq.n	8000fb8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2204      	movs	r2, #4
 8000fb0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	73fb      	strb	r3, [r7, #15]
 8000fb6:	e051      	b.n	800105c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f022 020e 	bic.w	r2, r2, #14
 8000fc6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f022 0201 	bic.w	r2, r2, #1
 8000fd6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a22      	ldr	r2, [pc, #136]	@ (8001068 <HAL_DMA_Abort_IT+0xd4>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d029      	beq.n	8001036 <HAL_DMA_Abort_IT+0xa2>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a21      	ldr	r2, [pc, #132]	@ (800106c <HAL_DMA_Abort_IT+0xd8>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d022      	beq.n	8001032 <HAL_DMA_Abort_IT+0x9e>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a1f      	ldr	r2, [pc, #124]	@ (8001070 <HAL_DMA_Abort_IT+0xdc>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d01a      	beq.n	800102c <HAL_DMA_Abort_IT+0x98>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a1e      	ldr	r2, [pc, #120]	@ (8001074 <HAL_DMA_Abort_IT+0xe0>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d012      	beq.n	8001026 <HAL_DMA_Abort_IT+0x92>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a1c      	ldr	r2, [pc, #112]	@ (8001078 <HAL_DMA_Abort_IT+0xe4>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d00a      	beq.n	8001020 <HAL_DMA_Abort_IT+0x8c>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a1b      	ldr	r2, [pc, #108]	@ (800107c <HAL_DMA_Abort_IT+0xe8>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d102      	bne.n	800101a <HAL_DMA_Abort_IT+0x86>
 8001014:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001018:	e00e      	b.n	8001038 <HAL_DMA_Abort_IT+0xa4>
 800101a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800101e:	e00b      	b.n	8001038 <HAL_DMA_Abort_IT+0xa4>
 8001020:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001024:	e008      	b.n	8001038 <HAL_DMA_Abort_IT+0xa4>
 8001026:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800102a:	e005      	b.n	8001038 <HAL_DMA_Abort_IT+0xa4>
 800102c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001030:	e002      	b.n	8001038 <HAL_DMA_Abort_IT+0xa4>
 8001032:	2310      	movs	r3, #16
 8001034:	e000      	b.n	8001038 <HAL_DMA_Abort_IT+0xa4>
 8001036:	2301      	movs	r3, #1
 8001038:	4a11      	ldr	r2, [pc, #68]	@ (8001080 <HAL_DMA_Abort_IT+0xec>)
 800103a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2201      	movs	r2, #1
 8001040:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001050:	2b00      	cmp	r3, #0
 8001052:	d003      	beq.n	800105c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	4798      	blx	r3
    } 
  }
  return status;
 800105c:	7bfb      	ldrb	r3, [r7, #15]
}
 800105e:	4618      	mov	r0, r3
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40020008 	.word	0x40020008
 800106c:	4002001c 	.word	0x4002001c
 8001070:	40020030 	.word	0x40020030
 8001074:	40020044 	.word	0x40020044
 8001078:	40020058 	.word	0x40020058
 800107c:	4002006c 	.word	0x4002006c
 8001080:	40020000 	.word	0x40020000

08001084 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a0:	2204      	movs	r2, #4
 80010a2:	409a      	lsls	r2, r3
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4013      	ands	r3, r2
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d04f      	beq.n	800114c <HAL_DMA_IRQHandler+0xc8>
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	f003 0304 	and.w	r3, r3, #4
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d04a      	beq.n	800114c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 0320 	and.w	r3, r3, #32
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d107      	bne.n	80010d4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f022 0204 	bic.w	r2, r2, #4
 80010d2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a66      	ldr	r2, [pc, #408]	@ (8001274 <HAL_DMA_IRQHandler+0x1f0>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d029      	beq.n	8001132 <HAL_DMA_IRQHandler+0xae>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a65      	ldr	r2, [pc, #404]	@ (8001278 <HAL_DMA_IRQHandler+0x1f4>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d022      	beq.n	800112e <HAL_DMA_IRQHandler+0xaa>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a63      	ldr	r2, [pc, #396]	@ (800127c <HAL_DMA_IRQHandler+0x1f8>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d01a      	beq.n	8001128 <HAL_DMA_IRQHandler+0xa4>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a62      	ldr	r2, [pc, #392]	@ (8001280 <HAL_DMA_IRQHandler+0x1fc>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d012      	beq.n	8001122 <HAL_DMA_IRQHandler+0x9e>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a60      	ldr	r2, [pc, #384]	@ (8001284 <HAL_DMA_IRQHandler+0x200>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d00a      	beq.n	800111c <HAL_DMA_IRQHandler+0x98>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a5f      	ldr	r2, [pc, #380]	@ (8001288 <HAL_DMA_IRQHandler+0x204>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d102      	bne.n	8001116 <HAL_DMA_IRQHandler+0x92>
 8001110:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001114:	e00e      	b.n	8001134 <HAL_DMA_IRQHandler+0xb0>
 8001116:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800111a:	e00b      	b.n	8001134 <HAL_DMA_IRQHandler+0xb0>
 800111c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001120:	e008      	b.n	8001134 <HAL_DMA_IRQHandler+0xb0>
 8001122:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001126:	e005      	b.n	8001134 <HAL_DMA_IRQHandler+0xb0>
 8001128:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800112c:	e002      	b.n	8001134 <HAL_DMA_IRQHandler+0xb0>
 800112e:	2340      	movs	r3, #64	@ 0x40
 8001130:	e000      	b.n	8001134 <HAL_DMA_IRQHandler+0xb0>
 8001132:	2304      	movs	r3, #4
 8001134:	4a55      	ldr	r2, [pc, #340]	@ (800128c <HAL_DMA_IRQHandler+0x208>)
 8001136:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800113c:	2b00      	cmp	r3, #0
 800113e:	f000 8094 	beq.w	800126a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800114a:	e08e      	b.n	800126a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001150:	2202      	movs	r2, #2
 8001152:	409a      	lsls	r2, r3
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4013      	ands	r3, r2
 8001158:	2b00      	cmp	r3, #0
 800115a:	d056      	beq.n	800120a <HAL_DMA_IRQHandler+0x186>
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d051      	beq.n	800120a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 0320 	and.w	r3, r3, #32
 8001170:	2b00      	cmp	r3, #0
 8001172:	d10b      	bne.n	800118c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f022 020a 	bic.w	r2, r2, #10
 8001182:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2201      	movs	r2, #1
 8001188:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a38      	ldr	r2, [pc, #224]	@ (8001274 <HAL_DMA_IRQHandler+0x1f0>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d029      	beq.n	80011ea <HAL_DMA_IRQHandler+0x166>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a37      	ldr	r2, [pc, #220]	@ (8001278 <HAL_DMA_IRQHandler+0x1f4>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d022      	beq.n	80011e6 <HAL_DMA_IRQHandler+0x162>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a35      	ldr	r2, [pc, #212]	@ (800127c <HAL_DMA_IRQHandler+0x1f8>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d01a      	beq.n	80011e0 <HAL_DMA_IRQHandler+0x15c>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a34      	ldr	r2, [pc, #208]	@ (8001280 <HAL_DMA_IRQHandler+0x1fc>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d012      	beq.n	80011da <HAL_DMA_IRQHandler+0x156>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a32      	ldr	r2, [pc, #200]	@ (8001284 <HAL_DMA_IRQHandler+0x200>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d00a      	beq.n	80011d4 <HAL_DMA_IRQHandler+0x150>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a31      	ldr	r2, [pc, #196]	@ (8001288 <HAL_DMA_IRQHandler+0x204>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d102      	bne.n	80011ce <HAL_DMA_IRQHandler+0x14a>
 80011c8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80011cc:	e00e      	b.n	80011ec <HAL_DMA_IRQHandler+0x168>
 80011ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80011d2:	e00b      	b.n	80011ec <HAL_DMA_IRQHandler+0x168>
 80011d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80011d8:	e008      	b.n	80011ec <HAL_DMA_IRQHandler+0x168>
 80011da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011de:	e005      	b.n	80011ec <HAL_DMA_IRQHandler+0x168>
 80011e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011e4:	e002      	b.n	80011ec <HAL_DMA_IRQHandler+0x168>
 80011e6:	2320      	movs	r3, #32
 80011e8:	e000      	b.n	80011ec <HAL_DMA_IRQHandler+0x168>
 80011ea:	2302      	movs	r3, #2
 80011ec:	4a27      	ldr	r2, [pc, #156]	@ (800128c <HAL_DMA_IRQHandler+0x208>)
 80011ee:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d034      	beq.n	800126a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001208:	e02f      	b.n	800126a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120e:	2208      	movs	r2, #8
 8001210:	409a      	lsls	r2, r3
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	4013      	ands	r3, r2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d028      	beq.n	800126c <HAL_DMA_IRQHandler+0x1e8>
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	f003 0308 	and.w	r3, r3, #8
 8001220:	2b00      	cmp	r3, #0
 8001222:	d023      	beq.n	800126c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f022 020e 	bic.w	r2, r2, #14
 8001232:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800123c:	2101      	movs	r1, #1
 800123e:	fa01 f202 	lsl.w	r2, r1, r2
 8001242:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2201      	movs	r2, #1
 8001248:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2201      	movs	r2, #1
 800124e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	2b00      	cmp	r3, #0
 8001260:	d004      	beq.n	800126c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	4798      	blx	r3
    }
  }
  return;
 800126a:	bf00      	nop
 800126c:	bf00      	nop
}
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40020008 	.word	0x40020008
 8001278:	4002001c 	.word	0x4002001c
 800127c:	40020030 	.word	0x40020030
 8001280:	40020044 	.word	0x40020044
 8001284:	40020058 	.word	0x40020058
 8001288:	4002006c 	.word	0x4002006c
 800128c:	40020000 	.word	0x40020000

08001290 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001290:	b480      	push	{r7}
 8001292:	b08b      	sub	sp, #44	@ 0x2c
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800129a:	2300      	movs	r3, #0
 800129c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800129e:	2300      	movs	r3, #0
 80012a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012a2:	e169      	b.n	8001578 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012a4:	2201      	movs	r2, #1
 80012a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	69fa      	ldr	r2, [r7, #28]
 80012b4:	4013      	ands	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	429a      	cmp	r2, r3
 80012be:	f040 8158 	bne.w	8001572 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	4a9a      	ldr	r2, [pc, #616]	@ (8001530 <HAL_GPIO_Init+0x2a0>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d05e      	beq.n	800138a <HAL_GPIO_Init+0xfa>
 80012cc:	4a98      	ldr	r2, [pc, #608]	@ (8001530 <HAL_GPIO_Init+0x2a0>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d875      	bhi.n	80013be <HAL_GPIO_Init+0x12e>
 80012d2:	4a98      	ldr	r2, [pc, #608]	@ (8001534 <HAL_GPIO_Init+0x2a4>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d058      	beq.n	800138a <HAL_GPIO_Init+0xfa>
 80012d8:	4a96      	ldr	r2, [pc, #600]	@ (8001534 <HAL_GPIO_Init+0x2a4>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d86f      	bhi.n	80013be <HAL_GPIO_Init+0x12e>
 80012de:	4a96      	ldr	r2, [pc, #600]	@ (8001538 <HAL_GPIO_Init+0x2a8>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d052      	beq.n	800138a <HAL_GPIO_Init+0xfa>
 80012e4:	4a94      	ldr	r2, [pc, #592]	@ (8001538 <HAL_GPIO_Init+0x2a8>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d869      	bhi.n	80013be <HAL_GPIO_Init+0x12e>
 80012ea:	4a94      	ldr	r2, [pc, #592]	@ (800153c <HAL_GPIO_Init+0x2ac>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d04c      	beq.n	800138a <HAL_GPIO_Init+0xfa>
 80012f0:	4a92      	ldr	r2, [pc, #584]	@ (800153c <HAL_GPIO_Init+0x2ac>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d863      	bhi.n	80013be <HAL_GPIO_Init+0x12e>
 80012f6:	4a92      	ldr	r2, [pc, #584]	@ (8001540 <HAL_GPIO_Init+0x2b0>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d046      	beq.n	800138a <HAL_GPIO_Init+0xfa>
 80012fc:	4a90      	ldr	r2, [pc, #576]	@ (8001540 <HAL_GPIO_Init+0x2b0>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d85d      	bhi.n	80013be <HAL_GPIO_Init+0x12e>
 8001302:	2b12      	cmp	r3, #18
 8001304:	d82a      	bhi.n	800135c <HAL_GPIO_Init+0xcc>
 8001306:	2b12      	cmp	r3, #18
 8001308:	d859      	bhi.n	80013be <HAL_GPIO_Init+0x12e>
 800130a:	a201      	add	r2, pc, #4	@ (adr r2, 8001310 <HAL_GPIO_Init+0x80>)
 800130c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001310:	0800138b 	.word	0x0800138b
 8001314:	08001365 	.word	0x08001365
 8001318:	08001377 	.word	0x08001377
 800131c:	080013b9 	.word	0x080013b9
 8001320:	080013bf 	.word	0x080013bf
 8001324:	080013bf 	.word	0x080013bf
 8001328:	080013bf 	.word	0x080013bf
 800132c:	080013bf 	.word	0x080013bf
 8001330:	080013bf 	.word	0x080013bf
 8001334:	080013bf 	.word	0x080013bf
 8001338:	080013bf 	.word	0x080013bf
 800133c:	080013bf 	.word	0x080013bf
 8001340:	080013bf 	.word	0x080013bf
 8001344:	080013bf 	.word	0x080013bf
 8001348:	080013bf 	.word	0x080013bf
 800134c:	080013bf 	.word	0x080013bf
 8001350:	080013bf 	.word	0x080013bf
 8001354:	0800136d 	.word	0x0800136d
 8001358:	08001381 	.word	0x08001381
 800135c:	4a79      	ldr	r2, [pc, #484]	@ (8001544 <HAL_GPIO_Init+0x2b4>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d013      	beq.n	800138a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001362:	e02c      	b.n	80013be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	623b      	str	r3, [r7, #32]
          break;
 800136a:	e029      	b.n	80013c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	3304      	adds	r3, #4
 8001372:	623b      	str	r3, [r7, #32]
          break;
 8001374:	e024      	b.n	80013c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	3308      	adds	r3, #8
 800137c:	623b      	str	r3, [r7, #32]
          break;
 800137e:	e01f      	b.n	80013c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	330c      	adds	r3, #12
 8001386:	623b      	str	r3, [r7, #32]
          break;
 8001388:	e01a      	b.n	80013c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d102      	bne.n	8001398 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001392:	2304      	movs	r3, #4
 8001394:	623b      	str	r3, [r7, #32]
          break;
 8001396:	e013      	b.n	80013c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d105      	bne.n	80013ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013a0:	2308      	movs	r3, #8
 80013a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	69fa      	ldr	r2, [r7, #28]
 80013a8:	611a      	str	r2, [r3, #16]
          break;
 80013aa:	e009      	b.n	80013c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013ac:	2308      	movs	r3, #8
 80013ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	69fa      	ldr	r2, [r7, #28]
 80013b4:	615a      	str	r2, [r3, #20]
          break;
 80013b6:	e003      	b.n	80013c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013b8:	2300      	movs	r3, #0
 80013ba:	623b      	str	r3, [r7, #32]
          break;
 80013bc:	e000      	b.n	80013c0 <HAL_GPIO_Init+0x130>
          break;
 80013be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	2bff      	cmp	r3, #255	@ 0xff
 80013c4:	d801      	bhi.n	80013ca <HAL_GPIO_Init+0x13a>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	e001      	b.n	80013ce <HAL_GPIO_Init+0x13e>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	3304      	adds	r3, #4
 80013ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	2bff      	cmp	r3, #255	@ 0xff
 80013d4:	d802      	bhi.n	80013dc <HAL_GPIO_Init+0x14c>
 80013d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	e002      	b.n	80013e2 <HAL_GPIO_Init+0x152>
 80013dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013de:	3b08      	subs	r3, #8
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	210f      	movs	r1, #15
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	fa01 f303 	lsl.w	r3, r1, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	401a      	ands	r2, r3
 80013f4:	6a39      	ldr	r1, [r7, #32]
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	fa01 f303 	lsl.w	r3, r1, r3
 80013fc:	431a      	orrs	r2, r3
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800140a:	2b00      	cmp	r3, #0
 800140c:	f000 80b1 	beq.w	8001572 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001410:	4b4d      	ldr	r3, [pc, #308]	@ (8001548 <HAL_GPIO_Init+0x2b8>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	4a4c      	ldr	r2, [pc, #304]	@ (8001548 <HAL_GPIO_Init+0x2b8>)
 8001416:	f043 0301 	orr.w	r3, r3, #1
 800141a:	6193      	str	r3, [r2, #24]
 800141c:	4b4a      	ldr	r3, [pc, #296]	@ (8001548 <HAL_GPIO_Init+0x2b8>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	f003 0301 	and.w	r3, r3, #1
 8001424:	60bb      	str	r3, [r7, #8]
 8001426:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001428:	4a48      	ldr	r2, [pc, #288]	@ (800154c <HAL_GPIO_Init+0x2bc>)
 800142a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800142c:	089b      	lsrs	r3, r3, #2
 800142e:	3302      	adds	r3, #2
 8001430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001434:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001438:	f003 0303 	and.w	r3, r3, #3
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	220f      	movs	r2, #15
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	43db      	mvns	r3, r3
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	4013      	ands	r3, r2
 800144a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a40      	ldr	r2, [pc, #256]	@ (8001550 <HAL_GPIO_Init+0x2c0>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d013      	beq.n	800147c <HAL_GPIO_Init+0x1ec>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a3f      	ldr	r2, [pc, #252]	@ (8001554 <HAL_GPIO_Init+0x2c4>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d00d      	beq.n	8001478 <HAL_GPIO_Init+0x1e8>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a3e      	ldr	r2, [pc, #248]	@ (8001558 <HAL_GPIO_Init+0x2c8>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d007      	beq.n	8001474 <HAL_GPIO_Init+0x1e4>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a3d      	ldr	r2, [pc, #244]	@ (800155c <HAL_GPIO_Init+0x2cc>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d101      	bne.n	8001470 <HAL_GPIO_Init+0x1e0>
 800146c:	2303      	movs	r3, #3
 800146e:	e006      	b.n	800147e <HAL_GPIO_Init+0x1ee>
 8001470:	2304      	movs	r3, #4
 8001472:	e004      	b.n	800147e <HAL_GPIO_Init+0x1ee>
 8001474:	2302      	movs	r3, #2
 8001476:	e002      	b.n	800147e <HAL_GPIO_Init+0x1ee>
 8001478:	2301      	movs	r3, #1
 800147a:	e000      	b.n	800147e <HAL_GPIO_Init+0x1ee>
 800147c:	2300      	movs	r3, #0
 800147e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001480:	f002 0203 	and.w	r2, r2, #3
 8001484:	0092      	lsls	r2, r2, #2
 8001486:	4093      	lsls	r3, r2
 8001488:	68fa      	ldr	r2, [r7, #12]
 800148a:	4313      	orrs	r3, r2
 800148c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800148e:	492f      	ldr	r1, [pc, #188]	@ (800154c <HAL_GPIO_Init+0x2bc>)
 8001490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001492:	089b      	lsrs	r3, r3, #2
 8001494:	3302      	adds	r3, #2
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d006      	beq.n	80014b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001560 <HAL_GPIO_Init+0x2d0>)
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	492c      	ldr	r1, [pc, #176]	@ (8001560 <HAL_GPIO_Init+0x2d0>)
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	608b      	str	r3, [r1, #8]
 80014b4:	e006      	b.n	80014c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001560 <HAL_GPIO_Init+0x2d0>)
 80014b8:	689a      	ldr	r2, [r3, #8]
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	43db      	mvns	r3, r3
 80014be:	4928      	ldr	r1, [pc, #160]	@ (8001560 <HAL_GPIO_Init+0x2d0>)
 80014c0:	4013      	ands	r3, r2
 80014c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d006      	beq.n	80014de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014d0:	4b23      	ldr	r3, [pc, #140]	@ (8001560 <HAL_GPIO_Init+0x2d0>)
 80014d2:	68da      	ldr	r2, [r3, #12]
 80014d4:	4922      	ldr	r1, [pc, #136]	@ (8001560 <HAL_GPIO_Init+0x2d0>)
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	4313      	orrs	r3, r2
 80014da:	60cb      	str	r3, [r1, #12]
 80014dc:	e006      	b.n	80014ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014de:	4b20      	ldr	r3, [pc, #128]	@ (8001560 <HAL_GPIO_Init+0x2d0>)
 80014e0:	68da      	ldr	r2, [r3, #12]
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	43db      	mvns	r3, r3
 80014e6:	491e      	ldr	r1, [pc, #120]	@ (8001560 <HAL_GPIO_Init+0x2d0>)
 80014e8:	4013      	ands	r3, r2
 80014ea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d006      	beq.n	8001506 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014f8:	4b19      	ldr	r3, [pc, #100]	@ (8001560 <HAL_GPIO_Init+0x2d0>)
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	4918      	ldr	r1, [pc, #96]	@ (8001560 <HAL_GPIO_Init+0x2d0>)
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	4313      	orrs	r3, r2
 8001502:	604b      	str	r3, [r1, #4]
 8001504:	e006      	b.n	8001514 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001506:	4b16      	ldr	r3, [pc, #88]	@ (8001560 <HAL_GPIO_Init+0x2d0>)
 8001508:	685a      	ldr	r2, [r3, #4]
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	43db      	mvns	r3, r3
 800150e:	4914      	ldr	r1, [pc, #80]	@ (8001560 <HAL_GPIO_Init+0x2d0>)
 8001510:	4013      	ands	r3, r2
 8001512:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d021      	beq.n	8001564 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001520:	4b0f      	ldr	r3, [pc, #60]	@ (8001560 <HAL_GPIO_Init+0x2d0>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	490e      	ldr	r1, [pc, #56]	@ (8001560 <HAL_GPIO_Init+0x2d0>)
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	4313      	orrs	r3, r2
 800152a:	600b      	str	r3, [r1, #0]
 800152c:	e021      	b.n	8001572 <HAL_GPIO_Init+0x2e2>
 800152e:	bf00      	nop
 8001530:	10320000 	.word	0x10320000
 8001534:	10310000 	.word	0x10310000
 8001538:	10220000 	.word	0x10220000
 800153c:	10210000 	.word	0x10210000
 8001540:	10120000 	.word	0x10120000
 8001544:	10110000 	.word	0x10110000
 8001548:	40021000 	.word	0x40021000
 800154c:	40010000 	.word	0x40010000
 8001550:	40010800 	.word	0x40010800
 8001554:	40010c00 	.word	0x40010c00
 8001558:	40011000 	.word	0x40011000
 800155c:	40011400 	.word	0x40011400
 8001560:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001564:	4b0b      	ldr	r3, [pc, #44]	@ (8001594 <HAL_GPIO_Init+0x304>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	43db      	mvns	r3, r3
 800156c:	4909      	ldr	r1, [pc, #36]	@ (8001594 <HAL_GPIO_Init+0x304>)
 800156e:	4013      	ands	r3, r2
 8001570:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001574:	3301      	adds	r3, #1
 8001576:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800157e:	fa22 f303 	lsr.w	r3, r2, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	f47f ae8e 	bne.w	80012a4 <HAL_GPIO_Init+0x14>
  }
}
 8001588:	bf00      	nop
 800158a:	bf00      	nop
 800158c:	372c      	adds	r7, #44	@ 0x2c
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr
 8001594:	40010400 	.word	0x40010400

08001598 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	460b      	mov	r3, r1
 80015a2:	807b      	strh	r3, [r7, #2]
 80015a4:	4613      	mov	r3, r2
 80015a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015a8:	787b      	ldrb	r3, [r7, #1]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ae:	887a      	ldrh	r2, [r7, #2]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015b4:	e003      	b.n	80015be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015b6:	887b      	ldrh	r3, [r7, #2]
 80015b8:	041a      	lsls	r2, r3, #16
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	611a      	str	r2, [r3, #16]
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr

080015c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d101      	bne.n	80015da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e0e8      	b.n	80017ac <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d106      	bne.n	80015f4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f007 fb48 	bl	8008c84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2203      	movs	r2, #3
 80015f8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f003 fa43 	bl	8004a92 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6818      	ldr	r0, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3304      	adds	r3, #4
 8001614:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001616:	f003 fa19 	bl	8004a4c <USB_CoreInit>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d005      	beq.n	800162c <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2202      	movs	r2, #2
 8001624:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e0bf      	b.n	80017ac <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2100      	movs	r1, #0
 8001632:	4618      	mov	r0, r3
 8001634:	f003 fa47 	bl	8004ac6 <USB_SetCurrentMode>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d005      	beq.n	800164a <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2202      	movs	r2, #2
 8001642:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e0b0      	b.n	80017ac <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800164a:	2300      	movs	r3, #0
 800164c:	73fb      	strb	r3, [r7, #15]
 800164e:	e03e      	b.n	80016ce <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001650:	7bfa      	ldrb	r2, [r7, #15]
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	4613      	mov	r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	4413      	add	r3, r2
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	440b      	add	r3, r1
 800165e:	3311      	adds	r3, #17
 8001660:	2201      	movs	r2, #1
 8001662:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001664:	7bfa      	ldrb	r2, [r7, #15]
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	4613      	mov	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	440b      	add	r3, r1
 8001672:	3310      	adds	r3, #16
 8001674:	7bfa      	ldrb	r2, [r7, #15]
 8001676:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001678:	7bfa      	ldrb	r2, [r7, #15]
 800167a:	6879      	ldr	r1, [r7, #4]
 800167c:	4613      	mov	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4413      	add	r3, r2
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	440b      	add	r3, r1
 8001686:	3313      	adds	r3, #19
 8001688:	2200      	movs	r2, #0
 800168a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800168c:	7bfa      	ldrb	r2, [r7, #15]
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	4613      	mov	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	440b      	add	r3, r1
 800169a:	3320      	adds	r3, #32
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80016a0:	7bfa      	ldrb	r2, [r7, #15]
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	4613      	mov	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4413      	add	r3, r2
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	440b      	add	r3, r1
 80016ae:	3324      	adds	r3, #36	@ 0x24
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	1c5a      	adds	r2, r3, #1
 80016ba:	4613      	mov	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4413      	add	r3, r2
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	440b      	add	r3, r1
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
 80016ca:	3301      	adds	r3, #1
 80016cc:	73fb      	strb	r3, [r7, #15]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	791b      	ldrb	r3, [r3, #4]
 80016d2:	7bfa      	ldrb	r2, [r7, #15]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d3bb      	bcc.n	8001650 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016d8:	2300      	movs	r3, #0
 80016da:	73fb      	strb	r3, [r7, #15]
 80016dc:	e044      	b.n	8001768 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016de:	7bfa      	ldrb	r2, [r7, #15]
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	4613      	mov	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	440b      	add	r3, r1
 80016ec:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80016f0:	2200      	movs	r2, #0
 80016f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80016f4:	7bfa      	ldrb	r2, [r7, #15]
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	4613      	mov	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	440b      	add	r3, r1
 8001702:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001706:	7bfa      	ldrb	r2, [r7, #15]
 8001708:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800170a:	7bfa      	ldrb	r2, [r7, #15]
 800170c:	6879      	ldr	r1, [r7, #4]
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	440b      	add	r3, r1
 8001718:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800171c:	2200      	movs	r2, #0
 800171e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001720:	7bfa      	ldrb	r2, [r7, #15]
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	4613      	mov	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4413      	add	r3, r2
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	440b      	add	r3, r1
 800172e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001736:	7bfa      	ldrb	r2, [r7, #15]
 8001738:	6879      	ldr	r1, [r7, #4]
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	440b      	add	r3, r1
 8001744:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800174c:	7bfa      	ldrb	r2, [r7, #15]
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	4613      	mov	r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4413      	add	r3, r2
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	440b      	add	r3, r1
 800175a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001762:	7bfb      	ldrb	r3, [r7, #15]
 8001764:	3301      	adds	r3, #1
 8001766:	73fb      	strb	r3, [r7, #15]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	791b      	ldrb	r3, [r3, #4]
 800176c:	7bfa      	ldrb	r2, [r7, #15]
 800176e:	429a      	cmp	r2, r3
 8001770:	d3b5      	bcc.n	80016de <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6818      	ldr	r0, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	3304      	adds	r3, #4
 800177a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800177c:	f003 f9af 	bl	8004ade <USB_DevInit>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d005      	beq.n	8001792 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2202      	movs	r2, #2
 800178a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e00c      	b.n	80017ac <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2201      	movs	r2, #1
 800179c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f005 fc2e 	bl	8007006 <USB_DevDisconnect>

  return HAL_OK;
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d101      	bne.n	80017ca <HAL_PCD_Start+0x16>
 80017c6:	2302      	movs	r3, #2
 80017c8:	e016      	b.n	80017f8 <HAL_PCD_Start+0x44>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2201      	movs	r2, #1
 80017ce:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f003 f945 	bl	8004a66 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80017dc:	2101      	movs	r1, #1
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f007 fcc3 	bl	800916a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f005 fc02 	bl	8006ff2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b088      	sub	sp, #32
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f005 fc04 	bl	800701a <USB_ReadInterrupts>
 8001812:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f000 fb1a 	bl	8001e58 <PCD_EP_ISR_Handler>

    return;
 8001824:	e119      	b.n	8001a5a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800182c:	2b00      	cmp	r3, #0
 800182e:	d013      	beq.n	8001858 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001838:	b29a      	uxth	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001842:	b292      	uxth	r2, r2
 8001844:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f007 fa96 	bl	8008d7a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800184e:	2100      	movs	r1, #0
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f000 f905 	bl	8001a60 <HAL_PCD_SetAddress>

    return;
 8001856:	e100      	b.n	8001a5a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d00c      	beq.n	800187c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800186a:	b29a      	uxth	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001874:	b292      	uxth	r2, r2
 8001876:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800187a:	e0ee      	b.n	8001a5a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00c      	beq.n	80018a0 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800188e:	b29a      	uxth	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001898:	b292      	uxth	r2, r2
 800189a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800189e:	e0dc      	b.n	8001a5a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d027      	beq.n	80018fa <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f022 0204 	bic.w	r2, r2, #4
 80018bc:	b292      	uxth	r2, r2
 80018be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 0208 	bic.w	r2, r2, #8
 80018d4:	b292      	uxth	r2, r2
 80018d6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f007 fa86 	bl	8008dec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80018f2:	b292      	uxth	r2, r2
 80018f4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80018f8:	e0af      	b.n	8001a5a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001900:	2b00      	cmp	r3, #0
 8001902:	f000 8083 	beq.w	8001a0c <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001906:	2300      	movs	r3, #0
 8001908:	77fb      	strb	r3, [r7, #31]
 800190a:	e010      	b.n	800192e <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	461a      	mov	r2, r3
 8001912:	7ffb      	ldrb	r3, [r7, #31]
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	441a      	add	r2, r3
 8001918:	7ffb      	ldrb	r3, [r7, #31]
 800191a:	8812      	ldrh	r2, [r2, #0]
 800191c:	b292      	uxth	r2, r2
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	3320      	adds	r3, #32
 8001922:	443b      	add	r3, r7
 8001924:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001928:	7ffb      	ldrb	r3, [r7, #31]
 800192a:	3301      	adds	r3, #1
 800192c:	77fb      	strb	r3, [r7, #31]
 800192e:	7ffb      	ldrb	r3, [r7, #31]
 8001930:	2b07      	cmp	r3, #7
 8001932:	d9eb      	bls.n	800190c <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800193c:	b29a      	uxth	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f042 0201 	orr.w	r2, r2, #1
 8001946:	b292      	uxth	r2, r2
 8001948:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001954:	b29a      	uxth	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f022 0201 	bic.w	r2, r2, #1
 800195e:	b292      	uxth	r2, r2
 8001960:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001964:	bf00      	nop
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800196e:	b29b      	uxth	r3, r3
 8001970:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0f6      	beq.n	8001966 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001980:	b29a      	uxth	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800198a:	b292      	uxth	r2, r2
 800198c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001990:	2300      	movs	r3, #0
 8001992:	77fb      	strb	r3, [r7, #31]
 8001994:	e00f      	b.n	80019b6 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001996:	7ffb      	ldrb	r3, [r7, #31]
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	6812      	ldr	r2, [r2, #0]
 800199c:	4611      	mov	r1, r2
 800199e:	7ffa      	ldrb	r2, [r7, #31]
 80019a0:	0092      	lsls	r2, r2, #2
 80019a2:	440a      	add	r2, r1
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	3320      	adds	r3, #32
 80019a8:	443b      	add	r3, r7
 80019aa:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80019ae:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80019b0:	7ffb      	ldrb	r3, [r7, #31]
 80019b2:	3301      	adds	r3, #1
 80019b4:	77fb      	strb	r3, [r7, #31]
 80019b6:	7ffb      	ldrb	r3, [r7, #31]
 80019b8:	2b07      	cmp	r3, #7
 80019ba:	d9ec      	bls.n	8001996 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f042 0208 	orr.w	r2, r2, #8
 80019ce:	b292      	uxth	r2, r2
 80019d0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80019dc:	b29a      	uxth	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019e6:	b292      	uxth	r2, r2
 80019e8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f042 0204 	orr.w	r2, r2, #4
 80019fe:	b292      	uxth	r2, r2
 8001a00:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f007 f9d7 	bl	8008db8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001a0a:	e026      	b.n	8001a5a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d00f      	beq.n	8001a36 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001a28:	b292      	uxth	r2, r2
 8001a2a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f007 f995 	bl	8008d5e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001a34:	e011      	b.n	8001a5a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d00c      	beq.n	8001a5a <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a52:	b292      	uxth	r2, r2
 8001a54:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001a58:	bf00      	nop
  }
}
 8001a5a:	3720      	adds	r7, #32
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d101      	bne.n	8001a7a <HAL_PCD_SetAddress+0x1a>
 8001a76:	2302      	movs	r3, #2
 8001a78:	e012      	b.n	8001aa0 <HAL_PCD_SetAddress+0x40>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	78fa      	ldrb	r2, [r7, #3]
 8001a86:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	78fa      	ldrb	r2, [r7, #3]
 8001a8e:	4611      	mov	r1, r2
 8001a90:	4618      	mov	r0, r3
 8001a92:	f005 fa9b 	bl	8006fcc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	4608      	mov	r0, r1
 8001ab2:	4611      	mov	r1, r2
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	70fb      	strb	r3, [r7, #3]
 8001aba:	460b      	mov	r3, r1
 8001abc:	803b      	strh	r3, [r7, #0]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ac6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	da0e      	bge.n	8001aec <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ace:	78fb      	ldrb	r3, [r7, #3]
 8001ad0:	f003 0207 	and.w	r2, r3, #7
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	3310      	adds	r3, #16
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	705a      	strb	r2, [r3, #1]
 8001aea:	e00e      	b.n	8001b0a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001aec:	78fb      	ldrb	r3, [r7, #3]
 8001aee:	f003 0207 	and.w	r2, r3, #7
 8001af2:	4613      	mov	r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4413      	add	r3, r2
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	4413      	add	r3, r2
 8001b02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2200      	movs	r2, #0
 8001b08:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b0a:	78fb      	ldrb	r3, [r7, #3]
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b16:	883a      	ldrh	r2, [r7, #0]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	78ba      	ldrb	r2, [r7, #2]
 8001b20:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b22:	78bb      	ldrb	r3, [r7, #2]
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d102      	bne.n	8001b2e <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d101      	bne.n	8001b3c <HAL_PCD_EP_Open+0x94>
 8001b38:	2302      	movs	r3, #2
 8001b3a:	e00e      	b.n	8001b5a <HAL_PCD_EP_Open+0xb2>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	68f9      	ldr	r1, [r7, #12]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f002 ffe4 	bl	8004b18 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8001b58:	7afb      	ldrb	r3, [r7, #11]
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b084      	sub	sp, #16
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	da0e      	bge.n	8001b94 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b76:	78fb      	ldrb	r3, [r7, #3]
 8001b78:	f003 0207 	and.w	r2, r3, #7
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	3310      	adds	r3, #16
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	705a      	strb	r2, [r3, #1]
 8001b92:	e00e      	b.n	8001bb2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b94:	78fb      	ldrb	r3, [r7, #3]
 8001b96:	f003 0207 	and.w	r2, r3, #7
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4413      	add	r3, r2
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	4413      	add	r3, r2
 8001baa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bb2:	78fb      	ldrb	r3, [r7, #3]
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d101      	bne.n	8001bcc <HAL_PCD_EP_Close+0x6a>
 8001bc8:	2302      	movs	r3, #2
 8001bca:	e00e      	b.n	8001bea <HAL_PCD_EP_Close+0x88>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68f9      	ldr	r1, [r7, #12]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f003 fb5c 	bl	8005298 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b086      	sub	sp, #24
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	60f8      	str	r0, [r7, #12]
 8001bfa:	607a      	str	r2, [r7, #4]
 8001bfc:	603b      	str	r3, [r7, #0]
 8001bfe:	460b      	mov	r3, r1
 8001c00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c02:	7afb      	ldrb	r3, [r7, #11]
 8001c04:	f003 0207 	and.w	r2, r3, #7
 8001c08:	4613      	mov	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4413      	add	r3, r2
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001c14:	68fa      	ldr	r2, [r7, #12]
 8001c16:	4413      	add	r3, r2
 8001c18:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c32:	7afb      	ldrb	r3, [r7, #11]
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6979      	ldr	r1, [r7, #20]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f003 fd13 	bl	8005670 <USB_EPStartXfer>

  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3718      	adds	r7, #24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001c60:	78fb      	ldrb	r3, [r7, #3]
 8001c62:	f003 0207 	and.w	r2, r3, #7
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4413      	add	r3, r2
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	440b      	add	r3, r1
 8001c72:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8001c76:	681b      	ldr	r3, [r3, #0]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bc80      	pop	{r7}
 8001c80:	4770      	bx	lr

08001c82 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b086      	sub	sp, #24
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	60f8      	str	r0, [r7, #12]
 8001c8a:	607a      	str	r2, [r7, #4]
 8001c8c:	603b      	str	r3, [r7, #0]
 8001c8e:	460b      	mov	r3, r1
 8001c90:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c92:	7afb      	ldrb	r3, [r7, #11]
 8001c94:	f003 0207 	and.w	r2, r3, #7
 8001c98:	4613      	mov	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	3310      	adds	r3, #16
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cce:	7afb      	ldrb	r3, [r7, #11]
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6979      	ldr	r1, [r7, #20]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f003 fcc5 	bl	8005670 <USB_EPStartXfer>

  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3718      	adds	r7, #24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001cfc:	78fb      	ldrb	r3, [r7, #3]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	7912      	ldrb	r2, [r2, #4]
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d901      	bls.n	8001d0e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e04c      	b.n	8001da8 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	da0e      	bge.n	8001d34 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d16:	78fb      	ldrb	r3, [r7, #3]
 8001d18:	f003 0207 	and.w	r2, r3, #7
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4413      	add	r3, r2
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	3310      	adds	r3, #16
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	4413      	add	r3, r2
 8001d2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	705a      	strb	r2, [r3, #1]
 8001d32:	e00c      	b.n	8001d4e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d34:	78fa      	ldrb	r2, [r7, #3]
 8001d36:	4613      	mov	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2201      	movs	r2, #1
 8001d52:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d54:	78fb      	ldrb	r3, [r7, #3]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d101      	bne.n	8001d6e <HAL_PCD_EP_SetStall+0x7e>
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	e01c      	b.n	8001da8 <HAL_PCD_EP_SetStall+0xb8>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68f9      	ldr	r1, [r7, #12]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f005 f828 	bl	8006dd2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d82:	78fb      	ldrb	r3, [r7, #3]
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d108      	bne.n	8001d9e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8001d96:	4619      	mov	r1, r3
 8001d98:	4610      	mov	r0, r2
 8001d9a:	f005 f94d 	bl	8007038 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	460b      	mov	r3, r1
 8001dba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001dbc:	78fb      	ldrb	r3, [r7, #3]
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	7912      	ldrb	r2, [r2, #4]
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d901      	bls.n	8001dce <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e040      	b.n	8001e50 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001dce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	da0e      	bge.n	8001df4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dd6:	78fb      	ldrb	r3, [r7, #3]
 8001dd8:	f003 0207 	and.w	r2, r3, #7
 8001ddc:	4613      	mov	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	3310      	adds	r3, #16
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	4413      	add	r3, r2
 8001dea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2201      	movs	r2, #1
 8001df0:	705a      	strb	r2, [r3, #1]
 8001df2:	e00e      	b.n	8001e12 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001df4:	78fb      	ldrb	r3, [r7, #3]
 8001df6:	f003 0207 	and.w	r2, r3, #7
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	4413      	add	r3, r2
 8001e0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2200      	movs	r2, #0
 8001e16:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e18:	78fb      	ldrb	r3, [r7, #3]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d101      	bne.n	8001e32 <HAL_PCD_EP_ClrStall+0x82>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e00e      	b.n	8001e50 <HAL_PCD_EP_ClrStall+0xa0>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68f9      	ldr	r1, [r7, #12]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f005 f816 	bl	8006e72 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b096      	sub	sp, #88	@ 0x58
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e60:	e3bb      	b.n	80025da <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001e6a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001e6e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	f003 030f 	and.w	r3, r3, #15
 8001e78:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8001e7c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f040 8175 	bne.w	8002170 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001e86:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001e8a:	f003 0310 	and.w	r3, r3, #16
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d14e      	bne.n	8001f30 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001e9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ea2:	81fb      	strh	r3, [r7, #14]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	89fb      	ldrh	r3, [r7, #14]
 8001eaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001eae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3310      	adds	r3, #16
 8001eba:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	4413      	add	r3, r2
 8001ed0:	3302      	adds	r3, #2
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	6812      	ldr	r2, [r2, #0]
 8001ed8:	4413      	add	r3, r2
 8001eda:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001ede:	881b      	ldrh	r3, [r3, #0]
 8001ee0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ee4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ee6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001ee8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eea:	695a      	ldr	r2, [r3, #20]
 8001eec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	441a      	add	r2, r3
 8001ef2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ef4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f006 ff16 	bl	8008d2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	7b5b      	ldrb	r3, [r3, #13]
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f000 8368 	beq.w	80025da <PCD_EP_ISR_Handler+0x782>
 8001f0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f040 8363 	bne.w	80025da <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	7b5b      	ldrb	r3, [r3, #13]
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	735a      	strb	r2, [r3, #13]
 8001f2e:	e354      	b.n	80025da <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001f36:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	881b      	ldrh	r3, [r3, #0]
 8001f3e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001f42:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001f46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d034      	beq.n	8001fb8 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	461a      	mov	r2, r3
 8001f5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	4413      	add	r3, r2
 8001f62:	3306      	adds	r3, #6
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	6812      	ldr	r2, [r2, #0]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001f70:	881b      	ldrh	r3, [r3, #0]
 8001f72:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f78:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6818      	ldr	r0, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001f84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f86:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001f88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f8a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	f005 f8a4 	bl	80070da <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	881b      	ldrh	r3, [r3, #0]
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	823b      	strh	r3, [r7, #16]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	8a3a      	ldrh	r2, [r7, #16]
 8001fa8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001fac:	b292      	uxth	r2, r2
 8001fae:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f006 fe8d 	bl	8008cd0 <HAL_PCD_SetupStageCallback>
 8001fb6:	e310      	b.n	80025da <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001fb8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f280 830c 	bge.w	80025da <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	881b      	ldrh	r3, [r3, #0]
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001fce:	4013      	ands	r3, r2
 8001fd0:	83fb      	strh	r3, [r7, #30]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	8bfa      	ldrh	r2, [r7, #30]
 8001fd8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001fdc:	b292      	uxth	r2, r2
 8001fde:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	461a      	mov	r2, r3
 8001fec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	4413      	add	r3, r2
 8001ff4:	3306      	adds	r3, #6
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	6812      	ldr	r2, [r2, #0]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002002:	881b      	ldrh	r3, [r3, #0]
 8002004:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002008:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800200a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800200c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800200e:	69db      	ldr	r3, [r3, #28]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d019      	beq.n	8002048 <PCD_EP_ISR_Handler+0x1f0>
 8002014:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002016:	695b      	ldr	r3, [r3, #20]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d015      	beq.n	8002048 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6818      	ldr	r0, [r3, #0]
 8002020:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002022:	6959      	ldr	r1, [r3, #20]
 8002024:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002026:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002028:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800202a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800202c:	b29b      	uxth	r3, r3
 800202e:	f005 f854 	bl	80070da <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002034:	695a      	ldr	r2, [r3, #20]
 8002036:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	441a      	add	r2, r3
 800203c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800203e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002040:	2100      	movs	r1, #0
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f006 fe56 	bl	8008cf4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	881b      	ldrh	r3, [r3, #0]
 800204e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002052:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002056:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800205a:	2b00      	cmp	r3, #0
 800205c:	f040 82bd 	bne.w	80025da <PCD_EP_ISR_Handler+0x782>
 8002060:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002064:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002068:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800206c:	f000 82b5 	beq.w	80025da <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	61bb      	str	r3, [r7, #24]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800207e:	b29b      	uxth	r3, r3
 8002080:	461a      	mov	r2, r3
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	4413      	add	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800208e:	617b      	str	r3, [r7, #20]
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	881b      	ldrh	r3, [r3, #0]
 8002094:	b29b      	uxth	r3, r3
 8002096:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800209a:	b29a      	uxth	r2, r3
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	801a      	strh	r2, [r3, #0]
 80020a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	2b3e      	cmp	r3, #62	@ 0x3e
 80020a6:	d91d      	bls.n	80020e4 <PCD_EP_ISR_Handler+0x28c>
 80020a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	095b      	lsrs	r3, r3, #5
 80020ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80020b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	f003 031f 	and.w	r3, r3, #31
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d102      	bne.n	80020c2 <PCD_EP_ISR_Handler+0x26a>
 80020bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020be:	3b01      	subs	r3, #1
 80020c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	881b      	ldrh	r3, [r3, #0]
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	029b      	lsls	r3, r3, #10
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	4313      	orrs	r3, r2
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020dc:	b29a      	uxth	r2, r3
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	801a      	strh	r2, [r3, #0]
 80020e2:	e026      	b.n	8002132 <PCD_EP_ISR_Handler+0x2da>
 80020e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d10a      	bne.n	8002102 <PCD_EP_ISR_Handler+0x2aa>
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	881b      	ldrh	r3, [r3, #0]
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	801a      	strh	r2, [r3, #0]
 8002100:	e017      	b.n	8002132 <PCD_EP_ISR_Handler+0x2da>
 8002102:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	085b      	lsrs	r3, r3, #1
 8002108:	647b      	str	r3, [r7, #68]	@ 0x44
 800210a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b00      	cmp	r3, #0
 8002114:	d002      	beq.n	800211c <PCD_EP_ISR_Handler+0x2c4>
 8002116:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002118:	3301      	adds	r3, #1
 800211a:	647b      	str	r3, [r7, #68]	@ 0x44
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	881b      	ldrh	r3, [r3, #0]
 8002120:	b29a      	uxth	r2, r3
 8002122:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002124:	b29b      	uxth	r3, r3
 8002126:	029b      	lsls	r3, r3, #10
 8002128:	b29b      	uxth	r3, r3
 800212a:	4313      	orrs	r3, r2
 800212c:	b29a      	uxth	r2, r3
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	b29b      	uxth	r3, r3
 800213a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800213e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002142:	827b      	strh	r3, [r7, #18]
 8002144:	8a7b      	ldrh	r3, [r7, #18]
 8002146:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800214a:	827b      	strh	r3, [r7, #18]
 800214c:	8a7b      	ldrh	r3, [r7, #18]
 800214e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002152:	827b      	strh	r3, [r7, #18]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	8a7b      	ldrh	r3, [r7, #18]
 800215a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800215e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002162:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002166:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800216a:	b29b      	uxth	r3, r3
 800216c:	8013      	strh	r3, [r2, #0]
 800216e:	e234      	b.n	80025da <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	461a      	mov	r2, r3
 8002176:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4413      	add	r3, r2
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002184:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002188:	2b00      	cmp	r3, #0
 800218a:	f280 80fc 	bge.w	8002386 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	461a      	mov	r2, r3
 8002194:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	b29a      	uxth	r2, r3
 80021a0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80021a4:	4013      	ands	r3, r2
 80021a6:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	461a      	mov	r2, r3
 80021b0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80021bc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80021c0:	b292      	uxth	r2, r2
 80021c2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80021c4:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	4413      	add	r3, r2
 80021d8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80021da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021dc:	7b1b      	ldrb	r3, [r3, #12]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d125      	bne.n	800222e <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	461a      	mov	r2, r3
 80021ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	4413      	add	r3, r2
 80021f6:	3306      	adds	r3, #6
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6812      	ldr	r2, [r2, #0]
 80021fe:	4413      	add	r3, r2
 8002200:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800220a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800220e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002212:	2b00      	cmp	r3, #0
 8002214:	f000 8092 	beq.w	800233c <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6818      	ldr	r0, [r3, #0]
 800221c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800221e:	6959      	ldr	r1, [r3, #20]
 8002220:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002222:	88da      	ldrh	r2, [r3, #6]
 8002224:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002228:	f004 ff57 	bl	80070da <USB_ReadPMA>
 800222c:	e086      	b.n	800233c <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800222e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002230:	78db      	ldrb	r3, [r3, #3]
 8002232:	2b02      	cmp	r3, #2
 8002234:	d10a      	bne.n	800224c <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002236:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800223a:	461a      	mov	r2, r3
 800223c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f9d9 	bl	80025f6 <HAL_PCD_EP_DB_Receive>
 8002244:	4603      	mov	r3, r0
 8002246:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800224a:	e077      	b.n	800233c <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	461a      	mov	r2, r3
 8002252:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4413      	add	r3, r2
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	b29b      	uxth	r3, r3
 800225e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002262:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002266:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	441a      	add	r2, r3
 8002278:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800227c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002280:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002284:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002288:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800228c:	b29b      	uxth	r3, r3
 800228e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	461a      	mov	r2, r3
 8002296:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	881b      	ldrh	r3, [r3, #0]
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d024      	beq.n	80022f4 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	461a      	mov	r2, r3
 80022b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	4413      	add	r3, r2
 80022be:	3302      	adds	r3, #2
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	6812      	ldr	r2, [r2, #0]
 80022c6:	4413      	add	r3, r2
 80022c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80022cc:	881b      	ldrh	r3, [r3, #0]
 80022ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022d2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80022d6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d02e      	beq.n	800233c <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6818      	ldr	r0, [r3, #0]
 80022e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022e4:	6959      	ldr	r1, [r3, #20]
 80022e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022e8:	891a      	ldrh	r2, [r3, #8]
 80022ea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80022ee:	f004 fef4 	bl	80070da <USB_ReadPMA>
 80022f2:	e023      	b.n	800233c <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	461a      	mov	r2, r3
 8002300:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	4413      	add	r3, r2
 8002308:	3306      	adds	r3, #6
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	6812      	ldr	r2, [r2, #0]
 8002310:	4413      	add	r3, r2
 8002312:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002316:	881b      	ldrh	r3, [r3, #0]
 8002318:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800231c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002320:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002324:	2b00      	cmp	r3, #0
 8002326:	d009      	beq.n	800233c <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6818      	ldr	r0, [r3, #0]
 800232c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800232e:	6959      	ldr	r1, [r3, #20]
 8002330:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002332:	895a      	ldrh	r2, [r3, #10]
 8002334:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002338:	f004 fecf 	bl	80070da <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800233c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800233e:	69da      	ldr	r2, [r3, #28]
 8002340:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002344:	441a      	add	r2, r3
 8002346:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002348:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800234a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800234c:	695a      	ldr	r2, [r3, #20]
 800234e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002352:	441a      	add	r2, r3
 8002354:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002356:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002358:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d005      	beq.n	800236c <PCD_EP_ISR_Handler+0x514>
 8002360:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002364:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	429a      	cmp	r2, r3
 800236a:	d206      	bcs.n	800237a <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800236c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	4619      	mov	r1, r3
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f006 fcbe 	bl	8008cf4 <HAL_PCD_DataOutStageCallback>
 8002378:	e005      	b.n	8002386 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002380:	4618      	mov	r0, r3
 8002382:	f003 f975 	bl	8005670 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002386:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800238a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 8123 	beq.w	80025da <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8002394:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002398:	4613      	mov	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	3310      	adds	r3, #16
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	4413      	add	r3, r2
 80023a6:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	461a      	mov	r2, r3
 80023ae:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4413      	add	r3, r2
 80023b6:	881b      	ldrh	r3, [r3, #0]
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80023be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023c2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	461a      	mov	r2, r3
 80023cc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	441a      	add	r2, r3
 80023d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80023d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80023e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023e6:	78db      	ldrb	r3, [r3, #3]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	f040 80a2 	bne.w	8002532 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 80023ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023f0:	2200      	movs	r2, #0
 80023f2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80023f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023f6:	7b1b      	ldrb	r3, [r3, #12]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f000 8093 	beq.w	8002524 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80023fe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002402:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002406:	2b00      	cmp	r3, #0
 8002408:	d046      	beq.n	8002498 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800240a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800240c:	785b      	ldrb	r3, [r3, #1]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d126      	bne.n	8002460 <PCD_EP_ISR_Handler+0x608>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	627b      	str	r3, [r7, #36]	@ 0x24
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002420:	b29b      	uxth	r3, r3
 8002422:	461a      	mov	r2, r3
 8002424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002426:	4413      	add	r3, r2
 8002428:	627b      	str	r3, [r7, #36]	@ 0x24
 800242a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	011a      	lsls	r2, r3, #4
 8002430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002432:	4413      	add	r3, r2
 8002434:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002438:	623b      	str	r3, [r7, #32]
 800243a:	6a3b      	ldr	r3, [r7, #32]
 800243c:	881b      	ldrh	r3, [r3, #0]
 800243e:	b29b      	uxth	r3, r3
 8002440:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002444:	b29a      	uxth	r2, r3
 8002446:	6a3b      	ldr	r3, [r7, #32]
 8002448:	801a      	strh	r2, [r3, #0]
 800244a:	6a3b      	ldr	r3, [r7, #32]
 800244c:	881b      	ldrh	r3, [r3, #0]
 800244e:	b29b      	uxth	r3, r3
 8002450:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002454:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002458:	b29a      	uxth	r2, r3
 800245a:	6a3b      	ldr	r3, [r7, #32]
 800245c:	801a      	strh	r2, [r3, #0]
 800245e:	e061      	b.n	8002524 <PCD_EP_ISR_Handler+0x6cc>
 8002460:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002462:	785b      	ldrb	r3, [r3, #1]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d15d      	bne.n	8002524 <PCD_EP_ISR_Handler+0x6cc>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002476:	b29b      	uxth	r3, r3
 8002478:	461a      	mov	r2, r3
 800247a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800247c:	4413      	add	r3, r2
 800247e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002480:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	011a      	lsls	r2, r3, #4
 8002486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002488:	4413      	add	r3, r2
 800248a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800248e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002492:	2200      	movs	r2, #0
 8002494:	801a      	strh	r2, [r3, #0]
 8002496:	e045      	b.n	8002524 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800249e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024a0:	785b      	ldrb	r3, [r3, #1]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d126      	bne.n	80024f4 <PCD_EP_ISR_Handler+0x69c>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	461a      	mov	r2, r3
 80024b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024ba:	4413      	add	r3, r2
 80024bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80024be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	011a      	lsls	r2, r3, #4
 80024c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024c6:	4413      	add	r3, r2
 80024c8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80024cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80024ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d0:	881b      	ldrh	r3, [r3, #0]
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024d8:	b29a      	uxth	r2, r3
 80024da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024dc:	801a      	strh	r2, [r3, #0]
 80024de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024e0:	881b      	ldrh	r3, [r3, #0]
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024f0:	801a      	strh	r2, [r3, #0]
 80024f2:	e017      	b.n	8002524 <PCD_EP_ISR_Handler+0x6cc>
 80024f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024f6:	785b      	ldrb	r3, [r3, #1]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d113      	bne.n	8002524 <PCD_EP_ISR_Handler+0x6cc>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002504:	b29b      	uxth	r3, r3
 8002506:	461a      	mov	r2, r3
 8002508:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800250a:	4413      	add	r3, r2
 800250c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800250e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	011a      	lsls	r2, r3, #4
 8002514:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002516:	4413      	add	r3, r2
 8002518:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800251c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800251e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002520:	2200      	movs	r2, #0
 8002522:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002524:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	4619      	mov	r1, r3
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f006 fbfd 	bl	8008d2a <HAL_PCD_DataInStageCallback>
 8002530:	e053      	b.n	80025da <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002532:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800253a:	2b00      	cmp	r3, #0
 800253c:	d146      	bne.n	80025cc <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002546:	b29b      	uxth	r3, r3
 8002548:	461a      	mov	r2, r3
 800254a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	4413      	add	r3, r2
 8002552:	3302      	adds	r3, #2
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	6812      	ldr	r2, [r2, #0]
 800255a:	4413      	add	r3, r2
 800255c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002566:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800256a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800256c:	699a      	ldr	r2, [r3, #24]
 800256e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002572:	429a      	cmp	r2, r3
 8002574:	d907      	bls.n	8002586 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8002576:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002578:	699a      	ldr	r2, [r3, #24]
 800257a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800257e:	1ad2      	subs	r2, r2, r3
 8002580:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002582:	619a      	str	r2, [r3, #24]
 8002584:	e002      	b.n	800258c <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8002586:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002588:	2200      	movs	r2, #0
 800258a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800258c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d106      	bne.n	80025a2 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002594:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	4619      	mov	r1, r3
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f006 fbc5 	bl	8008d2a <HAL_PCD_DataInStageCallback>
 80025a0:	e01b      	b.n	80025da <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80025a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025a4:	695a      	ldr	r2, [r3, #20]
 80025a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80025aa:	441a      	add	r2, r3
 80025ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025ae:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80025b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025b2:	69da      	ldr	r2, [r3, #28]
 80025b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80025b8:	441a      	add	r2, r3
 80025ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025bc:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80025c4:	4618      	mov	r0, r3
 80025c6:	f003 f853 	bl	8005670 <USB_EPStartXfer>
 80025ca:	e006      	b.n	80025da <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80025cc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80025d0:	461a      	mov	r2, r3
 80025d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 f91b 	bl	8002810 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	b21b      	sxth	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f6ff ac3b 	blt.w	8001e62 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3758      	adds	r7, #88	@ 0x58
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b088      	sub	sp, #32
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	60f8      	str	r0, [r7, #12]
 80025fe:	60b9      	str	r1, [r7, #8]
 8002600:	4613      	mov	r3, r2
 8002602:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002604:	88fb      	ldrh	r3, [r7, #6]
 8002606:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d07e      	beq.n	800270c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002616:	b29b      	uxth	r3, r3
 8002618:	461a      	mov	r2, r3
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	4413      	add	r3, r2
 8002622:	3302      	adds	r3, #2
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	6812      	ldr	r2, [r2, #0]
 800262a:	4413      	add	r3, r2
 800262c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002630:	881b      	ldrh	r3, [r3, #0]
 8002632:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002636:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	699a      	ldr	r2, [r3, #24]
 800263c:	8b7b      	ldrh	r3, [r7, #26]
 800263e:	429a      	cmp	r2, r3
 8002640:	d306      	bcc.n	8002650 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	699a      	ldr	r2, [r3, #24]
 8002646:	8b7b      	ldrh	r3, [r7, #26]
 8002648:	1ad2      	subs	r2, r2, r3
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	619a      	str	r2, [r3, #24]
 800264e:	e002      	b.n	8002656 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	2200      	movs	r2, #0
 8002654:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d123      	bne.n	80026a6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	461a      	mov	r2, r3
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4413      	add	r3, r2
 800266c:	881b      	ldrh	r3, [r3, #0]
 800266e:	b29b      	uxth	r3, r3
 8002670:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002674:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002678:	833b      	strh	r3, [r7, #24]
 800267a:	8b3b      	ldrh	r3, [r7, #24]
 800267c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002680:	833b      	strh	r3, [r7, #24]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	461a      	mov	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	441a      	add	r2, r3
 8002690:	8b3b      	ldrh	r3, [r7, #24]
 8002692:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002696:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800269a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800269e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80026a6:	88fb      	ldrh	r3, [r7, #6]
 80026a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d01f      	beq.n	80026f0 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	461a      	mov	r2, r3
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4413      	add	r3, r2
 80026be:	881b      	ldrh	r3, [r3, #0]
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80026c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026ca:	82fb      	strh	r3, [r7, #22]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	461a      	mov	r2, r3
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	441a      	add	r2, r3
 80026da:	8afb      	ldrh	r3, [r7, #22]
 80026dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80026e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80026e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026e8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80026f0:	8b7b      	ldrh	r3, [r7, #26]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 8087 	beq.w	8002806 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6818      	ldr	r0, [r3, #0]
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	6959      	ldr	r1, [r3, #20]
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	891a      	ldrh	r2, [r3, #8]
 8002704:	8b7b      	ldrh	r3, [r7, #26]
 8002706:	f004 fce8 	bl	80070da <USB_ReadPMA>
 800270a:	e07c      	b.n	8002806 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002714:	b29b      	uxth	r3, r3
 8002716:	461a      	mov	r2, r3
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	4413      	add	r3, r2
 8002720:	3306      	adds	r3, #6
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	6812      	ldr	r2, [r2, #0]
 8002728:	4413      	add	r3, r2
 800272a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800272e:	881b      	ldrh	r3, [r3, #0]
 8002730:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002734:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	699a      	ldr	r2, [r3, #24]
 800273a:	8b7b      	ldrh	r3, [r7, #26]
 800273c:	429a      	cmp	r2, r3
 800273e:	d306      	bcc.n	800274e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	699a      	ldr	r2, [r3, #24]
 8002744:	8b7b      	ldrh	r3, [r7, #26]
 8002746:	1ad2      	subs	r2, r2, r3
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	619a      	str	r2, [r3, #24]
 800274c:	e002      	b.n	8002754 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	2200      	movs	r2, #0
 8002752:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d123      	bne.n	80027a4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	461a      	mov	r2, r3
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	b29b      	uxth	r3, r3
 800276e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002772:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002776:	83fb      	strh	r3, [r7, #30]
 8002778:	8bfb      	ldrh	r3, [r7, #30]
 800277a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800277e:	83fb      	strh	r3, [r7, #30]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	461a      	mov	r2, r3
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	441a      	add	r2, r3
 800278e:	8bfb      	ldrh	r3, [r7, #30]
 8002790:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002794:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002798:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800279c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80027a4:	88fb      	ldrh	r3, [r7, #6]
 80027a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d11f      	bne.n	80027ee <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	461a      	mov	r2, r3
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4413      	add	r3, r2
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	b29b      	uxth	r3, r3
 80027c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80027c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027c8:	83bb      	strh	r3, [r7, #28]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	461a      	mov	r2, r3
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	441a      	add	r2, r3
 80027d8:	8bbb      	ldrh	r3, [r7, #28]
 80027da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80027de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80027e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027e6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80027ee:	8b7b      	ldrh	r3, [r7, #26]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d008      	beq.n	8002806 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6818      	ldr	r0, [r3, #0]
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	6959      	ldr	r1, [r3, #20]
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	895a      	ldrh	r2, [r3, #10]
 8002800:	8b7b      	ldrh	r3, [r7, #26]
 8002802:	f004 fc6a 	bl	80070da <USB_ReadPMA>
    }
  }

  return count;
 8002806:	8b7b      	ldrh	r3, [r7, #26]
}
 8002808:	4618      	mov	r0, r3
 800280a:	3720      	adds	r7, #32
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b0a4      	sub	sp, #144	@ 0x90
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	4613      	mov	r3, r2
 800281c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800281e:	88fb      	ldrh	r3, [r7, #6]
 8002820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002824:	2b00      	cmp	r3, #0
 8002826:	f000 81dd 	beq.w	8002be4 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002832:	b29b      	uxth	r3, r3
 8002834:	461a      	mov	r2, r3
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	4413      	add	r3, r2
 800283e:	3302      	adds	r3, #2
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	6812      	ldr	r2, [r2, #0]
 8002846:	4413      	add	r3, r2
 8002848:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800284c:	881b      	ldrh	r3, [r3, #0]
 800284e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002852:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	699a      	ldr	r2, [r3, #24]
 800285a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800285e:	429a      	cmp	r2, r3
 8002860:	d907      	bls.n	8002872 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	699a      	ldr	r2, [r3, #24]
 8002866:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800286a:	1ad2      	subs	r2, r2, r3
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	619a      	str	r2, [r3, #24]
 8002870:	e002      	b.n	8002878 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	2200      	movs	r2, #0
 8002876:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	2b00      	cmp	r3, #0
 800287e:	f040 80b9 	bne.w	80029f4 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	785b      	ldrb	r3, [r3, #1]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d126      	bne.n	80028d8 <HAL_PCD_EP_DB_Transmit+0xc8>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002898:	b29b      	uxth	r3, r3
 800289a:	461a      	mov	r2, r3
 800289c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800289e:	4413      	add	r3, r2
 80028a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	011a      	lsls	r2, r3, #4
 80028a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028aa:	4413      	add	r3, r2
 80028ac:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80028b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028b4:	881b      	ldrh	r3, [r3, #0]
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028bc:	b29a      	uxth	r2, r3
 80028be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028c0:	801a      	strh	r2, [r3, #0]
 80028c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028c4:	881b      	ldrh	r3, [r3, #0]
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028d4:	801a      	strh	r2, [r3, #0]
 80028d6:	e01a      	b.n	800290e <HAL_PCD_EP_DB_Transmit+0xfe>
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	785b      	ldrb	r3, [r3, #1]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d116      	bne.n	800290e <HAL_PCD_EP_DB_Transmit+0xfe>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	461a      	mov	r2, r3
 80028f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028f4:	4413      	add	r3, r2
 80028f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	011a      	lsls	r2, r3, #4
 80028fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002900:	4413      	add	r3, r2
 8002902:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002906:	633b      	str	r3, [r7, #48]	@ 0x30
 8002908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800290a:	2200      	movs	r2, #0
 800290c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	627b      	str	r3, [r7, #36]	@ 0x24
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	785b      	ldrb	r3, [r3, #1]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d126      	bne.n	800296a <HAL_PCD_EP_DB_Transmit+0x15a>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	61fb      	str	r3, [r7, #28]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800292a:	b29b      	uxth	r3, r3
 800292c:	461a      	mov	r2, r3
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	4413      	add	r3, r2
 8002932:	61fb      	str	r3, [r7, #28]
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	011a      	lsls	r2, r3, #4
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	4413      	add	r3, r2
 800293e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002942:	61bb      	str	r3, [r7, #24]
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	881b      	ldrh	r3, [r3, #0]
 8002948:	b29b      	uxth	r3, r3
 800294a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800294e:	b29a      	uxth	r2, r3
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	801a      	strh	r2, [r3, #0]
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	881b      	ldrh	r3, [r3, #0]
 8002958:	b29b      	uxth	r3, r3
 800295a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800295e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002962:	b29a      	uxth	r2, r3
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	801a      	strh	r2, [r3, #0]
 8002968:	e017      	b.n	800299a <HAL_PCD_EP_DB_Transmit+0x18a>
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	785b      	ldrb	r3, [r3, #1]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d113      	bne.n	800299a <HAL_PCD_EP_DB_Transmit+0x18a>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800297a:	b29b      	uxth	r3, r3
 800297c:	461a      	mov	r2, r3
 800297e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002980:	4413      	add	r3, r2
 8002982:	627b      	str	r3, [r7, #36]	@ 0x24
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	011a      	lsls	r2, r3, #4
 800298a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298c:	4413      	add	r3, r2
 800298e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002992:	623b      	str	r3, [r7, #32]
 8002994:	6a3b      	ldr	r3, [r7, #32]
 8002996:	2200      	movs	r2, #0
 8002998:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	4619      	mov	r1, r3
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f006 f9c2 	bl	8008d2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029a6:	88fb      	ldrh	r3, [r7, #6]
 80029a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 82fc 	beq.w	8002faa <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	461a      	mov	r2, r3
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	881b      	ldrh	r3, [r3, #0]
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80029c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029cc:	82fb      	strh	r3, [r7, #22]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	461a      	mov	r2, r3
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	441a      	add	r2, r3
 80029dc:	8afb      	ldrh	r3, [r7, #22]
 80029de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80029e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80029e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80029ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	8013      	strh	r3, [r2, #0]
 80029f2:	e2da      	b.n	8002faa <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029f4:	88fb      	ldrh	r3, [r7, #6]
 80029f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d021      	beq.n	8002a42 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	461a      	mov	r2, r3
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4413      	add	r3, r2
 8002a0c:	881b      	ldrh	r3, [r3, #0]
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a18:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	461a      	mov	r2, r3
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	441a      	add	r2, r3
 8002a2a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002a2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a36:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	f040 82ae 	bne.w	8002faa <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	695a      	ldr	r2, [r3, #20]
 8002a52:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002a56:	441a      	add	r2, r3
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	69da      	ldr	r2, [r3, #28]
 8002a60:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002a64:	441a      	add	r2, r3
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	6a1a      	ldr	r2, [r3, #32]
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d30b      	bcc.n	8002a8e <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	6a1a      	ldr	r2, [r3, #32]
 8002a82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a86:	1ad2      	subs	r2, r2, r3
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	621a      	str	r2, [r3, #32]
 8002a8c:	e017      	b.n	8002abe <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d108      	bne.n	8002aa8 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002a96:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002a9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002aa6:	e00a      	b.n	8002abe <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	2200      	movs	r2, #0
 8002abc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	785b      	ldrb	r3, [r3, #1]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d165      	bne.n	8002b92 <HAL_PCD_EP_DB_Transmit+0x382>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ada:	4413      	add	r3, r2
 8002adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	011a      	lsls	r2, r3, #4
 8002ae4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ae6:	4413      	add	r3, r2
 8002ae8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002aec:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002af0:	881b      	ldrh	r3, [r3, #0]
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002afc:	801a      	strh	r2, [r3, #0]
 8002afe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b02:	2b3e      	cmp	r3, #62	@ 0x3e
 8002b04:	d91d      	bls.n	8002b42 <HAL_PCD_EP_DB_Transmit+0x332>
 8002b06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b0a:	095b      	lsrs	r3, r3, #5
 8002b0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b12:	f003 031f 	and.w	r3, r3, #31
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d102      	bne.n	8002b20 <HAL_PCD_EP_DB_Transmit+0x310>
 8002b1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b22:	881b      	ldrh	r3, [r3, #0]
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	029b      	lsls	r3, r3, #10
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b3e:	801a      	strh	r2, [r3, #0]
 8002b40:	e044      	b.n	8002bcc <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002b42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10a      	bne.n	8002b60 <HAL_PCD_EP_DB_Transmit+0x350>
 8002b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b4c:	881b      	ldrh	r3, [r3, #0]
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b5c:	801a      	strh	r2, [r3, #0]
 8002b5e:	e035      	b.n	8002bcc <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002b60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b64:	085b      	lsrs	r3, r3, #1
 8002b66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d002      	beq.n	8002b7a <HAL_PCD_EP_DB_Transmit+0x36a>
 8002b74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b76:	3301      	adds	r3, #1
 8002b78:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b7c:	881b      	ldrh	r3, [r3, #0]
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	029b      	lsls	r3, r3, #10
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b8e:	801a      	strh	r2, [r3, #0]
 8002b90:	e01c      	b.n	8002bcc <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	785b      	ldrb	r3, [r3, #1]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d118      	bne.n	8002bcc <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	461a      	mov	r2, r3
 8002bac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bae:	4413      	add	r3, r2
 8002bb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	011a      	lsls	r2, r3, #4
 8002bb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bba:	4413      	add	r3, r2
 8002bbc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002bc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8002bc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bca:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6818      	ldr	r0, [r3, #0]
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	6959      	ldr	r1, [r3, #20]
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	891a      	ldrh	r2, [r3, #8]
 8002bd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	f004 fa36 	bl	800704e <USB_WritePMA>
 8002be2:	e1e2      	b.n	8002faa <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	461a      	mov	r2, r3
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3306      	adds	r3, #6
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	6812      	ldr	r2, [r2, #0]
 8002c00:	4413      	add	r3, r2
 8002c02:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002c06:	881b      	ldrh	r3, [r3, #0]
 8002c08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c0c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	699a      	ldr	r2, [r3, #24]
 8002c14:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d307      	bcc.n	8002c2c <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	699a      	ldr	r2, [r3, #24]
 8002c20:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002c24:	1ad2      	subs	r2, r2, r3
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	619a      	str	r2, [r3, #24]
 8002c2a:	e002      	b.n	8002c32 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f040 80c0 	bne.w	8002dbc <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	785b      	ldrb	r3, [r3, #1]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d126      	bne.n	8002c92 <HAL_PCD_EP_DB_Transmit+0x482>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	461a      	mov	r2, r3
 8002c56:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c58:	4413      	add	r3, r2
 8002c5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	011a      	lsls	r2, r3, #4
 8002c62:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c64:	4413      	add	r3, r2
 8002c66:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002c6a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002c6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c6e:	881b      	ldrh	r3, [r3, #0]
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c7a:	801a      	strh	r2, [r3, #0]
 8002c7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c7e:	881b      	ldrh	r3, [r3, #0]
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c8e:	801a      	strh	r2, [r3, #0]
 8002c90:	e01a      	b.n	8002cc8 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	785b      	ldrb	r3, [r3, #1]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d116      	bne.n	8002cc8 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	461a      	mov	r2, r3
 8002cac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cae:	4413      	add	r3, r2
 8002cb0:	667b      	str	r3, [r7, #100]	@ 0x64
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	011a      	lsls	r2, r3, #4
 8002cb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cba:	4413      	add	r3, r2
 8002cbc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002cc0:	663b      	str	r3, [r7, #96]	@ 0x60
 8002cc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	677b      	str	r3, [r7, #116]	@ 0x74
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	785b      	ldrb	r3, [r3, #1]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d12b      	bne.n	8002d2e <HAL_PCD_EP_DB_Transmit+0x51e>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cea:	4413      	add	r3, r2
 8002cec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	011a      	lsls	r2, r3, #4
 8002cf4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cf6:	4413      	add	r3, r2
 8002cf8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002cfc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002d00:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d04:	881b      	ldrh	r3, [r3, #0]
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d12:	801a      	strh	r2, [r3, #0]
 8002d14:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d18:	881b      	ldrh	r3, [r3, #0]
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d2a:	801a      	strh	r2, [r3, #0]
 8002d2c:	e017      	b.n	8002d5e <HAL_PCD_EP_DB_Transmit+0x54e>
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	785b      	ldrb	r3, [r3, #1]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d113      	bne.n	8002d5e <HAL_PCD_EP_DB_Transmit+0x54e>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	461a      	mov	r2, r3
 8002d42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d44:	4413      	add	r3, r2
 8002d46:	677b      	str	r3, [r7, #116]	@ 0x74
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	011a      	lsls	r2, r3, #4
 8002d4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d50:	4413      	add	r3, r2
 8002d52:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002d56:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d58:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	4619      	mov	r1, r3
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f005 ffe0 	bl	8008d2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002d6a:	88fb      	ldrh	r3, [r7, #6]
 8002d6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f040 811a 	bne.w	8002faa <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4413      	add	r3, r2
 8002d84:	881b      	ldrh	r3, [r3, #0]
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d90:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	461a      	mov	r2, r3
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	441a      	add	r2, r3
 8002da2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002da6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002daa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002dae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002db2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	8013      	strh	r3, [r2, #0]
 8002dba:	e0f6      	b.n	8002faa <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002dbc:	88fb      	ldrh	r3, [r7, #6]
 8002dbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d121      	bne.n	8002e0a <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4413      	add	r3, r2
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ddc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002de0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	461a      	mov	r2, r3
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	441a      	add	r2, r3
 8002df2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002df6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002dfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002dfe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	f040 80ca 	bne.w	8002faa <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	695a      	ldr	r2, [r3, #20]
 8002e1a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002e1e:	441a      	add	r2, r3
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	69da      	ldr	r2, [r3, #28]
 8002e28:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002e2c:	441a      	add	r2, r3
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	6a1a      	ldr	r2, [r3, #32]
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d30b      	bcc.n	8002e56 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	6a1a      	ldr	r2, [r3, #32]
 8002e4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e4e:	1ad2      	subs	r2, r2, r3
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	621a      	str	r2, [r3, #32]
 8002e54:	e017      	b.n	8002e86 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d108      	bne.n	8002e70 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002e5e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002e62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002e6e:	e00a      	b.n	8002e86 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	785b      	ldrb	r3, [r3, #1]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d165      	bne.n	8002f60 <HAL_PCD_EP_DB_Transmit+0x750>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ea8:	4413      	add	r3, r2
 8002eaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	011a      	lsls	r2, r3, #4
 8002eb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002eba:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002ebc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ebe:	881b      	ldrh	r3, [r3, #0]
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002eca:	801a      	strh	r2, [r3, #0]
 8002ecc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ed0:	2b3e      	cmp	r3, #62	@ 0x3e
 8002ed2:	d91d      	bls.n	8002f10 <HAL_PCD_EP_DB_Transmit+0x700>
 8002ed4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ed8:	095b      	lsrs	r3, r3, #5
 8002eda:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002edc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ee0:	f003 031f 	and.w	r3, r3, #31
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d102      	bne.n	8002eee <HAL_PCD_EP_DB_Transmit+0x6de>
 8002ee8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002eea:	3b01      	subs	r3, #1
 8002eec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002eee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ef0:	881b      	ldrh	r3, [r3, #0]
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	029b      	lsls	r3, r3, #10
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	4313      	orrs	r3, r2
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f0c:	801a      	strh	r2, [r3, #0]
 8002f0e:	e041      	b.n	8002f94 <HAL_PCD_EP_DB_Transmit+0x784>
 8002f10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10a      	bne.n	8002f2e <HAL_PCD_EP_DB_Transmit+0x71e>
 8002f18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f2a:	801a      	strh	r2, [r3, #0]
 8002f2c:	e032      	b.n	8002f94 <HAL_PCD_EP_DB_Transmit+0x784>
 8002f2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f32:	085b      	lsrs	r3, r3, #1
 8002f34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d002      	beq.n	8002f48 <HAL_PCD_EP_DB_Transmit+0x738>
 8002f42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f44:	3301      	adds	r3, #1
 8002f46:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f4a:	881b      	ldrh	r3, [r3, #0]
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	029b      	lsls	r3, r3, #10
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	4313      	orrs	r3, r2
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f5c:	801a      	strh	r2, [r3, #0]
 8002f5e:	e019      	b.n	8002f94 <HAL_PCD_EP_DB_Transmit+0x784>
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	785b      	ldrb	r3, [r3, #1]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d115      	bne.n	8002f94 <HAL_PCD_EP_DB_Transmit+0x784>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	461a      	mov	r2, r3
 8002f74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f76:	4413      	add	r3, r2
 8002f78:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	011a      	lsls	r2, r3, #4
 8002f80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f82:	4413      	add	r3, r2
 8002f84:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002f88:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f92:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6818      	ldr	r0, [r3, #0]
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	6959      	ldr	r1, [r3, #20]
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	895a      	ldrh	r2, [r3, #10]
 8002fa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	f004 f852 	bl	800704e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	4413      	add	r3, r2
 8002fb8:	881b      	ldrh	r3, [r3, #0]
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002fc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fc4:	82bb      	strh	r3, [r7, #20]
 8002fc6:	8abb      	ldrh	r3, [r7, #20]
 8002fc8:	f083 0310 	eor.w	r3, r3, #16
 8002fcc:	82bb      	strh	r3, [r7, #20]
 8002fce:	8abb      	ldrh	r3, [r7, #20]
 8002fd0:	f083 0320 	eor.w	r3, r3, #32
 8002fd4:	82bb      	strh	r3, [r7, #20]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	441a      	add	r2, r3
 8002fe4:	8abb      	ldrh	r3, [r7, #20]
 8002fe6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002fea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002fee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ff2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3790      	adds	r7, #144	@ 0x90
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003004:	b480      	push	{r7}
 8003006:	b087      	sub	sp, #28
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	607b      	str	r3, [r7, #4]
 800300e:	460b      	mov	r3, r1
 8003010:	817b      	strh	r3, [r7, #10]
 8003012:	4613      	mov	r3, r2
 8003014:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003016:	897b      	ldrh	r3, [r7, #10]
 8003018:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800301c:	b29b      	uxth	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00b      	beq.n	800303a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003022:	897b      	ldrh	r3, [r7, #10]
 8003024:	f003 0207 	and.w	r2, r3, #7
 8003028:	4613      	mov	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	3310      	adds	r3, #16
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	4413      	add	r3, r2
 8003036:	617b      	str	r3, [r7, #20]
 8003038:	e009      	b.n	800304e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800303a:	897a      	ldrh	r2, [r7, #10]
 800303c:	4613      	mov	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4413      	add	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	4413      	add	r3, r2
 800304c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800304e:	893b      	ldrh	r3, [r7, #8]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d107      	bne.n	8003064 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	2200      	movs	r2, #0
 8003058:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	b29a      	uxth	r2, r3
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	80da      	strh	r2, [r3, #6]
 8003062:	e00b      	b.n	800307c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	2201      	movs	r2, #1
 8003068:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	b29a      	uxth	r2, r3
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	0c1b      	lsrs	r3, r3, #16
 8003076:	b29a      	uxth	r2, r3
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	371c      	adds	r7, #28
 8003082:	46bd      	mov	sp, r7
 8003084:	bc80      	pop	{r7}
 8003086:	4770      	bx	lr

08003088 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e272      	b.n	8003580 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f000 8087 	beq.w	80031b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030a8:	4b92      	ldr	r3, [pc, #584]	@ (80032f4 <HAL_RCC_OscConfig+0x26c>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f003 030c 	and.w	r3, r3, #12
 80030b0:	2b04      	cmp	r3, #4
 80030b2:	d00c      	beq.n	80030ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030b4:	4b8f      	ldr	r3, [pc, #572]	@ (80032f4 <HAL_RCC_OscConfig+0x26c>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f003 030c 	and.w	r3, r3, #12
 80030bc:	2b08      	cmp	r3, #8
 80030be:	d112      	bne.n	80030e6 <HAL_RCC_OscConfig+0x5e>
 80030c0:	4b8c      	ldr	r3, [pc, #560]	@ (80032f4 <HAL_RCC_OscConfig+0x26c>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030cc:	d10b      	bne.n	80030e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ce:	4b89      	ldr	r3, [pc, #548]	@ (80032f4 <HAL_RCC_OscConfig+0x26c>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d06c      	beq.n	80031b4 <HAL_RCC_OscConfig+0x12c>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d168      	bne.n	80031b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e24c      	b.n	8003580 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030ee:	d106      	bne.n	80030fe <HAL_RCC_OscConfig+0x76>
 80030f0:	4b80      	ldr	r3, [pc, #512]	@ (80032f4 <HAL_RCC_OscConfig+0x26c>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a7f      	ldr	r2, [pc, #508]	@ (80032f4 <HAL_RCC_OscConfig+0x26c>)
 80030f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030fa:	6013      	str	r3, [r2, #0]
 80030fc:	e02e      	b.n	800315c <HAL_RCC_OscConfig+0xd4>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10c      	bne.n	8003120 <HAL_RCC_OscConfig+0x98>
 8003106:	4b7b      	ldr	r3, [pc, #492]	@ (80032f4 <HAL_RCC_OscConfig+0x26c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a7a      	ldr	r2, [pc, #488]	@ (80032f4 <HAL_RCC_OscConfig+0x26c>)
 800310c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003110:	6013      	str	r3, [r2, #0]
 8003112:	4b78      	ldr	r3, [pc, #480]	@ (80032f4 <HAL_RCC_OscConfig+0x26c>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a77      	ldr	r2, [pc, #476]	@ (80032f4 <HAL_RCC_OscConfig+0x26c>)
 8003118:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800311c:	6013      	str	r3, [r2, #0]
 800311e:	e01d      	b.n	800315c <HAL_RCC_OscConfig+0xd4>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003128:	d10c      	bne.n	8003144 <HAL_RCC_OscConfig+0xbc>
 800312a:	4b72      	ldr	r3, [pc, #456]	@ (80032f4 <HAL_RCC_OscConfig+0x26c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a71      	ldr	r2, [pc, #452]	@ (80032f4 <HAL_RCC_OscConfig+0x26c>)
 8003130:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	4b6f      	ldr	r3, [pc, #444]	@ (80032f4 <HAL_RCC_OscConfig+0x26c>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a6e      	ldr	r2, [pc, #440]	@ (80032f4 <HAL_RCC_OscConfig+0x26c>)
 800313c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003140:	6013      	str	r3, [r2, #0]
 8003142:	e00b      	b.n	800315c <HAL_RCC_OscConfig+0xd4>
 8003144:	4b6b      	ldr	r3, [pc, #428]	@ (80032f4 <HAL_RCC_OscConfig+0x26c>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a6a      	ldr	r2, [pc, #424]	@ (80032f4 <HAL_RCC_OscConfig+0x26c>)
 800314a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800314e:	6013      	str	r3, [r2, #0]
 8003150:	4b68      	ldr	r3, [pc, #416]	@ (80032f4 <HAL_RCC_OscConfig+0x26c>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a67      	ldr	r2, [pc, #412]	@ (80032f4 <HAL_RCC_OscConfig+0x26c>)
 8003156:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800315a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d013      	beq.n	800318c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003164:	f7fd fd44 	bl	8000bf0 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800316c:	f7fd fd40 	bl	8000bf0 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b64      	cmp	r3, #100	@ 0x64
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e200      	b.n	8003580 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800317e:	4b5d      	ldr	r3, [pc, #372]	@ (80032f4 <HAL_RCC_OscConfig+0x26c>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d0f0      	beq.n	800316c <HAL_RCC_OscConfig+0xe4>
 800318a:	e014      	b.n	80031b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800318c:	f7fd fd30 	bl	8000bf0 <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003194:	f7fd fd2c 	bl	8000bf0 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b64      	cmp	r3, #100	@ 0x64
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e1ec      	b.n	8003580 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031a6:	4b53      	ldr	r3, [pc, #332]	@ (80032f4 <HAL_RCC_OscConfig+0x26c>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1f0      	bne.n	8003194 <HAL_RCC_OscConfig+0x10c>
 80031b2:	e000      	b.n	80031b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d063      	beq.n	800328a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031c2:	4b4c      	ldr	r3, [pc, #304]	@ (80032f4 <HAL_RCC_OscConfig+0x26c>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f003 030c 	and.w	r3, r3, #12
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00b      	beq.n	80031e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80031ce:	4b49      	ldr	r3, [pc, #292]	@ (80032f4 <HAL_RCC_OscConfig+0x26c>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f003 030c 	and.w	r3, r3, #12
 80031d6:	2b08      	cmp	r3, #8
 80031d8:	d11c      	bne.n	8003214 <HAL_RCC_OscConfig+0x18c>
 80031da:	4b46      	ldr	r3, [pc, #280]	@ (80032f4 <HAL_RCC_OscConfig+0x26c>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d116      	bne.n	8003214 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031e6:	4b43      	ldr	r3, [pc, #268]	@ (80032f4 <HAL_RCC_OscConfig+0x26c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d005      	beq.n	80031fe <HAL_RCC_OscConfig+0x176>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d001      	beq.n	80031fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e1c0      	b.n	8003580 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031fe:	4b3d      	ldr	r3, [pc, #244]	@ (80032f4 <HAL_RCC_OscConfig+0x26c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	4939      	ldr	r1, [pc, #228]	@ (80032f4 <HAL_RCC_OscConfig+0x26c>)
 800320e:	4313      	orrs	r3, r2
 8003210:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003212:	e03a      	b.n	800328a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d020      	beq.n	800325e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800321c:	4b36      	ldr	r3, [pc, #216]	@ (80032f8 <HAL_RCC_OscConfig+0x270>)
 800321e:	2201      	movs	r2, #1
 8003220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003222:	f7fd fce5 	bl	8000bf0 <HAL_GetTick>
 8003226:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003228:	e008      	b.n	800323c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800322a:	f7fd fce1 	bl	8000bf0 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e1a1      	b.n	8003580 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800323c:	4b2d      	ldr	r3, [pc, #180]	@ (80032f4 <HAL_RCC_OscConfig+0x26c>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d0f0      	beq.n	800322a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003248:	4b2a      	ldr	r3, [pc, #168]	@ (80032f4 <HAL_RCC_OscConfig+0x26c>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	4927      	ldr	r1, [pc, #156]	@ (80032f4 <HAL_RCC_OscConfig+0x26c>)
 8003258:	4313      	orrs	r3, r2
 800325a:	600b      	str	r3, [r1, #0]
 800325c:	e015      	b.n	800328a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800325e:	4b26      	ldr	r3, [pc, #152]	@ (80032f8 <HAL_RCC_OscConfig+0x270>)
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003264:	f7fd fcc4 	bl	8000bf0 <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800326c:	f7fd fcc0 	bl	8000bf0 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e180      	b.n	8003580 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800327e:	4b1d      	ldr	r3, [pc, #116]	@ (80032f4 <HAL_RCC_OscConfig+0x26c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1f0      	bne.n	800326c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0308 	and.w	r3, r3, #8
 8003292:	2b00      	cmp	r3, #0
 8003294:	d03a      	beq.n	800330c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d019      	beq.n	80032d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800329e:	4b17      	ldr	r3, [pc, #92]	@ (80032fc <HAL_RCC_OscConfig+0x274>)
 80032a0:	2201      	movs	r2, #1
 80032a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032a4:	f7fd fca4 	bl	8000bf0 <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032ac:	f7fd fca0 	bl	8000bf0 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e160      	b.n	8003580 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032be:	4b0d      	ldr	r3, [pc, #52]	@ (80032f4 <HAL_RCC_OscConfig+0x26c>)
 80032c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0f0      	beq.n	80032ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80032ca:	2001      	movs	r0, #1
 80032cc:	f000 fad0 	bl	8003870 <RCC_Delay>
 80032d0:	e01c      	b.n	800330c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032d2:	4b0a      	ldr	r3, [pc, #40]	@ (80032fc <HAL_RCC_OscConfig+0x274>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032d8:	f7fd fc8a 	bl	8000bf0 <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032de:	e00f      	b.n	8003300 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032e0:	f7fd fc86 	bl	8000bf0 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d908      	bls.n	8003300 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e146      	b.n	8003580 <HAL_RCC_OscConfig+0x4f8>
 80032f2:	bf00      	nop
 80032f4:	40021000 	.word	0x40021000
 80032f8:	42420000 	.word	0x42420000
 80032fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003300:	4b92      	ldr	r3, [pc, #584]	@ (800354c <HAL_RCC_OscConfig+0x4c4>)
 8003302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1e9      	bne.n	80032e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0304 	and.w	r3, r3, #4
 8003314:	2b00      	cmp	r3, #0
 8003316:	f000 80a6 	beq.w	8003466 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800331a:	2300      	movs	r3, #0
 800331c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800331e:	4b8b      	ldr	r3, [pc, #556]	@ (800354c <HAL_RCC_OscConfig+0x4c4>)
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10d      	bne.n	8003346 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800332a:	4b88      	ldr	r3, [pc, #544]	@ (800354c <HAL_RCC_OscConfig+0x4c4>)
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	4a87      	ldr	r2, [pc, #540]	@ (800354c <HAL_RCC_OscConfig+0x4c4>)
 8003330:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003334:	61d3      	str	r3, [r2, #28]
 8003336:	4b85      	ldr	r3, [pc, #532]	@ (800354c <HAL_RCC_OscConfig+0x4c4>)
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800333e:	60bb      	str	r3, [r7, #8]
 8003340:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003342:	2301      	movs	r3, #1
 8003344:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003346:	4b82      	ldr	r3, [pc, #520]	@ (8003550 <HAL_RCC_OscConfig+0x4c8>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800334e:	2b00      	cmp	r3, #0
 8003350:	d118      	bne.n	8003384 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003352:	4b7f      	ldr	r3, [pc, #508]	@ (8003550 <HAL_RCC_OscConfig+0x4c8>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a7e      	ldr	r2, [pc, #504]	@ (8003550 <HAL_RCC_OscConfig+0x4c8>)
 8003358:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800335c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800335e:	f7fd fc47 	bl	8000bf0 <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003364:	e008      	b.n	8003378 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003366:	f7fd fc43 	bl	8000bf0 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b64      	cmp	r3, #100	@ 0x64
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e103      	b.n	8003580 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003378:	4b75      	ldr	r3, [pc, #468]	@ (8003550 <HAL_RCC_OscConfig+0x4c8>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0f0      	beq.n	8003366 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d106      	bne.n	800339a <HAL_RCC_OscConfig+0x312>
 800338c:	4b6f      	ldr	r3, [pc, #444]	@ (800354c <HAL_RCC_OscConfig+0x4c4>)
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	4a6e      	ldr	r2, [pc, #440]	@ (800354c <HAL_RCC_OscConfig+0x4c4>)
 8003392:	f043 0301 	orr.w	r3, r3, #1
 8003396:	6213      	str	r3, [r2, #32]
 8003398:	e02d      	b.n	80033f6 <HAL_RCC_OscConfig+0x36e>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10c      	bne.n	80033bc <HAL_RCC_OscConfig+0x334>
 80033a2:	4b6a      	ldr	r3, [pc, #424]	@ (800354c <HAL_RCC_OscConfig+0x4c4>)
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	4a69      	ldr	r2, [pc, #420]	@ (800354c <HAL_RCC_OscConfig+0x4c4>)
 80033a8:	f023 0301 	bic.w	r3, r3, #1
 80033ac:	6213      	str	r3, [r2, #32]
 80033ae:	4b67      	ldr	r3, [pc, #412]	@ (800354c <HAL_RCC_OscConfig+0x4c4>)
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	4a66      	ldr	r2, [pc, #408]	@ (800354c <HAL_RCC_OscConfig+0x4c4>)
 80033b4:	f023 0304 	bic.w	r3, r3, #4
 80033b8:	6213      	str	r3, [r2, #32]
 80033ba:	e01c      	b.n	80033f6 <HAL_RCC_OscConfig+0x36e>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	2b05      	cmp	r3, #5
 80033c2:	d10c      	bne.n	80033de <HAL_RCC_OscConfig+0x356>
 80033c4:	4b61      	ldr	r3, [pc, #388]	@ (800354c <HAL_RCC_OscConfig+0x4c4>)
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	4a60      	ldr	r2, [pc, #384]	@ (800354c <HAL_RCC_OscConfig+0x4c4>)
 80033ca:	f043 0304 	orr.w	r3, r3, #4
 80033ce:	6213      	str	r3, [r2, #32]
 80033d0:	4b5e      	ldr	r3, [pc, #376]	@ (800354c <HAL_RCC_OscConfig+0x4c4>)
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	4a5d      	ldr	r2, [pc, #372]	@ (800354c <HAL_RCC_OscConfig+0x4c4>)
 80033d6:	f043 0301 	orr.w	r3, r3, #1
 80033da:	6213      	str	r3, [r2, #32]
 80033dc:	e00b      	b.n	80033f6 <HAL_RCC_OscConfig+0x36e>
 80033de:	4b5b      	ldr	r3, [pc, #364]	@ (800354c <HAL_RCC_OscConfig+0x4c4>)
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	4a5a      	ldr	r2, [pc, #360]	@ (800354c <HAL_RCC_OscConfig+0x4c4>)
 80033e4:	f023 0301 	bic.w	r3, r3, #1
 80033e8:	6213      	str	r3, [r2, #32]
 80033ea:	4b58      	ldr	r3, [pc, #352]	@ (800354c <HAL_RCC_OscConfig+0x4c4>)
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	4a57      	ldr	r2, [pc, #348]	@ (800354c <HAL_RCC_OscConfig+0x4c4>)
 80033f0:	f023 0304 	bic.w	r3, r3, #4
 80033f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d015      	beq.n	800342a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033fe:	f7fd fbf7 	bl	8000bf0 <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003404:	e00a      	b.n	800341c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003406:	f7fd fbf3 	bl	8000bf0 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003414:	4293      	cmp	r3, r2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e0b1      	b.n	8003580 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800341c:	4b4b      	ldr	r3, [pc, #300]	@ (800354c <HAL_RCC_OscConfig+0x4c4>)
 800341e:	6a1b      	ldr	r3, [r3, #32]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0ee      	beq.n	8003406 <HAL_RCC_OscConfig+0x37e>
 8003428:	e014      	b.n	8003454 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800342a:	f7fd fbe1 	bl	8000bf0 <HAL_GetTick>
 800342e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003430:	e00a      	b.n	8003448 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003432:	f7fd fbdd 	bl	8000bf0 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003440:	4293      	cmp	r3, r2
 8003442:	d901      	bls.n	8003448 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e09b      	b.n	8003580 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003448:	4b40      	ldr	r3, [pc, #256]	@ (800354c <HAL_RCC_OscConfig+0x4c4>)
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1ee      	bne.n	8003432 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003454:	7dfb      	ldrb	r3, [r7, #23]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d105      	bne.n	8003466 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800345a:	4b3c      	ldr	r3, [pc, #240]	@ (800354c <HAL_RCC_OscConfig+0x4c4>)
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	4a3b      	ldr	r2, [pc, #236]	@ (800354c <HAL_RCC_OscConfig+0x4c4>)
 8003460:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003464:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 8087 	beq.w	800357e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003470:	4b36      	ldr	r3, [pc, #216]	@ (800354c <HAL_RCC_OscConfig+0x4c4>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f003 030c 	and.w	r3, r3, #12
 8003478:	2b08      	cmp	r3, #8
 800347a:	d061      	beq.n	8003540 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	2b02      	cmp	r3, #2
 8003482:	d146      	bne.n	8003512 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003484:	4b33      	ldr	r3, [pc, #204]	@ (8003554 <HAL_RCC_OscConfig+0x4cc>)
 8003486:	2200      	movs	r2, #0
 8003488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348a:	f7fd fbb1 	bl	8000bf0 <HAL_GetTick>
 800348e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003490:	e008      	b.n	80034a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003492:	f7fd fbad 	bl	8000bf0 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e06d      	b.n	8003580 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034a4:	4b29      	ldr	r3, [pc, #164]	@ (800354c <HAL_RCC_OscConfig+0x4c4>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1f0      	bne.n	8003492 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034b8:	d108      	bne.n	80034cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034ba:	4b24      	ldr	r3, [pc, #144]	@ (800354c <HAL_RCC_OscConfig+0x4c4>)
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	4921      	ldr	r1, [pc, #132]	@ (800354c <HAL_RCC_OscConfig+0x4c4>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034cc:	4b1f      	ldr	r3, [pc, #124]	@ (800354c <HAL_RCC_OscConfig+0x4c4>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a19      	ldr	r1, [r3, #32]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034dc:	430b      	orrs	r3, r1
 80034de:	491b      	ldr	r1, [pc, #108]	@ (800354c <HAL_RCC_OscConfig+0x4c4>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003554 <HAL_RCC_OscConfig+0x4cc>)
 80034e6:	2201      	movs	r2, #1
 80034e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ea:	f7fd fb81 	bl	8000bf0 <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f2:	f7fd fb7d 	bl	8000bf0 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e03d      	b.n	8003580 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003504:	4b11      	ldr	r3, [pc, #68]	@ (800354c <HAL_RCC_OscConfig+0x4c4>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0f0      	beq.n	80034f2 <HAL_RCC_OscConfig+0x46a>
 8003510:	e035      	b.n	800357e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003512:	4b10      	ldr	r3, [pc, #64]	@ (8003554 <HAL_RCC_OscConfig+0x4cc>)
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003518:	f7fd fb6a 	bl	8000bf0 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003520:	f7fd fb66 	bl	8000bf0 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e026      	b.n	8003580 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003532:	4b06      	ldr	r3, [pc, #24]	@ (800354c <HAL_RCC_OscConfig+0x4c4>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1f0      	bne.n	8003520 <HAL_RCC_OscConfig+0x498>
 800353e:	e01e      	b.n	800357e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	69db      	ldr	r3, [r3, #28]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d107      	bne.n	8003558 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e019      	b.n	8003580 <HAL_RCC_OscConfig+0x4f8>
 800354c:	40021000 	.word	0x40021000
 8003550:	40007000 	.word	0x40007000
 8003554:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003558:	4b0b      	ldr	r3, [pc, #44]	@ (8003588 <HAL_RCC_OscConfig+0x500>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	429a      	cmp	r2, r3
 800356a:	d106      	bne.n	800357a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003576:	429a      	cmp	r2, r3
 8003578:	d001      	beq.n	800357e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e000      	b.n	8003580 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3718      	adds	r7, #24
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40021000 	.word	0x40021000

0800358c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d101      	bne.n	80035a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e0d0      	b.n	8003742 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035a0:	4b6a      	ldr	r3, [pc, #424]	@ (800374c <HAL_RCC_ClockConfig+0x1c0>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0307 	and.w	r3, r3, #7
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d910      	bls.n	80035d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ae:	4b67      	ldr	r3, [pc, #412]	@ (800374c <HAL_RCC_ClockConfig+0x1c0>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f023 0207 	bic.w	r2, r3, #7
 80035b6:	4965      	ldr	r1, [pc, #404]	@ (800374c <HAL_RCC_ClockConfig+0x1c0>)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035be:	4b63      	ldr	r3, [pc, #396]	@ (800374c <HAL_RCC_ClockConfig+0x1c0>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0307 	and.w	r3, r3, #7
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d001      	beq.n	80035d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e0b8      	b.n	8003742 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d020      	beq.n	800361e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0304 	and.w	r3, r3, #4
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d005      	beq.n	80035f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035e8:	4b59      	ldr	r3, [pc, #356]	@ (8003750 <HAL_RCC_ClockConfig+0x1c4>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	4a58      	ldr	r2, [pc, #352]	@ (8003750 <HAL_RCC_ClockConfig+0x1c4>)
 80035ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80035f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0308 	and.w	r3, r3, #8
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d005      	beq.n	800360c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003600:	4b53      	ldr	r3, [pc, #332]	@ (8003750 <HAL_RCC_ClockConfig+0x1c4>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	4a52      	ldr	r2, [pc, #328]	@ (8003750 <HAL_RCC_ClockConfig+0x1c4>)
 8003606:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800360a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800360c:	4b50      	ldr	r3, [pc, #320]	@ (8003750 <HAL_RCC_ClockConfig+0x1c4>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	494d      	ldr	r1, [pc, #308]	@ (8003750 <HAL_RCC_ClockConfig+0x1c4>)
 800361a:	4313      	orrs	r3, r2
 800361c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	d040      	beq.n	80036ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d107      	bne.n	8003642 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003632:	4b47      	ldr	r3, [pc, #284]	@ (8003750 <HAL_RCC_ClockConfig+0x1c4>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d115      	bne.n	800366a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e07f      	b.n	8003742 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	2b02      	cmp	r3, #2
 8003648:	d107      	bne.n	800365a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800364a:	4b41      	ldr	r3, [pc, #260]	@ (8003750 <HAL_RCC_ClockConfig+0x1c4>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d109      	bne.n	800366a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e073      	b.n	8003742 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800365a:	4b3d      	ldr	r3, [pc, #244]	@ (8003750 <HAL_RCC_ClockConfig+0x1c4>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e06b      	b.n	8003742 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800366a:	4b39      	ldr	r3, [pc, #228]	@ (8003750 <HAL_RCC_ClockConfig+0x1c4>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f023 0203 	bic.w	r2, r3, #3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	4936      	ldr	r1, [pc, #216]	@ (8003750 <HAL_RCC_ClockConfig+0x1c4>)
 8003678:	4313      	orrs	r3, r2
 800367a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800367c:	f7fd fab8 	bl	8000bf0 <HAL_GetTick>
 8003680:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003682:	e00a      	b.n	800369a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003684:	f7fd fab4 	bl	8000bf0 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003692:	4293      	cmp	r3, r2
 8003694:	d901      	bls.n	800369a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e053      	b.n	8003742 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800369a:	4b2d      	ldr	r3, [pc, #180]	@ (8003750 <HAL_RCC_ClockConfig+0x1c4>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f003 020c 	and.w	r2, r3, #12
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d1eb      	bne.n	8003684 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036ac:	4b27      	ldr	r3, [pc, #156]	@ (800374c <HAL_RCC_ClockConfig+0x1c0>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d210      	bcs.n	80036dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ba:	4b24      	ldr	r3, [pc, #144]	@ (800374c <HAL_RCC_ClockConfig+0x1c0>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f023 0207 	bic.w	r2, r3, #7
 80036c2:	4922      	ldr	r1, [pc, #136]	@ (800374c <HAL_RCC_ClockConfig+0x1c0>)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ca:	4b20      	ldr	r3, [pc, #128]	@ (800374c <HAL_RCC_ClockConfig+0x1c0>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0307 	and.w	r3, r3, #7
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d001      	beq.n	80036dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e032      	b.n	8003742 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d008      	beq.n	80036fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036e8:	4b19      	ldr	r3, [pc, #100]	@ (8003750 <HAL_RCC_ClockConfig+0x1c4>)
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	4916      	ldr	r1, [pc, #88]	@ (8003750 <HAL_RCC_ClockConfig+0x1c4>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0308 	and.w	r3, r3, #8
 8003702:	2b00      	cmp	r3, #0
 8003704:	d009      	beq.n	800371a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003706:	4b12      	ldr	r3, [pc, #72]	@ (8003750 <HAL_RCC_ClockConfig+0x1c4>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	490e      	ldr	r1, [pc, #56]	@ (8003750 <HAL_RCC_ClockConfig+0x1c4>)
 8003716:	4313      	orrs	r3, r2
 8003718:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800371a:	f000 f821 	bl	8003760 <HAL_RCC_GetSysClockFreq>
 800371e:	4602      	mov	r2, r0
 8003720:	4b0b      	ldr	r3, [pc, #44]	@ (8003750 <HAL_RCC_ClockConfig+0x1c4>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	091b      	lsrs	r3, r3, #4
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	490a      	ldr	r1, [pc, #40]	@ (8003754 <HAL_RCC_ClockConfig+0x1c8>)
 800372c:	5ccb      	ldrb	r3, [r1, r3]
 800372e:	fa22 f303 	lsr.w	r3, r2, r3
 8003732:	4a09      	ldr	r2, [pc, #36]	@ (8003758 <HAL_RCC_ClockConfig+0x1cc>)
 8003734:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003736:	4b09      	ldr	r3, [pc, #36]	@ (800375c <HAL_RCC_ClockConfig+0x1d0>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4618      	mov	r0, r3
 800373c:	f7fd fa16 	bl	8000b6c <HAL_InitTick>

  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	40022000 	.word	0x40022000
 8003750:	40021000 	.word	0x40021000
 8003754:	0800a15c 	.word	0x0800a15c
 8003758:	20000000 	.word	0x20000000
 800375c:	20000004 	.word	0x20000004

08003760 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003760:	b480      	push	{r7}
 8003762:	b087      	sub	sp, #28
 8003764:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003766:	2300      	movs	r3, #0
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	2300      	movs	r3, #0
 800376c:	60bb      	str	r3, [r7, #8]
 800376e:	2300      	movs	r3, #0
 8003770:	617b      	str	r3, [r7, #20]
 8003772:	2300      	movs	r3, #0
 8003774:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003776:	2300      	movs	r3, #0
 8003778:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800377a:	4b1e      	ldr	r3, [pc, #120]	@ (80037f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f003 030c 	and.w	r3, r3, #12
 8003786:	2b04      	cmp	r3, #4
 8003788:	d002      	beq.n	8003790 <HAL_RCC_GetSysClockFreq+0x30>
 800378a:	2b08      	cmp	r3, #8
 800378c:	d003      	beq.n	8003796 <HAL_RCC_GetSysClockFreq+0x36>
 800378e:	e027      	b.n	80037e0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003790:	4b19      	ldr	r3, [pc, #100]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003792:	613b      	str	r3, [r7, #16]
      break;
 8003794:	e027      	b.n	80037e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	0c9b      	lsrs	r3, r3, #18
 800379a:	f003 030f 	and.w	r3, r3, #15
 800379e:	4a17      	ldr	r2, [pc, #92]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80037a0:	5cd3      	ldrb	r3, [r2, r3]
 80037a2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d010      	beq.n	80037d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037ae:	4b11      	ldr	r3, [pc, #68]	@ (80037f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	0c5b      	lsrs	r3, r3, #17
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	4a11      	ldr	r2, [pc, #68]	@ (8003800 <HAL_RCC_GetSysClockFreq+0xa0>)
 80037ba:	5cd3      	ldrb	r3, [r2, r3]
 80037bc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a0d      	ldr	r2, [pc, #52]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80037c2:	fb03 f202 	mul.w	r2, r3, r2
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037cc:	617b      	str	r3, [r7, #20]
 80037ce:	e004      	b.n	80037da <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a0c      	ldr	r2, [pc, #48]	@ (8003804 <HAL_RCC_GetSysClockFreq+0xa4>)
 80037d4:	fb02 f303 	mul.w	r3, r2, r3
 80037d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	613b      	str	r3, [r7, #16]
      break;
 80037de:	e002      	b.n	80037e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037e0:	4b09      	ldr	r3, [pc, #36]	@ (8003808 <HAL_RCC_GetSysClockFreq+0xa8>)
 80037e2:	613b      	str	r3, [r7, #16]
      break;
 80037e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037e6:	693b      	ldr	r3, [r7, #16]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	371c      	adds	r7, #28
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bc80      	pop	{r7}
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	40021000 	.word	0x40021000
 80037f8:	00f42400 	.word	0x00f42400
 80037fc:	0800a174 	.word	0x0800a174
 8003800:	0800a184 	.word	0x0800a184
 8003804:	003d0900 	.word	0x003d0900
 8003808:	007a1200 	.word	0x007a1200

0800380c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003810:	4b02      	ldr	r3, [pc, #8]	@ (800381c <HAL_RCC_GetHCLKFreq+0x10>)
 8003812:	681b      	ldr	r3, [r3, #0]
}
 8003814:	4618      	mov	r0, r3
 8003816:	46bd      	mov	sp, r7
 8003818:	bc80      	pop	{r7}
 800381a:	4770      	bx	lr
 800381c:	20000000 	.word	0x20000000

08003820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003824:	f7ff fff2 	bl	800380c <HAL_RCC_GetHCLKFreq>
 8003828:	4602      	mov	r2, r0
 800382a:	4b05      	ldr	r3, [pc, #20]	@ (8003840 <HAL_RCC_GetPCLK1Freq+0x20>)
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	0a1b      	lsrs	r3, r3, #8
 8003830:	f003 0307 	and.w	r3, r3, #7
 8003834:	4903      	ldr	r1, [pc, #12]	@ (8003844 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003836:	5ccb      	ldrb	r3, [r1, r3]
 8003838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800383c:	4618      	mov	r0, r3
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40021000 	.word	0x40021000
 8003844:	0800a16c 	.word	0x0800a16c

08003848 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800384c:	f7ff ffde 	bl	800380c <HAL_RCC_GetHCLKFreq>
 8003850:	4602      	mov	r2, r0
 8003852:	4b05      	ldr	r3, [pc, #20]	@ (8003868 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	0adb      	lsrs	r3, r3, #11
 8003858:	f003 0307 	and.w	r3, r3, #7
 800385c:	4903      	ldr	r1, [pc, #12]	@ (800386c <HAL_RCC_GetPCLK2Freq+0x24>)
 800385e:	5ccb      	ldrb	r3, [r1, r3]
 8003860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003864:	4618      	mov	r0, r3
 8003866:	bd80      	pop	{r7, pc}
 8003868:	40021000 	.word	0x40021000
 800386c:	0800a16c 	.word	0x0800a16c

08003870 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003878:	4b0a      	ldr	r3, [pc, #40]	@ (80038a4 <RCC_Delay+0x34>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a0a      	ldr	r2, [pc, #40]	@ (80038a8 <RCC_Delay+0x38>)
 800387e:	fba2 2303 	umull	r2, r3, r2, r3
 8003882:	0a5b      	lsrs	r3, r3, #9
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	fb02 f303 	mul.w	r3, r2, r3
 800388a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800388c:	bf00      	nop
  }
  while (Delay --);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	1e5a      	subs	r2, r3, #1
 8003892:	60fa      	str	r2, [r7, #12]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1f9      	bne.n	800388c <RCC_Delay+0x1c>
}
 8003898:	bf00      	nop
 800389a:	bf00      	nop
 800389c:	3714      	adds	r7, #20
 800389e:	46bd      	mov	sp, r7
 80038a0:	bc80      	pop	{r7}
 80038a2:	4770      	bx	lr
 80038a4:	20000000 	.word	0x20000000
 80038a8:	10624dd3 	.word	0x10624dd3

080038ac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	613b      	str	r3, [r7, #16]
 80038b8:	2300      	movs	r3, #0
 80038ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d07d      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80038c8:	2300      	movs	r3, #0
 80038ca:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038cc:	4b4f      	ldr	r3, [pc, #316]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ce:	69db      	ldr	r3, [r3, #28]
 80038d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10d      	bne.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038d8:	4b4c      	ldr	r3, [pc, #304]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	4a4b      	ldr	r2, [pc, #300]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038e2:	61d3      	str	r3, [r2, #28]
 80038e4:	4b49      	ldr	r3, [pc, #292]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038e6:	69db      	ldr	r3, [r3, #28]
 80038e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038ec:	60bb      	str	r3, [r7, #8]
 80038ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038f0:	2301      	movs	r3, #1
 80038f2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f4:	4b46      	ldr	r3, [pc, #280]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d118      	bne.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003900:	4b43      	ldr	r3, [pc, #268]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a42      	ldr	r2, [pc, #264]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003906:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800390a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800390c:	f7fd f970 	bl	8000bf0 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003912:	e008      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003914:	f7fd f96c 	bl	8000bf0 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b64      	cmp	r3, #100	@ 0x64
 8003920:	d901      	bls.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e06d      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003926:	4b3a      	ldr	r3, [pc, #232]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800392e:	2b00      	cmp	r3, #0
 8003930:	d0f0      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003932:	4b36      	ldr	r3, [pc, #216]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800393a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d02e      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	429a      	cmp	r2, r3
 800394e:	d027      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003950:	4b2e      	ldr	r3, [pc, #184]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003958:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800395a:	4b2e      	ldr	r3, [pc, #184]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800395c:	2201      	movs	r2, #1
 800395e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003960:	4b2c      	ldr	r3, [pc, #176]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003962:	2200      	movs	r2, #0
 8003964:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003966:	4a29      	ldr	r2, [pc, #164]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	d014      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003976:	f7fd f93b 	bl	8000bf0 <HAL_GetTick>
 800397a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800397c:	e00a      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800397e:	f7fd f937 	bl	8000bf0 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	f241 3288 	movw	r2, #5000	@ 0x1388
 800398c:	4293      	cmp	r3, r2
 800398e:	d901      	bls.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e036      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003994:	4b1d      	ldr	r3, [pc, #116]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0ee      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039a0:	4b1a      	ldr	r3, [pc, #104]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	4917      	ldr	r1, [pc, #92]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80039b2:	7dfb      	ldrb	r3, [r7, #23]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d105      	bne.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039b8:	4b14      	ldr	r3, [pc, #80]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ba:	69db      	ldr	r3, [r3, #28]
 80039bc:	4a13      	ldr	r2, [pc, #76]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d008      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039d0:	4b0e      	ldr	r3, [pc, #56]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	490b      	ldr	r1, [pc, #44]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0310 	and.w	r3, r3, #16
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d008      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039ee:	4b07      	ldr	r3, [pc, #28]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	4904      	ldr	r1, [pc, #16]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3718      	adds	r7, #24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	40007000 	.word	0x40007000
 8003a14:	42420440 	.word	0x42420440

08003a18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e076      	b.n	8003b18 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d108      	bne.n	8003a44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a3a:	d009      	beq.n	8003a50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	61da      	str	r2, [r3, #28]
 8003a42:	e005      	b.n	8003a50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d106      	bne.n	8003a70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7fc fe54 	bl	8000718 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2202      	movs	r2, #2
 8003a74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a86:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	431a      	orrs	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003aca:	431a      	orrs	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ad4:	ea42 0103 	orr.w	r1, r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003adc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	0c1a      	lsrs	r2, r3, #16
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f002 0204 	and.w	r2, r2, #4
 8003af6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	69da      	ldr	r2, [r3, #28]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b06:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3708      	adds	r7, #8
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b08a      	sub	sp, #40	@ 0x28
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
 8003b2c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b32:	f7fd f85d 	bl	8000bf0 <HAL_GetTick>
 8003b36:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b3e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003b46:	887b      	ldrh	r3, [r7, #2]
 8003b48:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003b4a:	7ffb      	ldrb	r3, [r7, #31]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d00c      	beq.n	8003b6a <HAL_SPI_TransmitReceive+0x4a>
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b56:	d106      	bne.n	8003b66 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d102      	bne.n	8003b66 <HAL_SPI_TransmitReceive+0x46>
 8003b60:	7ffb      	ldrb	r3, [r7, #31]
 8003b62:	2b04      	cmp	r3, #4
 8003b64:	d001      	beq.n	8003b6a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003b66:	2302      	movs	r3, #2
 8003b68:	e17f      	b.n	8003e6a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d005      	beq.n	8003b7c <HAL_SPI_TransmitReceive+0x5c>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d002      	beq.n	8003b7c <HAL_SPI_TransmitReceive+0x5c>
 8003b76:	887b      	ldrh	r3, [r7, #2]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e174      	b.n	8003e6a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d101      	bne.n	8003b8e <HAL_SPI_TransmitReceive+0x6e>
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	e16d      	b.n	8003e6a <HAL_SPI_TransmitReceive+0x34a>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b04      	cmp	r3, #4
 8003ba0:	d003      	beq.n	8003baa <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2205      	movs	r2, #5
 8003ba6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	887a      	ldrh	r2, [r7, #2]
 8003bba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	887a      	ldrh	r2, [r7, #2]
 8003bc0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	68ba      	ldr	r2, [r7, #8]
 8003bc6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	887a      	ldrh	r2, [r7, #2]
 8003bcc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	887a      	ldrh	r2, [r7, #2]
 8003bd2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bea:	2b40      	cmp	r3, #64	@ 0x40
 8003bec:	d007      	beq.n	8003bfe <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003bfc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c06:	d17e      	bne.n	8003d06 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d002      	beq.n	8003c16 <HAL_SPI_TransmitReceive+0xf6>
 8003c10:	8afb      	ldrh	r3, [r7, #22]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d16c      	bne.n	8003cf0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c1a:	881a      	ldrh	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c26:	1c9a      	adds	r2, r3, #2
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	3b01      	subs	r3, #1
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c3a:	e059      	b.n	8003cf0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d11b      	bne.n	8003c82 <HAL_SPI_TransmitReceive+0x162>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d016      	beq.n	8003c82 <HAL_SPI_TransmitReceive+0x162>
 8003c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d113      	bne.n	8003c82 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c5e:	881a      	ldrh	r2, [r3, #0]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c6a:	1c9a      	adds	r2, r3, #2
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	3b01      	subs	r3, #1
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d119      	bne.n	8003cc4 <HAL_SPI_TransmitReceive+0x1a4>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d014      	beq.n	8003cc4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68da      	ldr	r2, [r3, #12]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca4:	b292      	uxth	r2, r2
 8003ca6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cac:	1c9a      	adds	r2, r3, #2
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003cc4:	f7fc ff94 	bl	8000bf0 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	6a3b      	ldr	r3, [r7, #32]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d80d      	bhi.n	8003cf0 <HAL_SPI_TransmitReceive+0x1d0>
 8003cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003cda:	d009      	beq.n	8003cf0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e0bc      	b.n	8003e6a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1a0      	bne.n	8003c3c <HAL_SPI_TransmitReceive+0x11c>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d19b      	bne.n	8003c3c <HAL_SPI_TransmitReceive+0x11c>
 8003d04:	e082      	b.n	8003e0c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d002      	beq.n	8003d14 <HAL_SPI_TransmitReceive+0x1f4>
 8003d0e:	8afb      	ldrh	r3, [r7, #22]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d171      	bne.n	8003df8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	330c      	adds	r3, #12
 8003d1e:	7812      	ldrb	r2, [r2, #0]
 8003d20:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d26:	1c5a      	adds	r2, r3, #1
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	3b01      	subs	r3, #1
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d3a:	e05d      	b.n	8003df8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d11c      	bne.n	8003d84 <HAL_SPI_TransmitReceive+0x264>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d017      	beq.n	8003d84 <HAL_SPI_TransmitReceive+0x264>
 8003d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d114      	bne.n	8003d84 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	330c      	adds	r3, #12
 8003d64:	7812      	ldrb	r2, [r2, #0]
 8003d66:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d6c:	1c5a      	adds	r2, r3, #1
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d80:	2300      	movs	r3, #0
 8003d82:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d119      	bne.n	8003dc6 <HAL_SPI_TransmitReceive+0x2a6>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d014      	beq.n	8003dc6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68da      	ldr	r2, [r3, #12]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dae:	1c5a      	adds	r2, r3, #1
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003dc6:	f7fc ff13 	bl	8000bf0 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	6a3b      	ldr	r3, [r7, #32]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d803      	bhi.n	8003dde <HAL_SPI_TransmitReceive+0x2be>
 8003dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dd8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ddc:	d102      	bne.n	8003de4 <HAL_SPI_TransmitReceive+0x2c4>
 8003dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d109      	bne.n	8003df8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e038      	b.n	8003e6a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d19c      	bne.n	8003d3c <HAL_SPI_TransmitReceive+0x21c>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d197      	bne.n	8003d3c <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e0c:	6a3a      	ldr	r2, [r7, #32]
 8003e0e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f000 f8b7 	bl	8003f84 <SPI_EndRxTxTransaction>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d008      	beq.n	8003e2e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2220      	movs	r2, #32
 8003e20:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e01d      	b.n	8003e6a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10a      	bne.n	8003e4c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e36:	2300      	movs	r3, #0
 8003e38:	613b      	str	r3, [r7, #16]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	613b      	str	r3, [r7, #16]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	613b      	str	r3, [r7, #16]
 8003e4a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e000      	b.n	8003e6a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003e68:	2300      	movs	r3, #0
  }
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3728      	adds	r7, #40	@ 0x28
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
	...

08003e74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b088      	sub	sp, #32
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	603b      	str	r3, [r7, #0]
 8003e80:	4613      	mov	r3, r2
 8003e82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e84:	f7fc feb4 	bl	8000bf0 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e8c:	1a9b      	subs	r3, r3, r2
 8003e8e:	683a      	ldr	r2, [r7, #0]
 8003e90:	4413      	add	r3, r2
 8003e92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e94:	f7fc feac 	bl	8000bf0 <HAL_GetTick>
 8003e98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e9a:	4b39      	ldr	r3, [pc, #228]	@ (8003f80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	015b      	lsls	r3, r3, #5
 8003ea0:	0d1b      	lsrs	r3, r3, #20
 8003ea2:	69fa      	ldr	r2, [r7, #28]
 8003ea4:	fb02 f303 	mul.w	r3, r2, r3
 8003ea8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003eaa:	e054      	b.n	8003f56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003eb2:	d050      	beq.n	8003f56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003eb4:	f7fc fe9c 	bl	8000bf0 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	69fa      	ldr	r2, [r7, #28]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d902      	bls.n	8003eca <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d13d      	bne.n	8003f46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003ed8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ee2:	d111      	bne.n	8003f08 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003eec:	d004      	beq.n	8003ef8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ef6:	d107      	bne.n	8003f08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f10:	d10f      	bne.n	8003f32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e017      	b.n	8003f76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d101      	bne.n	8003f50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	3b01      	subs	r3, #1
 8003f54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	689a      	ldr	r2, [r3, #8]
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	4013      	ands	r3, r2
 8003f60:	68ba      	ldr	r2, [r7, #8]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	bf0c      	ite	eq
 8003f66:	2301      	moveq	r3, #1
 8003f68:	2300      	movne	r3, #0
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	79fb      	ldrb	r3, [r7, #7]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d19b      	bne.n	8003eac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3720      	adds	r7, #32
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	20000000 	.word	0x20000000

08003f84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af02      	add	r7, sp, #8
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	2201      	movs	r2, #1
 8003f98:	2102      	movs	r1, #2
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f7ff ff6a 	bl	8003e74 <SPI_WaitFlagStateUntilTimeout>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d007      	beq.n	8003fb6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003faa:	f043 0220 	orr.w	r2, r3, #32
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e013      	b.n	8003fde <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	9300      	str	r3, [sp, #0]
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	2180      	movs	r1, #128	@ 0x80
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f7ff ff57 	bl	8003e74 <SPI_WaitFlagStateUntilTimeout>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d007      	beq.n	8003fdc <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fd0:	f043 0220 	orr.w	r2, r3, #32
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e000      	b.n	8003fde <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b082      	sub	sp, #8
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d101      	bne.n	8003ff8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e042      	b.n	800407e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b00      	cmp	r3, #0
 8004002:	d106      	bne.n	8004012 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f7fc fbcd 	bl	80007ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2224      	movs	r2, #36	@ 0x24
 8004016:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68da      	ldr	r2, [r3, #12]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004028:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 fc80 	bl	8004930 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	691a      	ldr	r2, [r3, #16]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800403e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	695a      	ldr	r2, [r3, #20]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800404e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68da      	ldr	r2, [r3, #12]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800405e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2220      	movs	r2, #32
 800406a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2220      	movs	r2, #32
 8004072:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3708      	adds	r7, #8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
	...

08004088 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b0ba      	sub	sp, #232	@ 0xe8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80040ae:	2300      	movs	r3, #0
 80040b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80040b4:	2300      	movs	r3, #0
 80040b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80040ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040be:	f003 030f 	and.w	r3, r3, #15
 80040c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80040c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10f      	bne.n	80040ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040d2:	f003 0320 	and.w	r3, r3, #32
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d009      	beq.n	80040ee <HAL_UART_IRQHandler+0x66>
 80040da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040de:	f003 0320 	and.w	r3, r3, #32
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d003      	beq.n	80040ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 fb63 	bl	80047b2 <UART_Receive_IT>
      return;
 80040ec:	e25b      	b.n	80045a6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80040ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f000 80de 	beq.w	80042b4 <HAL_UART_IRQHandler+0x22c>
 80040f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b00      	cmp	r3, #0
 8004102:	d106      	bne.n	8004112 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004108:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800410c:	2b00      	cmp	r3, #0
 800410e:	f000 80d1 	beq.w	80042b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00b      	beq.n	8004136 <HAL_UART_IRQHandler+0xae>
 800411e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004126:	2b00      	cmp	r3, #0
 8004128:	d005      	beq.n	8004136 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800412e:	f043 0201 	orr.w	r2, r3, #1
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800413a:	f003 0304 	and.w	r3, r3, #4
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00b      	beq.n	800415a <HAL_UART_IRQHandler+0xd2>
 8004142:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b00      	cmp	r3, #0
 800414c:	d005      	beq.n	800415a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004152:	f043 0202 	orr.w	r2, r3, #2
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800415a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00b      	beq.n	800417e <HAL_UART_IRQHandler+0xf6>
 8004166:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	d005      	beq.n	800417e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004176:	f043 0204 	orr.w	r2, r3, #4
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800417e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004182:	f003 0308 	and.w	r3, r3, #8
 8004186:	2b00      	cmp	r3, #0
 8004188:	d011      	beq.n	80041ae <HAL_UART_IRQHandler+0x126>
 800418a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800418e:	f003 0320 	and.w	r3, r3, #32
 8004192:	2b00      	cmp	r3, #0
 8004194:	d105      	bne.n	80041a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004196:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d005      	beq.n	80041ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041a6:	f043 0208 	orr.w	r2, r3, #8
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f000 81f2 	beq.w	800459c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041bc:	f003 0320 	and.w	r3, r3, #32
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d008      	beq.n	80041d6 <HAL_UART_IRQHandler+0x14e>
 80041c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041c8:	f003 0320 	and.w	r3, r3, #32
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d002      	beq.n	80041d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 faee 	bl	80047b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	bf14      	ite	ne
 80041e4:	2301      	movne	r3, #1
 80041e6:	2300      	moveq	r3, #0
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041f2:	f003 0308 	and.w	r3, r3, #8
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d103      	bne.n	8004202 <HAL_UART_IRQHandler+0x17a>
 80041fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d04f      	beq.n	80042a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f9f8 	bl	80045f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004212:	2b00      	cmp	r3, #0
 8004214:	d041      	beq.n	800429a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	3314      	adds	r3, #20
 800421c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004220:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004224:	e853 3f00 	ldrex	r3, [r3]
 8004228:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800422c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004230:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004234:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	3314      	adds	r3, #20
 800423e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004242:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004246:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800424e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004252:	e841 2300 	strex	r3, r2, [r1]
 8004256:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800425a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1d9      	bne.n	8004216 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004266:	2b00      	cmp	r3, #0
 8004268:	d013      	beq.n	8004292 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800426e:	4a7e      	ldr	r2, [pc, #504]	@ (8004468 <HAL_UART_IRQHandler+0x3e0>)
 8004270:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004276:	4618      	mov	r0, r3
 8004278:	f7fc fe8c 	bl	8000f94 <HAL_DMA_Abort_IT>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d016      	beq.n	80042b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004286:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800428c:	4610      	mov	r0, r2
 800428e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004290:	e00e      	b.n	80042b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f99c 	bl	80045d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004298:	e00a      	b.n	80042b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f998 	bl	80045d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042a0:	e006      	b.n	80042b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f994 	bl	80045d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80042ae:	e175      	b.n	800459c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042b0:	bf00      	nop
    return;
 80042b2:	e173      	b.n	800459c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	f040 814f 	bne.w	800455c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80042be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042c2:	f003 0310 	and.w	r3, r3, #16
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f000 8148 	beq.w	800455c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80042cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042d0:	f003 0310 	and.w	r3, r3, #16
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f000 8141 	beq.w	800455c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042da:	2300      	movs	r3, #0
 80042dc:	60bb      	str	r3, [r7, #8]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	60bb      	str	r3, [r7, #8]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	60bb      	str	r3, [r7, #8]
 80042ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f000 80b6 	beq.w	800446c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800430c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 8145 	beq.w	80045a0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800431a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800431e:	429a      	cmp	r2, r3
 8004320:	f080 813e 	bcs.w	80045a0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800432a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	2b20      	cmp	r3, #32
 8004334:	f000 8088 	beq.w	8004448 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	330c      	adds	r3, #12
 800433e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004342:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004346:	e853 3f00 	ldrex	r3, [r3]
 800434a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800434e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004352:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004356:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	330c      	adds	r3, #12
 8004360:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004364:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004368:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004370:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004374:	e841 2300 	strex	r3, r2, [r1]
 8004378:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800437c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1d9      	bne.n	8004338 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	3314      	adds	r3, #20
 800438a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800438e:	e853 3f00 	ldrex	r3, [r3]
 8004392:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004394:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004396:	f023 0301 	bic.w	r3, r3, #1
 800439a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	3314      	adds	r3, #20
 80043a4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80043a8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80043ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ae:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80043b0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80043b4:	e841 2300 	strex	r3, r2, [r1]
 80043b8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80043ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1e1      	bne.n	8004384 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	3314      	adds	r3, #20
 80043c6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043ca:	e853 3f00 	ldrex	r3, [r3]
 80043ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80043d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	3314      	adds	r3, #20
 80043e0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80043e4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80043e6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80043ea:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80043ec:	e841 2300 	strex	r3, r2, [r1]
 80043f0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80043f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1e3      	bne.n	80043c0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2220      	movs	r2, #32
 80043fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	330c      	adds	r3, #12
 800440c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004410:	e853 3f00 	ldrex	r3, [r3]
 8004414:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004416:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004418:	f023 0310 	bic.w	r3, r3, #16
 800441c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	330c      	adds	r3, #12
 8004426:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800442a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800442c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004430:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004432:	e841 2300 	strex	r3, r2, [r1]
 8004436:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004438:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1e3      	bne.n	8004406 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004442:	4618      	mov	r0, r3
 8004444:	f7fc fd6a 	bl	8000f1c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2202      	movs	r2, #2
 800444c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004456:	b29b      	uxth	r3, r3
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	b29b      	uxth	r3, r3
 800445c:	4619      	mov	r1, r3
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f8bf 	bl	80045e2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004464:	e09c      	b.n	80045a0 <HAL_UART_IRQHandler+0x518>
 8004466:	bf00      	nop
 8004468:	080046bd 	.word	0x080046bd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004474:	b29b      	uxth	r3, r3
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004480:	b29b      	uxth	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	f000 808e 	beq.w	80045a4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004488:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 8089 	beq.w	80045a4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	330c      	adds	r3, #12
 8004498:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800449c:	e853 3f00 	ldrex	r3, [r3]
 80044a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80044a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	330c      	adds	r3, #12
 80044b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80044b6:	647a      	str	r2, [r7, #68]	@ 0x44
 80044b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80044bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044be:	e841 2300 	strex	r3, r2, [r1]
 80044c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80044c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1e3      	bne.n	8004492 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	3314      	adds	r3, #20
 80044d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d4:	e853 3f00 	ldrex	r3, [r3]
 80044d8:	623b      	str	r3, [r7, #32]
   return(result);
 80044da:	6a3b      	ldr	r3, [r7, #32]
 80044dc:	f023 0301 	bic.w	r3, r3, #1
 80044e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	3314      	adds	r3, #20
 80044ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80044ee:	633a      	str	r2, [r7, #48]	@ 0x30
 80044f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044f6:	e841 2300 	strex	r3, r2, [r1]
 80044fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80044fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1e3      	bne.n	80044ca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2220      	movs	r2, #32
 8004506:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	330c      	adds	r3, #12
 8004516:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	e853 3f00 	ldrex	r3, [r3]
 800451e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f023 0310 	bic.w	r3, r3, #16
 8004526:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	330c      	adds	r3, #12
 8004530:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004534:	61fa      	str	r2, [r7, #28]
 8004536:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004538:	69b9      	ldr	r1, [r7, #24]
 800453a:	69fa      	ldr	r2, [r7, #28]
 800453c:	e841 2300 	strex	r3, r2, [r1]
 8004540:	617b      	str	r3, [r7, #20]
   return(result);
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1e3      	bne.n	8004510 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2202      	movs	r2, #2
 800454c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800454e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004552:	4619      	mov	r1, r3
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 f844 	bl	80045e2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800455a:	e023      	b.n	80045a4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800455c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004560:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004564:	2b00      	cmp	r3, #0
 8004566:	d009      	beq.n	800457c <HAL_UART_IRQHandler+0x4f4>
 8004568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800456c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004570:	2b00      	cmp	r3, #0
 8004572:	d003      	beq.n	800457c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f8b5 	bl	80046e4 <UART_Transmit_IT>
    return;
 800457a:	e014      	b.n	80045a6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800457c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00e      	beq.n	80045a6 <HAL_UART_IRQHandler+0x51e>
 8004588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800458c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004590:	2b00      	cmp	r3, #0
 8004592:	d008      	beq.n	80045a6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 f8f4 	bl	8004782 <UART_EndTransmit_IT>
    return;
 800459a:	e004      	b.n	80045a6 <HAL_UART_IRQHandler+0x51e>
    return;
 800459c:	bf00      	nop
 800459e:	e002      	b.n	80045a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80045a0:	bf00      	nop
 80045a2:	e000      	b.n	80045a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80045a4:	bf00      	nop
  }
}
 80045a6:	37e8      	adds	r7, #232	@ 0xe8
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bc80      	pop	{r7}
 80045bc:	4770      	bx	lr

080045be <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80045be:	b480      	push	{r7}
 80045c0:	b083      	sub	sp, #12
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80045c6:	bf00      	nop
 80045c8:	370c      	adds	r7, #12
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bc80      	pop	{r7}
 80045ce:	4770      	bx	lr

080045d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	bc80      	pop	{r7}
 80045e0:	4770      	bx	lr

080045e2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80045e2:	b480      	push	{r7}
 80045e4:	b083      	sub	sp, #12
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
 80045ea:	460b      	mov	r3, r1
 80045ec:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80045ee:	bf00      	nop
 80045f0:	370c      	adds	r7, #12
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bc80      	pop	{r7}
 80045f6:	4770      	bx	lr

080045f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b095      	sub	sp, #84	@ 0x54
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	330c      	adds	r3, #12
 8004606:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800460a:	e853 3f00 	ldrex	r3, [r3]
 800460e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004612:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004616:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	330c      	adds	r3, #12
 800461e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004620:	643a      	str	r2, [r7, #64]	@ 0x40
 8004622:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004624:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004626:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004628:	e841 2300 	strex	r3, r2, [r1]
 800462c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800462e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1e5      	bne.n	8004600 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	3314      	adds	r3, #20
 800463a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463c:	6a3b      	ldr	r3, [r7, #32]
 800463e:	e853 3f00 	ldrex	r3, [r3]
 8004642:	61fb      	str	r3, [r7, #28]
   return(result);
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	f023 0301 	bic.w	r3, r3, #1
 800464a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	3314      	adds	r3, #20
 8004652:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004654:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004656:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004658:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800465a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800465c:	e841 2300 	strex	r3, r2, [r1]
 8004660:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1e5      	bne.n	8004634 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800466c:	2b01      	cmp	r3, #1
 800466e:	d119      	bne.n	80046a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	330c      	adds	r3, #12
 8004676:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	e853 3f00 	ldrex	r3, [r3]
 800467e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	f023 0310 	bic.w	r3, r3, #16
 8004686:	647b      	str	r3, [r7, #68]	@ 0x44
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	330c      	adds	r3, #12
 800468e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004690:	61ba      	str	r2, [r7, #24]
 8004692:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004694:	6979      	ldr	r1, [r7, #20]
 8004696:	69ba      	ldr	r2, [r7, #24]
 8004698:	e841 2300 	strex	r3, r2, [r1]
 800469c:	613b      	str	r3, [r7, #16]
   return(result);
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1e5      	bne.n	8004670 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2220      	movs	r2, #32
 80046a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80046b2:	bf00      	nop
 80046b4:	3754      	adds	r7, #84	@ 0x54
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bc80      	pop	{r7}
 80046ba:	4770      	bx	lr

080046bc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f7ff ff7a 	bl	80045d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046dc:	bf00      	nop
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b21      	cmp	r3, #33	@ 0x21
 80046f6:	d13e      	bne.n	8004776 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004700:	d114      	bne.n	800472c <UART_Transmit_IT+0x48>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d110      	bne.n	800472c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	881b      	ldrh	r3, [r3, #0]
 8004714:	461a      	mov	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800471e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a1b      	ldr	r3, [r3, #32]
 8004724:	1c9a      	adds	r2, r3, #2
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	621a      	str	r2, [r3, #32]
 800472a:	e008      	b.n	800473e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a1b      	ldr	r3, [r3, #32]
 8004730:	1c59      	adds	r1, r3, #1
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	6211      	str	r1, [r2, #32]
 8004736:	781a      	ldrb	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004742:	b29b      	uxth	r3, r3
 8004744:	3b01      	subs	r3, #1
 8004746:	b29b      	uxth	r3, r3
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	4619      	mov	r1, r3
 800474c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10f      	bne.n	8004772 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68da      	ldr	r2, [r3, #12]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004760:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68da      	ldr	r2, [r3, #12]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004770:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004772:	2300      	movs	r3, #0
 8004774:	e000      	b.n	8004778 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004776:	2302      	movs	r3, #2
  }
}
 8004778:	4618      	mov	r0, r3
 800477a:	3714      	adds	r7, #20
 800477c:	46bd      	mov	sp, r7
 800477e:	bc80      	pop	{r7}
 8004780:	4770      	bx	lr

08004782 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b082      	sub	sp, #8
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68da      	ldr	r2, [r3, #12]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004798:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2220      	movs	r2, #32
 800479e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f7ff ff02 	bl	80045ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3708      	adds	r7, #8
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b08c      	sub	sp, #48	@ 0x30
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b22      	cmp	r3, #34	@ 0x22
 80047c4:	f040 80ae 	bne.w	8004924 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047d0:	d117      	bne.n	8004802 <UART_Receive_IT+0x50>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d113      	bne.n	8004802 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80047da:	2300      	movs	r3, #0
 80047dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047fa:	1c9a      	adds	r2, r3, #2
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	629a      	str	r2, [r3, #40]	@ 0x28
 8004800:	e026      	b.n	8004850 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004806:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004808:	2300      	movs	r3, #0
 800480a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004814:	d007      	beq.n	8004826 <UART_Receive_IT+0x74>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d10a      	bne.n	8004834 <UART_Receive_IT+0x82>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d106      	bne.n	8004834 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	b2da      	uxtb	r2, r3
 800482e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004830:	701a      	strb	r2, [r3, #0]
 8004832:	e008      	b.n	8004846 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	b2db      	uxtb	r3, r3
 800483c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004840:	b2da      	uxtb	r2, r3
 8004842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004844:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800484a:	1c5a      	adds	r2, r3, #1
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004854:	b29b      	uxth	r3, r3
 8004856:	3b01      	subs	r3, #1
 8004858:	b29b      	uxth	r3, r3
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	4619      	mov	r1, r3
 800485e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004860:	2b00      	cmp	r3, #0
 8004862:	d15d      	bne.n	8004920 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68da      	ldr	r2, [r3, #12]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f022 0220 	bic.w	r2, r2, #32
 8004872:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68da      	ldr	r2, [r3, #12]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004882:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	695a      	ldr	r2, [r3, #20]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f022 0201 	bic.w	r2, r2, #1
 8004892:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2220      	movs	r2, #32
 8004898:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d135      	bne.n	8004916 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	330c      	adds	r3, #12
 80048b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	e853 3f00 	ldrex	r3, [r3]
 80048be:	613b      	str	r3, [r7, #16]
   return(result);
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	f023 0310 	bic.w	r3, r3, #16
 80048c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	330c      	adds	r3, #12
 80048ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048d0:	623a      	str	r2, [r7, #32]
 80048d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d4:	69f9      	ldr	r1, [r7, #28]
 80048d6:	6a3a      	ldr	r2, [r7, #32]
 80048d8:	e841 2300 	strex	r3, r2, [r1]
 80048dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1e5      	bne.n	80048b0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0310 	and.w	r3, r3, #16
 80048ee:	2b10      	cmp	r3, #16
 80048f0:	d10a      	bne.n	8004908 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048f2:	2300      	movs	r3, #0
 80048f4:	60fb      	str	r3, [r7, #12]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	60fb      	str	r3, [r7, #12]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	60fb      	str	r3, [r7, #12]
 8004906:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800490c:	4619      	mov	r1, r3
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7ff fe67 	bl	80045e2 <HAL_UARTEx_RxEventCallback>
 8004914:	e002      	b.n	800491c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7ff fe51 	bl	80045be <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800491c:	2300      	movs	r3, #0
 800491e:	e002      	b.n	8004926 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004920:	2300      	movs	r3, #0
 8004922:	e000      	b.n	8004926 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004924:	2302      	movs	r3, #2
  }
}
 8004926:	4618      	mov	r0, r3
 8004928:	3730      	adds	r7, #48	@ 0x30
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
	...

08004930 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	68da      	ldr	r2, [r3, #12]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	689a      	ldr	r2, [r3, #8]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	431a      	orrs	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	4313      	orrs	r3, r2
 800495e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800496a:	f023 030c 	bic.w	r3, r3, #12
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	6812      	ldr	r2, [r2, #0]
 8004972:	68b9      	ldr	r1, [r7, #8]
 8004974:	430b      	orrs	r3, r1
 8004976:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	699a      	ldr	r2, [r3, #24]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a2c      	ldr	r2, [pc, #176]	@ (8004a44 <UART_SetConfig+0x114>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d103      	bne.n	80049a0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004998:	f7fe ff56 	bl	8003848 <HAL_RCC_GetPCLK2Freq>
 800499c:	60f8      	str	r0, [r7, #12]
 800499e:	e002      	b.n	80049a6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80049a0:	f7fe ff3e 	bl	8003820 <HAL_RCC_GetPCLK1Freq>
 80049a4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	4613      	mov	r3, r2
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4413      	add	r3, r2
 80049ae:	009a      	lsls	r2, r3, #2
 80049b0:	441a      	add	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049bc:	4a22      	ldr	r2, [pc, #136]	@ (8004a48 <UART_SetConfig+0x118>)
 80049be:	fba2 2303 	umull	r2, r3, r2, r3
 80049c2:	095b      	lsrs	r3, r3, #5
 80049c4:	0119      	lsls	r1, r3, #4
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	4613      	mov	r3, r2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4413      	add	r3, r2
 80049ce:	009a      	lsls	r2, r3, #2
 80049d0:	441a      	add	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80049dc:	4b1a      	ldr	r3, [pc, #104]	@ (8004a48 <UART_SetConfig+0x118>)
 80049de:	fba3 0302 	umull	r0, r3, r3, r2
 80049e2:	095b      	lsrs	r3, r3, #5
 80049e4:	2064      	movs	r0, #100	@ 0x64
 80049e6:	fb00 f303 	mul.w	r3, r0, r3
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	011b      	lsls	r3, r3, #4
 80049ee:	3332      	adds	r3, #50	@ 0x32
 80049f0:	4a15      	ldr	r2, [pc, #84]	@ (8004a48 <UART_SetConfig+0x118>)
 80049f2:	fba2 2303 	umull	r2, r3, r2, r3
 80049f6:	095b      	lsrs	r3, r3, #5
 80049f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049fc:	4419      	add	r1, r3
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	4613      	mov	r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	4413      	add	r3, r2
 8004a06:	009a      	lsls	r2, r3, #2
 8004a08:	441a      	add	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a14:	4b0c      	ldr	r3, [pc, #48]	@ (8004a48 <UART_SetConfig+0x118>)
 8004a16:	fba3 0302 	umull	r0, r3, r3, r2
 8004a1a:	095b      	lsrs	r3, r3, #5
 8004a1c:	2064      	movs	r0, #100	@ 0x64
 8004a1e:	fb00 f303 	mul.w	r3, r0, r3
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	011b      	lsls	r3, r3, #4
 8004a26:	3332      	adds	r3, #50	@ 0x32
 8004a28:	4a07      	ldr	r2, [pc, #28]	@ (8004a48 <UART_SetConfig+0x118>)
 8004a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a2e:	095b      	lsrs	r3, r3, #5
 8004a30:	f003 020f 	and.w	r2, r3, #15
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	440a      	add	r2, r1
 8004a3a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004a3c:	bf00      	nop
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	40013800 	.word	0x40013800
 8004a48:	51eb851f 	.word	0x51eb851f

08004a4c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	4638      	mov	r0, r7
 8004a56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3714      	adds	r7, #20
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bc80      	pop	{r7}
 8004a64:	4770      	bx	lr

08004a66 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004a66:	b480      	push	{r7}
 8004a68:	b085      	sub	sp, #20
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004a76:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004a7a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3714      	adds	r7, #20
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bc80      	pop	{r7}
 8004a90:	4770      	bx	lr

08004a92 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004a92:	b480      	push	{r7}
 8004a94:	b085      	sub	sp, #20
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004a9a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004a9e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	43db      	mvns	r3, r3
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3714      	adds	r7, #20
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bc80      	pop	{r7}
 8004ac4:	4770      	bx	lr

08004ac6 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b083      	sub	sp, #12
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
 8004ace:	460b      	mov	r3, r1
 8004ad0:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bc80      	pop	{r7}
 8004adc:	4770      	bx	lr

08004ade <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b085      	sub	sp, #20
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	60f8      	str	r0, [r7, #12]
 8004ae6:	4638      	mov	r0, r7
 8004ae8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3714      	adds	r7, #20
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bc80      	pop	{r7}
 8004b16:	4770      	bx	lr

08004b18 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b09d      	sub	sp, #116	@ 0x74
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004b22:	2300      	movs	r3, #0
 8004b24:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4413      	add	r3, r2
 8004b32:	881b      	ldrh	r3, [r3, #0]
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8004b3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b3e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	78db      	ldrb	r3, [r3, #3]
 8004b46:	2b03      	cmp	r3, #3
 8004b48:	d81f      	bhi.n	8004b8a <USB_ActivateEndpoint+0x72>
 8004b4a:	a201      	add	r2, pc, #4	@ (adr r2, 8004b50 <USB_ActivateEndpoint+0x38>)
 8004b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b50:	08004b61 	.word	0x08004b61
 8004b54:	08004b7d 	.word	0x08004b7d
 8004b58:	08004b93 	.word	0x08004b93
 8004b5c:	08004b6f 	.word	0x08004b6f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004b60:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004b64:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004b68:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004b6c:	e012      	b.n	8004b94 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004b6e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004b72:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8004b76:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004b7a:	e00b      	b.n	8004b94 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004b7c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004b80:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004b84:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004b88:	e004      	b.n	8004b94 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8004b90:	e000      	b.n	8004b94 <USB_ActivateEndpoint+0x7c>
      break;
 8004b92:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	441a      	add	r2, r3
 8004b9e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004ba2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ba6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004baa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4413      	add	r3, r2
 8004bc0:	881b      	ldrh	r3, [r3, #0]
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	683a      	ldr	r2, [r7, #0]
 8004bd0:	7812      	ldrb	r2, [r2, #0]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	441a      	add	r2, r3
 8004be2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004be6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	7b1b      	ldrb	r3, [r3, #12]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	f040 8178 	bne.w	8004ef4 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	785b      	ldrb	r3, [r3, #1]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 8084 	beq.w	8004d16 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	61bb      	str	r3, [r7, #24]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	4413      	add	r3, r2
 8004c20:	61bb      	str	r3, [r7, #24]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	011a      	lsls	r2, r3, #4
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004c30:	617b      	str	r3, [r7, #20]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	88db      	ldrh	r3, [r3, #6]
 8004c36:	085b      	lsrs	r3, r3, #1
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	4413      	add	r3, r2
 8004c4c:	881b      	ldrh	r3, [r3, #0]
 8004c4e:	827b      	strh	r3, [r7, #18]
 8004c50:	8a7b      	ldrh	r3, [r7, #18]
 8004c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d01b      	beq.n	8004c92 <USB_ActivateEndpoint+0x17a>
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4413      	add	r3, r2
 8004c64:	881b      	ldrh	r3, [r3, #0]
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c70:	823b      	strh	r3, [r7, #16]
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	441a      	add	r2, r3
 8004c7c:	8a3b      	ldrh	r3, [r7, #16]
 8004c7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c8a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	78db      	ldrb	r3, [r3, #3]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d020      	beq.n	8004cdc <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	4413      	add	r3, r2
 8004ca4:	881b      	ldrh	r3, [r3, #0]
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cb0:	81bb      	strh	r3, [r7, #12]
 8004cb2:	89bb      	ldrh	r3, [r7, #12]
 8004cb4:	f083 0320 	eor.w	r3, r3, #32
 8004cb8:	81bb      	strh	r3, [r7, #12]
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	441a      	add	r2, r3
 8004cc4:	89bb      	ldrh	r3, [r7, #12]
 8004cc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	8013      	strh	r3, [r2, #0]
 8004cda:	e2d5      	b.n	8005288 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4413      	add	r3, r2
 8004ce6:	881b      	ldrh	r3, [r3, #0]
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cf2:	81fb      	strh	r3, [r7, #14]
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	441a      	add	r2, r3
 8004cfe:	89fb      	ldrh	r3, [r7, #14]
 8004d00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	8013      	strh	r3, [r2, #0]
 8004d14:	e2b8      	b.n	8005288 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	461a      	mov	r2, r3
 8004d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d26:	4413      	add	r3, r2
 8004d28:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	011a      	lsls	r2, r3, #4
 8004d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d32:	4413      	add	r3, r2
 8004d34:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	88db      	ldrh	r3, [r3, #6]
 8004d3e:	085b      	lsrs	r3, r3, #1
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	005b      	lsls	r3, r3, #1
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d48:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	461a      	mov	r2, r3
 8004d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d5a:	4413      	add	r3, r2
 8004d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	011a      	lsls	r2, r3, #4
 8004d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d66:	4413      	add	r3, r2
 8004d68:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004d6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d70:	881b      	ldrh	r3, [r3, #0]
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7c:	801a      	strh	r2, [r3, #0]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	2b3e      	cmp	r3, #62	@ 0x3e
 8004d84:	d91d      	bls.n	8004dc2 <USB_ActivateEndpoint+0x2aa>
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	095b      	lsrs	r3, r3, #5
 8004d8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	f003 031f 	and.w	r3, r3, #31
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d102      	bne.n	8004da0 <USB_ActivateEndpoint+0x288>
 8004d9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da2:	881b      	ldrh	r3, [r3, #0]
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	029b      	lsls	r3, r3, #10
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	4313      	orrs	r3, r2
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004db6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dbe:	801a      	strh	r2, [r3, #0]
 8004dc0:	e026      	b.n	8004e10 <USB_ActivateEndpoint+0x2f8>
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10a      	bne.n	8004de0 <USB_ActivateEndpoint+0x2c8>
 8004dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dcc:	881b      	ldrh	r3, [r3, #0]
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ddc:	801a      	strh	r2, [r3, #0]
 8004dde:	e017      	b.n	8004e10 <USB_ActivateEndpoint+0x2f8>
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	085b      	lsrs	r3, r3, #1
 8004de6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	f003 0301 	and.w	r3, r3, #1
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d002      	beq.n	8004dfa <USB_ActivateEndpoint+0x2e2>
 8004df4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004df6:	3301      	adds	r3, #1
 8004df8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfc:	881b      	ldrh	r3, [r3, #0]
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	029b      	lsls	r3, r3, #10
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	4413      	add	r3, r2
 8004e1a:	881b      	ldrh	r3, [r3, #0]
 8004e1c:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004e1e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004e20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d01b      	beq.n	8004e60 <USB_ActivateEndpoint+0x348>
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4413      	add	r3, r2
 8004e32:	881b      	ldrh	r3, [r3, #0]
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e3e:	843b      	strh	r3, [r7, #32]
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	441a      	add	r2, r3
 8004e4a:	8c3b      	ldrh	r3, [r7, #32]
 8004e4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e54:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d124      	bne.n	8004eb2 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4413      	add	r3, r2
 8004e72:	881b      	ldrh	r3, [r3, #0]
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e7e:	83bb      	strh	r3, [r7, #28]
 8004e80:	8bbb      	ldrh	r3, [r7, #28]
 8004e82:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004e86:	83bb      	strh	r3, [r7, #28]
 8004e88:	8bbb      	ldrh	r3, [r7, #28]
 8004e8a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004e8e:	83bb      	strh	r3, [r7, #28]
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	441a      	add	r2, r3
 8004e9a:	8bbb      	ldrh	r3, [r7, #28]
 8004e9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ea0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ea4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ea8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	8013      	strh	r3, [r2, #0]
 8004eb0:	e1ea      	b.n	8005288 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	4413      	add	r3, r2
 8004ebc:	881b      	ldrh	r3, [r3, #0]
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ec4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ec8:	83fb      	strh	r3, [r7, #30]
 8004eca:	8bfb      	ldrh	r3, [r7, #30]
 8004ecc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004ed0:	83fb      	strh	r3, [r7, #30]
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	441a      	add	r2, r3
 8004edc:	8bfb      	ldrh	r3, [r7, #30]
 8004ede:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ee2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ee6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004eea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	8013      	strh	r3, [r2, #0]
 8004ef2:	e1c9      	b.n	8005288 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	78db      	ldrb	r3, [r3, #3]
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d11e      	bne.n	8004f3a <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4413      	add	r3, r2
 8004f06:	881b      	ldrh	r3, [r3, #0]
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f12:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	441a      	add	r2, r3
 8004f20:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004f24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f2c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004f30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	8013      	strh	r3, [r2, #0]
 8004f38:	e01d      	b.n	8004f76 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	4413      	add	r3, r2
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004f4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f50:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	441a      	add	r2, r3
 8004f5e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004f62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	461a      	mov	r2, r3
 8004f84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f86:	4413      	add	r3, r2
 8004f88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	011a      	lsls	r2, r3, #4
 8004f90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004f98:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	891b      	ldrh	r3, [r3, #8]
 8004f9e:	085b      	lsrs	r3, r3, #1
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	005b      	lsls	r3, r3, #1
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004fa8:	801a      	strh	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	657b      	str	r3, [r7, #84]	@ 0x54
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fba:	4413      	add	r3, r2
 8004fbc:	657b      	str	r3, [r7, #84]	@ 0x54
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	011a      	lsls	r2, r3, #4
 8004fc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004fcc:	653b      	str	r3, [r7, #80]	@ 0x50
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	895b      	ldrh	r3, [r3, #10]
 8004fd2:	085b      	lsrs	r3, r3, #1
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	005b      	lsls	r3, r3, #1
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fdc:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	785b      	ldrb	r3, [r3, #1]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	f040 8093 	bne.w	800510e <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	4413      	add	r3, r2
 8004ff2:	881b      	ldrh	r3, [r3, #0]
 8004ff4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8004ff8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004ffc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d01b      	beq.n	800503c <USB_ActivateEndpoint+0x524>
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	4413      	add	r3, r2
 800500e:	881b      	ldrh	r3, [r3, #0]
 8005010:	b29b      	uxth	r3, r3
 8005012:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005016:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800501a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	441a      	add	r2, r3
 8005026:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005028:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800502c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005030:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005034:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005038:	b29b      	uxth	r3, r3
 800503a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4413      	add	r3, r2
 8005046:	881b      	ldrh	r3, [r3, #0]
 8005048:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800504a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800504c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005050:	2b00      	cmp	r3, #0
 8005052:	d01b      	beq.n	800508c <USB_ActivateEndpoint+0x574>
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4413      	add	r3, r2
 800505e:	881b      	ldrh	r3, [r3, #0]
 8005060:	b29b      	uxth	r3, r3
 8005062:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005066:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800506a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	441a      	add	r2, r3
 8005076:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005078:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800507c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005080:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005084:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005088:	b29b      	uxth	r3, r3
 800508a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	881b      	ldrh	r3, [r3, #0]
 8005098:	b29b      	uxth	r3, r3
 800509a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800509e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050a2:	873b      	strh	r3, [r7, #56]	@ 0x38
 80050a4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80050a6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80050aa:	873b      	strh	r3, [r7, #56]	@ 0x38
 80050ac:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80050ae:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80050b2:	873b      	strh	r3, [r7, #56]	@ 0x38
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	441a      	add	r2, r3
 80050be:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80050c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4413      	add	r3, r2
 80050de:	881b      	ldrh	r3, [r3, #0]
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050ea:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	441a      	add	r2, r3
 80050f6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80050f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005100:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005104:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005108:	b29b      	uxth	r3, r3
 800510a:	8013      	strh	r3, [r2, #0]
 800510c:	e0bc      	b.n	8005288 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4413      	add	r3, r2
 8005118:	881b      	ldrh	r3, [r3, #0]
 800511a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800511e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005122:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d01d      	beq.n	8005166 <USB_ActivateEndpoint+0x64e>
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4413      	add	r3, r2
 8005134:	881b      	ldrh	r3, [r3, #0]
 8005136:	b29b      	uxth	r3, r3
 8005138:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800513c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005140:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	441a      	add	r2, r3
 800514e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005152:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005156:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800515a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800515e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005162:	b29b      	uxth	r3, r3
 8005164:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	4413      	add	r3, r2
 8005170:	881b      	ldrh	r3, [r3, #0]
 8005172:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8005176:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800517a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800517e:	2b00      	cmp	r3, #0
 8005180:	d01d      	beq.n	80051be <USB_ActivateEndpoint+0x6a6>
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	4413      	add	r3, r2
 800518c:	881b      	ldrh	r3, [r3, #0]
 800518e:	b29b      	uxth	r3, r3
 8005190:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005194:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005198:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	441a      	add	r2, r3
 80051a6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80051aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051b6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	78db      	ldrb	r3, [r3, #3]
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d024      	beq.n	8005210 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4413      	add	r3, r2
 80051d0:	881b      	ldrh	r3, [r3, #0]
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051dc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80051e0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80051e4:	f083 0320 	eor.w	r3, r3, #32
 80051e8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	441a      	add	r2, r3
 80051f6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80051fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005202:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005206:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800520a:	b29b      	uxth	r3, r3
 800520c:	8013      	strh	r3, [r2, #0]
 800520e:	e01d      	b.n	800524c <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	4413      	add	r3, r2
 800521a:	881b      	ldrh	r3, [r3, #0]
 800521c:	b29b      	uxth	r3, r3
 800521e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005222:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005226:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	441a      	add	r2, r3
 8005234:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005238:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800523c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005240:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005244:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005248:	b29b      	uxth	r3, r3
 800524a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	4413      	add	r3, r2
 8005256:	881b      	ldrh	r3, [r3, #0]
 8005258:	b29b      	uxth	r3, r3
 800525a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800525e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005262:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	441a      	add	r2, r3
 8005270:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005274:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005278:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800527c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005280:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005284:	b29b      	uxth	r3, r3
 8005286:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005288:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800528c:	4618      	mov	r0, r3
 800528e:	3774      	adds	r7, #116	@ 0x74
 8005290:	46bd      	mov	sp, r7
 8005292:	bc80      	pop	{r7}
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop

08005298 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005298:	b480      	push	{r7}
 800529a:	b08d      	sub	sp, #52	@ 0x34
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	7b1b      	ldrb	r3, [r3, #12]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f040 808e 	bne.w	80053c8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	785b      	ldrb	r3, [r3, #1]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d044      	beq.n	800533e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	4413      	add	r3, r2
 80052be:	881b      	ldrh	r3, [r3, #0]
 80052c0:	81bb      	strh	r3, [r7, #12]
 80052c2:	89bb      	ldrh	r3, [r7, #12]
 80052c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d01b      	beq.n	8005304 <USB_DeactivateEndpoint+0x6c>
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4413      	add	r3, r2
 80052d6:	881b      	ldrh	r3, [r3, #0]
 80052d8:	b29b      	uxth	r3, r3
 80052da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052e2:	817b      	strh	r3, [r7, #10]
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	441a      	add	r2, r3
 80052ee:	897b      	ldrh	r3, [r7, #10]
 80052f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052fc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005300:	b29b      	uxth	r3, r3
 8005302:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	4413      	add	r3, r2
 800530e:	881b      	ldrh	r3, [r3, #0]
 8005310:	b29b      	uxth	r3, r3
 8005312:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005316:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800531a:	813b      	strh	r3, [r7, #8]
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	441a      	add	r2, r3
 8005326:	893b      	ldrh	r3, [r7, #8]
 8005328:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800532c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005330:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005334:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005338:	b29b      	uxth	r3, r3
 800533a:	8013      	strh	r3, [r2, #0]
 800533c:	e192      	b.n	8005664 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	4413      	add	r3, r2
 8005348:	881b      	ldrh	r3, [r3, #0]
 800534a:	827b      	strh	r3, [r7, #18]
 800534c:	8a7b      	ldrh	r3, [r7, #18]
 800534e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d01b      	beq.n	800538e <USB_DeactivateEndpoint+0xf6>
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	4413      	add	r3, r2
 8005360:	881b      	ldrh	r3, [r3, #0]
 8005362:	b29b      	uxth	r3, r3
 8005364:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005368:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800536c:	823b      	strh	r3, [r7, #16]
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	441a      	add	r2, r3
 8005378:	8a3b      	ldrh	r3, [r7, #16]
 800537a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800537e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005382:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005386:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800538a:	b29b      	uxth	r3, r3
 800538c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	4413      	add	r3, r2
 8005398:	881b      	ldrh	r3, [r3, #0]
 800539a:	b29b      	uxth	r3, r3
 800539c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053a4:	81fb      	strh	r3, [r7, #14]
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	441a      	add	r2, r3
 80053b0:	89fb      	ldrh	r3, [r7, #14]
 80053b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	8013      	strh	r3, [r2, #0]
 80053c6:	e14d      	b.n	8005664 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	785b      	ldrb	r3, [r3, #1]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f040 80a5 	bne.w	800551c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	4413      	add	r3, r2
 80053dc:	881b      	ldrh	r3, [r3, #0]
 80053de:	843b      	strh	r3, [r7, #32]
 80053e0:	8c3b      	ldrh	r3, [r7, #32]
 80053e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d01b      	beq.n	8005422 <USB_DeactivateEndpoint+0x18a>
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	4413      	add	r3, r2
 80053f4:	881b      	ldrh	r3, [r3, #0]
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005400:	83fb      	strh	r3, [r7, #30]
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	441a      	add	r2, r3
 800540c:	8bfb      	ldrh	r3, [r7, #30]
 800540e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005412:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005416:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800541a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800541e:	b29b      	uxth	r3, r3
 8005420:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4413      	add	r3, r2
 800542c:	881b      	ldrh	r3, [r3, #0]
 800542e:	83bb      	strh	r3, [r7, #28]
 8005430:	8bbb      	ldrh	r3, [r7, #28]
 8005432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005436:	2b00      	cmp	r3, #0
 8005438:	d01b      	beq.n	8005472 <USB_DeactivateEndpoint+0x1da>
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	4413      	add	r3, r2
 8005444:	881b      	ldrh	r3, [r3, #0]
 8005446:	b29b      	uxth	r3, r3
 8005448:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800544c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005450:	837b      	strh	r3, [r7, #26]
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	441a      	add	r2, r3
 800545c:	8b7b      	ldrh	r3, [r7, #26]
 800545e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005462:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005466:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800546a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800546e:	b29b      	uxth	r3, r3
 8005470:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	4413      	add	r3, r2
 800547c:	881b      	ldrh	r3, [r3, #0]
 800547e:	b29b      	uxth	r3, r3
 8005480:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005484:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005488:	833b      	strh	r3, [r7, #24]
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	441a      	add	r2, r3
 8005494:	8b3b      	ldrh	r3, [r7, #24]
 8005496:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800549a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800549e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054a2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4413      	add	r3, r2
 80054b4:	881b      	ldrh	r3, [r3, #0]
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054c0:	82fb      	strh	r3, [r7, #22]
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	441a      	add	r2, r3
 80054cc:	8afb      	ldrh	r3, [r7, #22]
 80054ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054de:	b29b      	uxth	r3, r3
 80054e0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4413      	add	r3, r2
 80054ec:	881b      	ldrh	r3, [r3, #0]
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054f8:	82bb      	strh	r3, [r7, #20]
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	441a      	add	r2, r3
 8005504:	8abb      	ldrh	r3, [r7, #20]
 8005506:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800550a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800550e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005512:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005516:	b29b      	uxth	r3, r3
 8005518:	8013      	strh	r3, [r2, #0]
 800551a:	e0a3      	b.n	8005664 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	4413      	add	r3, r2
 8005526:	881b      	ldrh	r3, [r3, #0]
 8005528:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800552a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800552c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d01b      	beq.n	800556c <USB_DeactivateEndpoint+0x2d4>
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4413      	add	r3, r2
 800553e:	881b      	ldrh	r3, [r3, #0]
 8005540:	b29b      	uxth	r3, r3
 8005542:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005546:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800554a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	441a      	add	r2, r3
 8005556:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005558:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800555c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005560:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005564:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005568:	b29b      	uxth	r3, r3
 800556a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4413      	add	r3, r2
 8005576:	881b      	ldrh	r3, [r3, #0]
 8005578:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800557a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800557c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005580:	2b00      	cmp	r3, #0
 8005582:	d01b      	beq.n	80055bc <USB_DeactivateEndpoint+0x324>
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4413      	add	r3, r2
 800558e:	881b      	ldrh	r3, [r3, #0]
 8005590:	b29b      	uxth	r3, r3
 8005592:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005596:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800559a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	441a      	add	r2, r3
 80055a6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80055a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055b4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	4413      	add	r3, r2
 80055c6:	881b      	ldrh	r3, [r3, #0]
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055d2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	441a      	add	r2, r3
 80055de:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80055e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80055ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	881b      	ldrh	r3, [r3, #0]
 8005600:	b29b      	uxth	r3, r3
 8005602:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005606:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800560a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	441a      	add	r2, r3
 8005616:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005618:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800561c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005620:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005624:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005628:	b29b      	uxth	r3, r3
 800562a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4413      	add	r3, r2
 8005636:	881b      	ldrh	r3, [r3, #0]
 8005638:	b29b      	uxth	r3, r3
 800563a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800563e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005642:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	441a      	add	r2, r3
 800564e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005650:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005654:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005658:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800565c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005660:	b29b      	uxth	r3, r3
 8005662:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3734      	adds	r7, #52	@ 0x34
 800566a:	46bd      	mov	sp, r7
 800566c:	bc80      	pop	{r7}
 800566e:	4770      	bx	lr

08005670 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b0c2      	sub	sp, #264	@ 0x108
 8005674:	af00      	add	r7, sp, #0
 8005676:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800567a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800567e:	6018      	str	r0, [r3, #0]
 8005680:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005684:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005688:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800568a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800568e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	785b      	ldrb	r3, [r3, #1]
 8005696:	2b01      	cmp	r3, #1
 8005698:	f040 86b7 	bne.w	800640a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800569c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	699a      	ldr	r2, [r3, #24]
 80056a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d908      	bls.n	80056ca <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80056b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80056c8:	e007      	b.n	80056da <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80056ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80056da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	7b1b      	ldrb	r3, [r3, #12]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d13a      	bne.n	8005760 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80056ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6959      	ldr	r1, [r3, #20]
 80056f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	88da      	ldrh	r2, [r3, #6]
 8005702:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005706:	b29b      	uxth	r3, r3
 8005708:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800570c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005710:	6800      	ldr	r0, [r0, #0]
 8005712:	f001 fc9c 	bl	800704e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005716:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800571a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	613b      	str	r3, [r7, #16]
 8005722:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005726:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005730:	b29b      	uxth	r3, r3
 8005732:	461a      	mov	r2, r3
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	4413      	add	r3, r2
 8005738:	613b      	str	r3, [r7, #16]
 800573a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800573e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	011a      	lsls	r2, r3, #4
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	4413      	add	r3, r2
 800574c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005750:	60fb      	str	r3, [r7, #12]
 8005752:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005756:	b29a      	uxth	r2, r3
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	801a      	strh	r2, [r3, #0]
 800575c:	f000 be1f 	b.w	800639e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005760:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005764:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	78db      	ldrb	r3, [r3, #3]
 800576c:	2b02      	cmp	r3, #2
 800576e:	f040 8462 	bne.w	8006036 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005772:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005776:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6a1a      	ldr	r2, [r3, #32]
 800577e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005782:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	429a      	cmp	r2, r3
 800578c:	f240 83df 	bls.w	8005f4e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005790:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005794:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800579e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4413      	add	r3, r2
 80057aa:	881b      	ldrh	r3, [r3, #0]
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057b6:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80057ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	441a      	add	r2, r3
 80057d4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80057d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057e0:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80057e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80057ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	6a1a      	ldr	r2, [r3, #32]
 80057f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057fc:	1ad2      	subs	r2, r2, r3
 80057fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005802:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800580a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800580e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005818:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	4413      	add	r3, r2
 8005824:	881b      	ldrh	r3, [r3, #0]
 8005826:	b29b      	uxth	r3, r3
 8005828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800582c:	2b00      	cmp	r3, #0
 800582e:	f000 81c7 	beq.w	8005bc0 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005832:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005836:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	633b      	str	r3, [r7, #48]	@ 0x30
 800583e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005842:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	785b      	ldrb	r3, [r3, #1]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d177      	bne.n	800593e <USB_EPStartXfer+0x2ce>
 800584e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005852:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	62bb      	str	r3, [r7, #40]	@ 0x28
 800585a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800585e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005868:	b29b      	uxth	r3, r3
 800586a:	461a      	mov	r2, r3
 800586c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800586e:	4413      	add	r3, r2
 8005870:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005872:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005876:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	011a      	lsls	r2, r3, #4
 8005880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005882:	4413      	add	r3, r2
 8005884:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005888:	627b      	str	r3, [r7, #36]	@ 0x24
 800588a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800588c:	881b      	ldrh	r3, [r3, #0]
 800588e:	b29b      	uxth	r3, r3
 8005890:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005894:	b29a      	uxth	r2, r3
 8005896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005898:	801a      	strh	r2, [r3, #0]
 800589a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800589e:	2b3e      	cmp	r3, #62	@ 0x3e
 80058a0:	d921      	bls.n	80058e6 <USB_EPStartXfer+0x276>
 80058a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058a6:	095b      	lsrs	r3, r3, #5
 80058a8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80058ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058b0:	f003 031f 	and.w	r3, r3, #31
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d104      	bne.n	80058c2 <USB_EPStartXfer+0x252>
 80058b8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80058bc:	3b01      	subs	r3, #1
 80058be:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80058c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c4:	881b      	ldrh	r3, [r3, #0]
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	029b      	lsls	r3, r3, #10
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	4313      	orrs	r3, r2
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058de:	b29a      	uxth	r2, r3
 80058e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e2:	801a      	strh	r2, [r3, #0]
 80058e4:	e050      	b.n	8005988 <USB_EPStartXfer+0x318>
 80058e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10a      	bne.n	8005904 <USB_EPStartXfer+0x294>
 80058ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f0:	881b      	ldrh	r3, [r3, #0]
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005900:	801a      	strh	r2, [r3, #0]
 8005902:	e041      	b.n	8005988 <USB_EPStartXfer+0x318>
 8005904:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005908:	085b      	lsrs	r3, r3, #1
 800590a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800590e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	2b00      	cmp	r3, #0
 8005918:	d004      	beq.n	8005924 <USB_EPStartXfer+0x2b4>
 800591a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800591e:	3301      	adds	r3, #1
 8005920:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005926:	881b      	ldrh	r3, [r3, #0]
 8005928:	b29a      	uxth	r2, r3
 800592a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800592e:	b29b      	uxth	r3, r3
 8005930:	029b      	lsls	r3, r3, #10
 8005932:	b29b      	uxth	r3, r3
 8005934:	4313      	orrs	r3, r2
 8005936:	b29a      	uxth	r2, r3
 8005938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593a:	801a      	strh	r2, [r3, #0]
 800593c:	e024      	b.n	8005988 <USB_EPStartXfer+0x318>
 800593e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005942:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	785b      	ldrb	r3, [r3, #1]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d11c      	bne.n	8005988 <USB_EPStartXfer+0x318>
 800594e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005952:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800595c:	b29b      	uxth	r3, r3
 800595e:	461a      	mov	r2, r3
 8005960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005962:	4413      	add	r3, r2
 8005964:	633b      	str	r3, [r7, #48]	@ 0x30
 8005966:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800596a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	011a      	lsls	r2, r3, #4
 8005974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005976:	4413      	add	r3, r2
 8005978:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800597c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800597e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005982:	b29a      	uxth	r2, r3
 8005984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005986:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005988:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800598c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	895b      	ldrh	r3, [r3, #10]
 8005994:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005998:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800599c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	6959      	ldr	r1, [r3, #20]
 80059a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80059ae:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80059b2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80059b6:	6800      	ldr	r0, [r0, #0]
 80059b8:	f001 fb49 	bl	800704e <USB_WritePMA>
            ep->xfer_buff += len;
 80059bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	695a      	ldr	r2, [r3, #20]
 80059c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059cc:	441a      	add	r2, r3
 80059ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80059da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6a1a      	ldr	r2, [r3, #32]
 80059e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d90f      	bls.n	8005a16 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80059f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	6a1a      	ldr	r2, [r3, #32]
 8005a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a06:	1ad2      	subs	r2, r2, r3
 8005a08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	621a      	str	r2, [r3, #32]
 8005a14:	e00e      	b.n	8005a34 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005a16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6a1b      	ldr	r3, [r3, #32]
 8005a22:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005a26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2200      	movs	r2, #0
 8005a32:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005a34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	785b      	ldrb	r3, [r3, #1]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d177      	bne.n	8005b34 <USB_EPStartXfer+0x4c4>
 8005a44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	61bb      	str	r3, [r7, #24]
 8005a50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	461a      	mov	r2, r3
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	4413      	add	r3, r2
 8005a66:	61bb      	str	r3, [r7, #24]
 8005a68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	011a      	lsls	r2, r3, #4
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005a7e:	617b      	str	r3, [r7, #20]
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	881b      	ldrh	r3, [r3, #0]
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	801a      	strh	r2, [r3, #0]
 8005a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a94:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a96:	d921      	bls.n	8005adc <USB_EPStartXfer+0x46c>
 8005a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a9c:	095b      	lsrs	r3, r3, #5
 8005a9e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aa6:	f003 031f 	and.w	r3, r3, #31
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d104      	bne.n	8005ab8 <USB_EPStartXfer+0x448>
 8005aae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	881b      	ldrh	r3, [r3, #0]
 8005abc:	b29a      	uxth	r2, r3
 8005abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	029b      	lsls	r3, r3, #10
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ad0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ad4:	b29a      	uxth	r2, r3
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	801a      	strh	r2, [r3, #0]
 8005ada:	e056      	b.n	8005b8a <USB_EPStartXfer+0x51a>
 8005adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d10a      	bne.n	8005afa <USB_EPStartXfer+0x48a>
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	881b      	ldrh	r3, [r3, #0]
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005af2:	b29a      	uxth	r2, r3
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	801a      	strh	r2, [r3, #0]
 8005af8:	e047      	b.n	8005b8a <USB_EPStartXfer+0x51a>
 8005afa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005afe:	085b      	lsrs	r3, r3, #1
 8005b00:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b08:	f003 0301 	and.w	r3, r3, #1
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d004      	beq.n	8005b1a <USB_EPStartXfer+0x4aa>
 8005b10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b14:	3301      	adds	r3, #1
 8005b16:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	881b      	ldrh	r3, [r3, #0]
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	029b      	lsls	r3, r3, #10
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	801a      	strh	r2, [r3, #0]
 8005b32:	e02a      	b.n	8005b8a <USB_EPStartXfer+0x51a>
 8005b34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	785b      	ldrb	r3, [r3, #1]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d122      	bne.n	8005b8a <USB_EPStartXfer+0x51a>
 8005b44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	623b      	str	r3, [r7, #32]
 8005b50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	461a      	mov	r2, r3
 8005b62:	6a3b      	ldr	r3, [r7, #32]
 8005b64:	4413      	add	r3, r2
 8005b66:	623b      	str	r3, [r7, #32]
 8005b68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	011a      	lsls	r2, r3, #4
 8005b76:	6a3b      	ldr	r3, [r7, #32]
 8005b78:	4413      	add	r3, r2
 8005b7a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005b7e:	61fb      	str	r3, [r7, #28]
 8005b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005b8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	891b      	ldrh	r3, [r3, #8]
 8005b96:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	6959      	ldr	r1, [r3, #20]
 8005ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005bb0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005bb4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005bb8:	6800      	ldr	r0, [r0, #0]
 8005bba:	f001 fa48 	bl	800704e <USB_WritePMA>
 8005bbe:	e3ee      	b.n	800639e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005bc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	785b      	ldrb	r3, [r3, #1]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d177      	bne.n	8005cc0 <USB_EPStartXfer+0x650>
 8005bd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bd4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005be0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	461a      	mov	r2, r3
 8005bee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bf0:	4413      	add	r3, r2
 8005bf2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	011a      	lsls	r2, r3, #4
 8005c02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c04:	4413      	add	r3, r2
 8005c06:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005c0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c0e:	881b      	ldrh	r3, [r3, #0]
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c1a:	801a      	strh	r2, [r3, #0]
 8005c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c20:	2b3e      	cmp	r3, #62	@ 0x3e
 8005c22:	d921      	bls.n	8005c68 <USB_EPStartXfer+0x5f8>
 8005c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c28:	095b      	lsrs	r3, r3, #5
 8005c2a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c32:	f003 031f 	and.w	r3, r3, #31
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d104      	bne.n	8005c44 <USB_EPStartXfer+0x5d4>
 8005c3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005c44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c46:	881b      	ldrh	r3, [r3, #0]
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	029b      	lsls	r3, r3, #10
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	4313      	orrs	r3, r2
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c64:	801a      	strh	r2, [r3, #0]
 8005c66:	e056      	b.n	8005d16 <USB_EPStartXfer+0x6a6>
 8005c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d10a      	bne.n	8005c86 <USB_EPStartXfer+0x616>
 8005c70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c72:	881b      	ldrh	r3, [r3, #0]
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c82:	801a      	strh	r2, [r3, #0]
 8005c84:	e047      	b.n	8005d16 <USB_EPStartXfer+0x6a6>
 8005c86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c8a:	085b      	lsrs	r3, r3, #1
 8005c8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c94:	f003 0301 	and.w	r3, r3, #1
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d004      	beq.n	8005ca6 <USB_EPStartXfer+0x636>
 8005c9c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005ca6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ca8:	881b      	ldrh	r3, [r3, #0]
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	029b      	lsls	r3, r3, #10
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cbc:	801a      	strh	r2, [r3, #0]
 8005cbe:	e02a      	b.n	8005d16 <USB_EPStartXfer+0x6a6>
 8005cc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	785b      	ldrb	r3, [r3, #1]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d122      	bne.n	8005d16 <USB_EPStartXfer+0x6a6>
 8005cd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cd4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	653b      	str	r3, [r7, #80]	@ 0x50
 8005cdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ce0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	461a      	mov	r2, r3
 8005cee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cf0:	4413      	add	r3, r2
 8005cf2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005cf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	011a      	lsls	r2, r3, #4
 8005d02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d04:	4413      	add	r3, r2
 8005d06:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005d0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d14:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005d16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	891b      	ldrh	r3, [r3, #8]
 8005d22:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	6959      	ldr	r1, [r3, #20]
 8005d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005d3c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005d40:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005d44:	6800      	ldr	r0, [r0, #0]
 8005d46:	f001 f982 	bl	800704e <USB_WritePMA>
            ep->xfer_buff += len;
 8005d4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	695a      	ldr	r2, [r3, #20]
 8005d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d5a:	441a      	add	r2, r3
 8005d5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005d68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	6a1a      	ldr	r2, [r3, #32]
 8005d74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d90f      	bls.n	8005da4 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005d84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	6a1a      	ldr	r2, [r3, #32]
 8005d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d94:	1ad2      	subs	r2, r2, r3
 8005d96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	621a      	str	r2, [r3, #32]
 8005da2:	e00e      	b.n	8005dc2 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005da4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005da8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	6a1b      	ldr	r3, [r3, #32]
 8005db0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005db4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005db8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005dc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	643b      	str	r3, [r7, #64]	@ 0x40
 8005dce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	785b      	ldrb	r3, [r3, #1]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d177      	bne.n	8005ece <USB_EPStartXfer+0x85e>
 8005dde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005de2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005dea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dfe:	4413      	add	r3, r2
 8005e00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	011a      	lsls	r2, r3, #4
 8005e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e12:	4413      	add	r3, r2
 8005e14:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005e18:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e1c:	881b      	ldrh	r3, [r3, #0]
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e28:	801a      	strh	r2, [r3, #0]
 8005e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e2e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005e30:	d921      	bls.n	8005e76 <USB_EPStartXfer+0x806>
 8005e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e36:	095b      	lsrs	r3, r3, #5
 8005e38:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e40:	f003 031f 	and.w	r3, r3, #31
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d104      	bne.n	8005e52 <USB_EPStartXfer+0x7e2>
 8005e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e54:	881b      	ldrh	r3, [r3, #0]
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	029b      	lsls	r3, r3, #10
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	4313      	orrs	r3, r2
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e72:	801a      	strh	r2, [r3, #0]
 8005e74:	e050      	b.n	8005f18 <USB_EPStartXfer+0x8a8>
 8005e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10a      	bne.n	8005e94 <USB_EPStartXfer+0x824>
 8005e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e80:	881b      	ldrh	r3, [r3, #0]
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e8c:	b29a      	uxth	r2, r3
 8005e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e90:	801a      	strh	r2, [r3, #0]
 8005e92:	e041      	b.n	8005f18 <USB_EPStartXfer+0x8a8>
 8005e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e98:	085b      	lsrs	r3, r3, #1
 8005e9a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ea2:	f003 0301 	and.w	r3, r3, #1
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d004      	beq.n	8005eb4 <USB_EPStartXfer+0x844>
 8005eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eae:	3301      	adds	r3, #1
 8005eb0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005eb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eb6:	881b      	ldrh	r3, [r3, #0]
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	029b      	lsls	r3, r3, #10
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eca:	801a      	strh	r2, [r3, #0]
 8005ecc:	e024      	b.n	8005f18 <USB_EPStartXfer+0x8a8>
 8005ece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ed2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	785b      	ldrb	r3, [r3, #1]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d11c      	bne.n	8005f18 <USB_EPStartXfer+0x8a8>
 8005ede:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ee2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	461a      	mov	r2, r3
 8005ef0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ef2:	4413      	add	r3, r2
 8005ef4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ef6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005efa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	011a      	lsls	r2, r3, #4
 8005f04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f06:	4413      	add	r3, r2
 8005f08:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f16:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005f18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	895b      	ldrh	r3, [r3, #10]
 8005f24:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	6959      	ldr	r1, [r3, #20]
 8005f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005f3e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005f42:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005f46:	6800      	ldr	r0, [r0, #0]
 8005f48:	f001 f881 	bl	800704e <USB_WritePMA>
 8005f4c:	e227      	b.n	800639e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005f4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005f5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	4413      	add	r3, r2
 8005f78:	881b      	ldrh	r3, [r3, #0]
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005f80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f84:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005f88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	441a      	add	r2, r3
 8005fa2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005fa6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005faa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005fba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005fc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005fda:	4413      	add	r3, r2
 8005fdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005fde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fe2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	011a      	lsls	r2, r3, #4
 8005fec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005fee:	4413      	add	r3, r2
 8005ff0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005ff4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ffe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006000:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006004:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	891b      	ldrh	r3, [r3, #8]
 800600c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006010:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006014:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	6959      	ldr	r1, [r3, #20]
 800601c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006020:	b29b      	uxth	r3, r3
 8006022:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006026:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800602a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800602e:	6800      	ldr	r0, [r0, #0]
 8006030:	f001 f80d 	bl	800704e <USB_WritePMA>
 8006034:	e1b3      	b.n	800639e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006036:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800603a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6a1a      	ldr	r2, [r3, #32]
 8006042:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006046:	1ad2      	subs	r2, r2, r3
 8006048:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800604c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006054:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006058:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006062:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	4413      	add	r3, r2
 800606e:	881b      	ldrh	r3, [r3, #0]
 8006070:	b29b      	uxth	r3, r3
 8006072:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006076:	2b00      	cmp	r3, #0
 8006078:	f000 80c6 	beq.w	8006208 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800607c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006080:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	673b      	str	r3, [r7, #112]	@ 0x70
 8006088:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800608c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	785b      	ldrb	r3, [r3, #1]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d177      	bne.n	8006188 <USB_EPStartXfer+0xb18>
 8006098:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800609c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80060a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	461a      	mov	r2, r3
 80060b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80060b8:	4413      	add	r3, r2
 80060ba:	66bb      	str	r3, [r7, #104]	@ 0x68
 80060bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	011a      	lsls	r2, r3, #4
 80060ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80060cc:	4413      	add	r3, r2
 80060ce:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80060d2:	667b      	str	r3, [r7, #100]	@ 0x64
 80060d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80060d6:	881b      	ldrh	r3, [r3, #0]
 80060d8:	b29b      	uxth	r3, r3
 80060da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060de:	b29a      	uxth	r2, r3
 80060e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80060e2:	801a      	strh	r2, [r3, #0]
 80060e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80060ea:	d921      	bls.n	8006130 <USB_EPStartXfer+0xac0>
 80060ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060f0:	095b      	lsrs	r3, r3, #5
 80060f2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80060f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060fa:	f003 031f 	and.w	r3, r3, #31
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d104      	bne.n	800610c <USB_EPStartXfer+0xa9c>
 8006102:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006106:	3b01      	subs	r3, #1
 8006108:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800610c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800610e:	881b      	ldrh	r3, [r3, #0]
 8006110:	b29a      	uxth	r2, r3
 8006112:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006116:	b29b      	uxth	r3, r3
 8006118:	029b      	lsls	r3, r3, #10
 800611a:	b29b      	uxth	r3, r3
 800611c:	4313      	orrs	r3, r2
 800611e:	b29b      	uxth	r3, r3
 8006120:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006124:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006128:	b29a      	uxth	r2, r3
 800612a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800612c:	801a      	strh	r2, [r3, #0]
 800612e:	e050      	b.n	80061d2 <USB_EPStartXfer+0xb62>
 8006130:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10a      	bne.n	800614e <USB_EPStartXfer+0xade>
 8006138:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800613a:	881b      	ldrh	r3, [r3, #0]
 800613c:	b29b      	uxth	r3, r3
 800613e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006142:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006146:	b29a      	uxth	r2, r3
 8006148:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800614a:	801a      	strh	r2, [r3, #0]
 800614c:	e041      	b.n	80061d2 <USB_EPStartXfer+0xb62>
 800614e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006152:	085b      	lsrs	r3, r3, #1
 8006154:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800615c:	f003 0301 	and.w	r3, r3, #1
 8006160:	2b00      	cmp	r3, #0
 8006162:	d004      	beq.n	800616e <USB_EPStartXfer+0xafe>
 8006164:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006168:	3301      	adds	r3, #1
 800616a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800616e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006170:	881b      	ldrh	r3, [r3, #0]
 8006172:	b29a      	uxth	r2, r3
 8006174:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006178:	b29b      	uxth	r3, r3
 800617a:	029b      	lsls	r3, r3, #10
 800617c:	b29b      	uxth	r3, r3
 800617e:	4313      	orrs	r3, r2
 8006180:	b29a      	uxth	r2, r3
 8006182:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006184:	801a      	strh	r2, [r3, #0]
 8006186:	e024      	b.n	80061d2 <USB_EPStartXfer+0xb62>
 8006188:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800618c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	785b      	ldrb	r3, [r3, #1]
 8006194:	2b01      	cmp	r3, #1
 8006196:	d11c      	bne.n	80061d2 <USB_EPStartXfer+0xb62>
 8006198:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800619c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	461a      	mov	r2, r3
 80061aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80061ac:	4413      	add	r3, r2
 80061ae:	673b      	str	r3, [r7, #112]	@ 0x70
 80061b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	011a      	lsls	r2, r3, #4
 80061be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80061c0:	4413      	add	r3, r2
 80061c2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80061c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80061c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80061d0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80061d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	895b      	ldrh	r3, [r3, #10]
 80061de:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	6959      	ldr	r1, [r3, #20]
 80061ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80061f8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80061fc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006200:	6800      	ldr	r0, [r0, #0]
 8006202:	f000 ff24 	bl	800704e <USB_WritePMA>
 8006206:	e0ca      	b.n	800639e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006208:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800620c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	785b      	ldrb	r3, [r3, #1]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d177      	bne.n	8006308 <USB_EPStartXfer+0xc98>
 8006218:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800621c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006224:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006228:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006232:	b29b      	uxth	r3, r3
 8006234:	461a      	mov	r2, r3
 8006236:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006238:	4413      	add	r3, r2
 800623a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800623c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006240:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	011a      	lsls	r2, r3, #4
 800624a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800624c:	4413      	add	r3, r2
 800624e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006252:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006254:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006256:	881b      	ldrh	r3, [r3, #0]
 8006258:	b29b      	uxth	r3, r3
 800625a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800625e:	b29a      	uxth	r2, r3
 8006260:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006262:	801a      	strh	r2, [r3, #0]
 8006264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006268:	2b3e      	cmp	r3, #62	@ 0x3e
 800626a:	d921      	bls.n	80062b0 <USB_EPStartXfer+0xc40>
 800626c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006270:	095b      	lsrs	r3, r3, #5
 8006272:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006276:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800627a:	f003 031f 	and.w	r3, r3, #31
 800627e:	2b00      	cmp	r3, #0
 8006280:	d104      	bne.n	800628c <USB_EPStartXfer+0xc1c>
 8006282:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006286:	3b01      	subs	r3, #1
 8006288:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800628c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800628e:	881b      	ldrh	r3, [r3, #0]
 8006290:	b29a      	uxth	r2, r3
 8006292:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006296:	b29b      	uxth	r3, r3
 8006298:	029b      	lsls	r3, r3, #10
 800629a:	b29b      	uxth	r3, r3
 800629c:	4313      	orrs	r3, r2
 800629e:	b29b      	uxth	r3, r3
 80062a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80062ac:	801a      	strh	r2, [r3, #0]
 80062ae:	e05c      	b.n	800636a <USB_EPStartXfer+0xcfa>
 80062b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d10a      	bne.n	80062ce <USB_EPStartXfer+0xc5e>
 80062b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80062ba:	881b      	ldrh	r3, [r3, #0]
 80062bc:	b29b      	uxth	r3, r3
 80062be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80062ca:	801a      	strh	r2, [r3, #0]
 80062cc:	e04d      	b.n	800636a <USB_EPStartXfer+0xcfa>
 80062ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062d2:	085b      	lsrs	r3, r3, #1
 80062d4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80062d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062dc:	f003 0301 	and.w	r3, r3, #1
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d004      	beq.n	80062ee <USB_EPStartXfer+0xc7e>
 80062e4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80062e8:	3301      	adds	r3, #1
 80062ea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80062ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80062f0:	881b      	ldrh	r3, [r3, #0]
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	029b      	lsls	r3, r3, #10
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	4313      	orrs	r3, r2
 8006300:	b29a      	uxth	r2, r3
 8006302:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006304:	801a      	strh	r2, [r3, #0]
 8006306:	e030      	b.n	800636a <USB_EPStartXfer+0xcfa>
 8006308:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800630c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	785b      	ldrb	r3, [r3, #1]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d128      	bne.n	800636a <USB_EPStartXfer+0xcfa>
 8006318:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800631c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006326:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800632a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006334:	b29b      	uxth	r3, r3
 8006336:	461a      	mov	r2, r3
 8006338:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800633c:	4413      	add	r3, r2
 800633e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006342:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006346:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	011a      	lsls	r2, r3, #4
 8006350:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006354:	4413      	add	r3, r2
 8006356:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800635a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800635e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006362:	b29a      	uxth	r2, r3
 8006364:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006368:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800636a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800636e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	891b      	ldrh	r3, [r3, #8]
 8006376:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800637a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800637e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	6959      	ldr	r1, [r3, #20]
 8006386:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800638a:	b29b      	uxth	r3, r3
 800638c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006390:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006394:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006398:	6800      	ldr	r0, [r0, #0]
 800639a:	f000 fe58 	bl	800704e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800639e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	4413      	add	r3, r2
 80063b8:	881b      	ldrh	r3, [r3, #0]
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063c4:	817b      	strh	r3, [r7, #10]
 80063c6:	897b      	ldrh	r3, [r7, #10]
 80063c8:	f083 0310 	eor.w	r3, r3, #16
 80063cc:	817b      	strh	r3, [r7, #10]
 80063ce:	897b      	ldrh	r3, [r7, #10]
 80063d0:	f083 0320 	eor.w	r3, r3, #32
 80063d4:	817b      	strh	r3, [r7, #10]
 80063d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	441a      	add	r2, r3
 80063f0:	897b      	ldrh	r3, [r7, #10]
 80063f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006402:	b29b      	uxth	r3, r3
 8006404:	8013      	strh	r3, [r2, #0]
 8006406:	f000 bcde 	b.w	8006dc6 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800640a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800640e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	7b1b      	ldrb	r3, [r3, #12]
 8006416:	2b00      	cmp	r3, #0
 8006418:	f040 80bb 	bne.w	8006592 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800641c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006420:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	699a      	ldr	r2, [r3, #24]
 8006428:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800642c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	429a      	cmp	r2, r3
 8006436:	d917      	bls.n	8006468 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006438:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800643c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8006448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800644c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	699a      	ldr	r2, [r3, #24]
 8006454:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006458:	1ad2      	subs	r2, r2, r3
 800645a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800645e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	619a      	str	r2, [r3, #24]
 8006466:	e00e      	b.n	8006486 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006468:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800646c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	699b      	ldr	r3, [r3, #24]
 8006474:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8006478:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800647c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2200      	movs	r2, #0
 8006484:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006486:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800648a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006494:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006498:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	461a      	mov	r2, r3
 80064a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80064aa:	4413      	add	r3, r2
 80064ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80064b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	011a      	lsls	r2, r3, #4
 80064be:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80064c2:	4413      	add	r3, r2
 80064c4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80064c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80064cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80064d0:	881b      	ldrh	r3, [r3, #0]
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064d8:	b29a      	uxth	r2, r3
 80064da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80064de:	801a      	strh	r2, [r3, #0]
 80064e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064e4:	2b3e      	cmp	r3, #62	@ 0x3e
 80064e6:	d924      	bls.n	8006532 <USB_EPStartXfer+0xec2>
 80064e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ec:	095b      	lsrs	r3, r3, #5
 80064ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80064f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064f6:	f003 031f 	and.w	r3, r3, #31
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d104      	bne.n	8006508 <USB_EPStartXfer+0xe98>
 80064fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006502:	3b01      	subs	r3, #1
 8006504:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006508:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800650c:	881b      	ldrh	r3, [r3, #0]
 800650e:	b29a      	uxth	r2, r3
 8006510:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006514:	b29b      	uxth	r3, r3
 8006516:	029b      	lsls	r3, r3, #10
 8006518:	b29b      	uxth	r3, r3
 800651a:	4313      	orrs	r3, r2
 800651c:	b29b      	uxth	r3, r3
 800651e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006522:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006526:	b29a      	uxth	r2, r3
 8006528:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800652c:	801a      	strh	r2, [r3, #0]
 800652e:	f000 bc10 	b.w	8006d52 <USB_EPStartXfer+0x16e2>
 8006532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10c      	bne.n	8006554 <USB_EPStartXfer+0xee4>
 800653a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800653e:	881b      	ldrh	r3, [r3, #0]
 8006540:	b29b      	uxth	r3, r3
 8006542:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006546:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800654a:	b29a      	uxth	r2, r3
 800654c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006550:	801a      	strh	r2, [r3, #0]
 8006552:	e3fe      	b.n	8006d52 <USB_EPStartXfer+0x16e2>
 8006554:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006558:	085b      	lsrs	r3, r3, #1
 800655a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800655e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006562:	f003 0301 	and.w	r3, r3, #1
 8006566:	2b00      	cmp	r3, #0
 8006568:	d004      	beq.n	8006574 <USB_EPStartXfer+0xf04>
 800656a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800656e:	3301      	adds	r3, #1
 8006570:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006574:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006578:	881b      	ldrh	r3, [r3, #0]
 800657a:	b29a      	uxth	r2, r3
 800657c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006580:	b29b      	uxth	r3, r3
 8006582:	029b      	lsls	r3, r3, #10
 8006584:	b29b      	uxth	r3, r3
 8006586:	4313      	orrs	r3, r2
 8006588:	b29a      	uxth	r2, r3
 800658a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800658e:	801a      	strh	r2, [r3, #0]
 8006590:	e3df      	b.n	8006d52 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006592:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006596:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	78db      	ldrb	r3, [r3, #3]
 800659e:	2b02      	cmp	r3, #2
 80065a0:	f040 8218 	bne.w	80069d4 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80065a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	785b      	ldrb	r3, [r3, #1]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f040 809d 	bne.w	80066f0 <USB_EPStartXfer+0x1080>
 80065b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80065c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	461a      	mov	r2, r3
 80065d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80065da:	4413      	add	r3, r2
 80065dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80065e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	011a      	lsls	r2, r3, #4
 80065ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80065f2:	4413      	add	r3, r2
 80065f4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80065f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80065fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006600:	881b      	ldrh	r3, [r3, #0]
 8006602:	b29b      	uxth	r3, r3
 8006604:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006608:	b29a      	uxth	r2, r3
 800660a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800660e:	801a      	strh	r2, [r3, #0]
 8006610:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006614:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	2b3e      	cmp	r3, #62	@ 0x3e
 800661e:	d92b      	bls.n	8006678 <USB_EPStartXfer+0x1008>
 8006620:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006624:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	095b      	lsrs	r3, r3, #5
 800662e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006636:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	f003 031f 	and.w	r3, r3, #31
 8006642:	2b00      	cmp	r3, #0
 8006644:	d104      	bne.n	8006650 <USB_EPStartXfer+0xfe0>
 8006646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800664a:	3b01      	subs	r3, #1
 800664c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006650:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006654:	881b      	ldrh	r3, [r3, #0]
 8006656:	b29a      	uxth	r2, r3
 8006658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800665c:	b29b      	uxth	r3, r3
 800665e:	029b      	lsls	r3, r3, #10
 8006660:	b29b      	uxth	r3, r3
 8006662:	4313      	orrs	r3, r2
 8006664:	b29b      	uxth	r3, r3
 8006666:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800666a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800666e:	b29a      	uxth	r2, r3
 8006670:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006674:	801a      	strh	r2, [r3, #0]
 8006676:	e070      	b.n	800675a <USB_EPStartXfer+0x10ea>
 8006678:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800667c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d10c      	bne.n	80066a2 <USB_EPStartXfer+0x1032>
 8006688:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800668c:	881b      	ldrh	r3, [r3, #0]
 800668e:	b29b      	uxth	r3, r3
 8006690:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006694:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006698:	b29a      	uxth	r2, r3
 800669a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800669e:	801a      	strh	r2, [r3, #0]
 80066a0:	e05b      	b.n	800675a <USB_EPStartXfer+0x10ea>
 80066a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	085b      	lsrs	r3, r3, #1
 80066b0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80066b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	f003 0301 	and.w	r3, r3, #1
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d004      	beq.n	80066d2 <USB_EPStartXfer+0x1062>
 80066c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066cc:	3301      	adds	r3, #1
 80066ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80066d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80066d6:	881b      	ldrh	r3, [r3, #0]
 80066d8:	b29a      	uxth	r2, r3
 80066da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066de:	b29b      	uxth	r3, r3
 80066e0:	029b      	lsls	r3, r3, #10
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	4313      	orrs	r3, r2
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80066ec:	801a      	strh	r2, [r3, #0]
 80066ee:	e034      	b.n	800675a <USB_EPStartXfer+0x10ea>
 80066f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	785b      	ldrb	r3, [r3, #1]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d12c      	bne.n	800675a <USB_EPStartXfer+0x10ea>
 8006700:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006704:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800670e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006712:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800671c:	b29b      	uxth	r3, r3
 800671e:	461a      	mov	r2, r3
 8006720:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006724:	4413      	add	r3, r2
 8006726:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800672a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800672e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	011a      	lsls	r2, r3, #4
 8006738:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800673c:	4413      	add	r3, r2
 800673e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006742:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006746:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800674a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	b29a      	uxth	r2, r3
 8006754:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006758:	801a      	strh	r2, [r3, #0]
 800675a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800675e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006768:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800676c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	785b      	ldrb	r3, [r3, #1]
 8006774:	2b00      	cmp	r3, #0
 8006776:	f040 809d 	bne.w	80068b4 <USB_EPStartXfer+0x1244>
 800677a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800677e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006788:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800678c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006796:	b29b      	uxth	r3, r3
 8006798:	461a      	mov	r2, r3
 800679a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800679e:	4413      	add	r3, r2
 80067a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80067a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	011a      	lsls	r2, r3, #4
 80067b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80067b6:	4413      	add	r3, r2
 80067b8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80067bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80067c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80067c4:	881b      	ldrh	r3, [r3, #0]
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80067d2:	801a      	strh	r2, [r3, #0]
 80067d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80067e2:	d92b      	bls.n	800683c <USB_EPStartXfer+0x11cc>
 80067e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	095b      	lsrs	r3, r3, #5
 80067f2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80067f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	f003 031f 	and.w	r3, r3, #31
 8006806:	2b00      	cmp	r3, #0
 8006808:	d104      	bne.n	8006814 <USB_EPStartXfer+0x11a4>
 800680a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800680e:	3b01      	subs	r3, #1
 8006810:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006814:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006818:	881b      	ldrh	r3, [r3, #0]
 800681a:	b29a      	uxth	r2, r3
 800681c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006820:	b29b      	uxth	r3, r3
 8006822:	029b      	lsls	r3, r3, #10
 8006824:	b29b      	uxth	r3, r3
 8006826:	4313      	orrs	r3, r2
 8006828:	b29b      	uxth	r3, r3
 800682a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800682e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006832:	b29a      	uxth	r2, r3
 8006834:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006838:	801a      	strh	r2, [r3, #0]
 800683a:	e069      	b.n	8006910 <USB_EPStartXfer+0x12a0>
 800683c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006840:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d10c      	bne.n	8006866 <USB_EPStartXfer+0x11f6>
 800684c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006850:	881b      	ldrh	r3, [r3, #0]
 8006852:	b29b      	uxth	r3, r3
 8006854:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006858:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800685c:	b29a      	uxth	r2, r3
 800685e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006862:	801a      	strh	r2, [r3, #0]
 8006864:	e054      	b.n	8006910 <USB_EPStartXfer+0x12a0>
 8006866:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800686a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	085b      	lsrs	r3, r3, #1
 8006874:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006878:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800687c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	f003 0301 	and.w	r3, r3, #1
 8006888:	2b00      	cmp	r3, #0
 800688a:	d004      	beq.n	8006896 <USB_EPStartXfer+0x1226>
 800688c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006890:	3301      	adds	r3, #1
 8006892:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006896:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800689a:	881b      	ldrh	r3, [r3, #0]
 800689c:	b29a      	uxth	r2, r3
 800689e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	029b      	lsls	r3, r3, #10
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	4313      	orrs	r3, r2
 80068aa:	b29a      	uxth	r2, r3
 80068ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80068b0:	801a      	strh	r2, [r3, #0]
 80068b2:	e02d      	b.n	8006910 <USB_EPStartXfer+0x12a0>
 80068b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	785b      	ldrb	r3, [r3, #1]
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d125      	bne.n	8006910 <USB_EPStartXfer+0x12a0>
 80068c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	461a      	mov	r2, r3
 80068d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80068da:	4413      	add	r3, r2
 80068dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80068e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	011a      	lsls	r2, r3, #4
 80068ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80068f2:	4413      	add	r3, r2
 80068f4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80068f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80068fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006900:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	b29a      	uxth	r2, r3
 800690a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800690e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006910:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006914:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	69db      	ldr	r3, [r3, #28]
 800691c:	2b00      	cmp	r3, #0
 800691e:	f000 8218 	beq.w	8006d52 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006922:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006926:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006930:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	4413      	add	r3, r2
 800693c:	881b      	ldrh	r3, [r3, #0]
 800693e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006942:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006946:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800694a:	2b00      	cmp	r3, #0
 800694c:	d005      	beq.n	800695a <USB_EPStartXfer+0x12ea>
 800694e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006956:	2b00      	cmp	r3, #0
 8006958:	d10d      	bne.n	8006976 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800695a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800695e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006962:	2b00      	cmp	r3, #0
 8006964:	f040 81f5 	bne.w	8006d52 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006968:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800696c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006970:	2b00      	cmp	r3, #0
 8006972:	f040 81ee 	bne.w	8006d52 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006976:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800697a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006984:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4413      	add	r3, r2
 8006990:	881b      	ldrh	r3, [r3, #0]
 8006992:	b29b      	uxth	r3, r3
 8006994:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006998:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800699c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80069a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	441a      	add	r2, r3
 80069ba:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80069be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069ca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	8013      	strh	r3, [r2, #0]
 80069d2:	e1be      	b.n	8006d52 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80069d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	78db      	ldrb	r3, [r3, #3]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	f040 81b4 	bne.w	8006d4e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80069e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	699a      	ldr	r2, [r3, #24]
 80069f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d917      	bls.n	8006a32 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006a02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8006a12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	699a      	ldr	r2, [r3, #24]
 8006a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a22:	1ad2      	subs	r2, r2, r3
 8006a24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	619a      	str	r2, [r3, #24]
 8006a30:	e00e      	b.n	8006a50 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006a32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	699b      	ldr	r3, [r3, #24]
 8006a3e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8006a42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006a50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	785b      	ldrb	r3, [r3, #1]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f040 8085 	bne.w	8006b6c <USB_EPStartXfer+0x14fc>
 8006a62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006a70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	461a      	mov	r2, r3
 8006a82:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a86:	4413      	add	r3, r2
 8006a88:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006a8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	011a      	lsls	r2, r3, #4
 8006a9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a9e:	4413      	add	r3, r2
 8006aa0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006aa4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006aa8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006aac:	881b      	ldrh	r3, [r3, #0]
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006aba:	801a      	strh	r2, [r3, #0]
 8006abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ac0:	2b3e      	cmp	r3, #62	@ 0x3e
 8006ac2:	d923      	bls.n	8006b0c <USB_EPStartXfer+0x149c>
 8006ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ac8:	095b      	lsrs	r3, r3, #5
 8006aca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ad2:	f003 031f 	and.w	r3, r3, #31
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d104      	bne.n	8006ae4 <USB_EPStartXfer+0x1474>
 8006ada:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ade:	3b01      	subs	r3, #1
 8006ae0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006ae4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006ae8:	881b      	ldrh	r3, [r3, #0]
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	029b      	lsls	r3, r3, #10
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	4313      	orrs	r3, r2
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006afe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b02:	b29a      	uxth	r2, r3
 8006b04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006b08:	801a      	strh	r2, [r3, #0]
 8006b0a:	e060      	b.n	8006bce <USB_EPStartXfer+0x155e>
 8006b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d10c      	bne.n	8006b2e <USB_EPStartXfer+0x14be>
 8006b14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006b18:	881b      	ldrh	r3, [r3, #0]
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006b2a:	801a      	strh	r2, [r3, #0]
 8006b2c:	e04f      	b.n	8006bce <USB_EPStartXfer+0x155e>
 8006b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b32:	085b      	lsrs	r3, r3, #1
 8006b34:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b3c:	f003 0301 	and.w	r3, r3, #1
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d004      	beq.n	8006b4e <USB_EPStartXfer+0x14de>
 8006b44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b48:	3301      	adds	r3, #1
 8006b4a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006b4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006b52:	881b      	ldrh	r3, [r3, #0]
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	029b      	lsls	r3, r3, #10
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	4313      	orrs	r3, r2
 8006b62:	b29a      	uxth	r2, r3
 8006b64:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006b68:	801a      	strh	r2, [r3, #0]
 8006b6a:	e030      	b.n	8006bce <USB_EPStartXfer+0x155e>
 8006b6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	785b      	ldrb	r3, [r3, #1]
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d128      	bne.n	8006bce <USB_EPStartXfer+0x155e>
 8006b7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006b8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ba0:	4413      	add	r3, r2
 8006ba2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006ba6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006baa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	011a      	lsls	r2, r3, #4
 8006bb4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006bb8:	4413      	add	r3, r2
 8006bba:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006bbe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bc6:	b29a      	uxth	r2, r3
 8006bc8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006bcc:	801a      	strh	r2, [r3, #0]
 8006bce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bd2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006bdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006be0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	785b      	ldrb	r3, [r3, #1]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	f040 8085 	bne.w	8006cf8 <USB_EPStartXfer+0x1688>
 8006bee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bf2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006bfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006c12:	4413      	add	r3, r2
 8006c14:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006c18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	011a      	lsls	r2, r3, #4
 8006c26:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006c2a:	4413      	add	r3, r2
 8006c2c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006c30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006c34:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006c38:	881b      	ldrh	r3, [r3, #0]
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006c46:	801a      	strh	r2, [r3, #0]
 8006c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c4c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c4e:	d923      	bls.n	8006c98 <USB_EPStartXfer+0x1628>
 8006c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c54:	095b      	lsrs	r3, r3, #5
 8006c56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c5e:	f003 031f 	and.w	r3, r3, #31
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d104      	bne.n	8006c70 <USB_EPStartXfer+0x1600>
 8006c66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006c70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006c74:	881b      	ldrh	r3, [r3, #0]
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	029b      	lsls	r3, r3, #10
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	4313      	orrs	r3, r2
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c8e:	b29a      	uxth	r2, r3
 8006c90:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006c94:	801a      	strh	r2, [r3, #0]
 8006c96:	e05c      	b.n	8006d52 <USB_EPStartXfer+0x16e2>
 8006c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d10c      	bne.n	8006cba <USB_EPStartXfer+0x164a>
 8006ca0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006ca4:	881b      	ldrh	r3, [r3, #0]
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cb0:	b29a      	uxth	r2, r3
 8006cb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006cb6:	801a      	strh	r2, [r3, #0]
 8006cb8:	e04b      	b.n	8006d52 <USB_EPStartXfer+0x16e2>
 8006cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cbe:	085b      	lsrs	r3, r3, #1
 8006cc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cc8:	f003 0301 	and.w	r3, r3, #1
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d004      	beq.n	8006cda <USB_EPStartXfer+0x166a>
 8006cd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006cda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006cde:	881b      	ldrh	r3, [r3, #0]
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	029b      	lsls	r3, r3, #10
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	4313      	orrs	r3, r2
 8006cee:	b29a      	uxth	r2, r3
 8006cf0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006cf4:	801a      	strh	r2, [r3, #0]
 8006cf6:	e02c      	b.n	8006d52 <USB_EPStartXfer+0x16e2>
 8006cf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	785b      	ldrb	r3, [r3, #1]
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d124      	bne.n	8006d52 <USB_EPStartXfer+0x16e2>
 8006d08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	461a      	mov	r2, r3
 8006d1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006d1e:	4413      	add	r3, r2
 8006d20:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006d24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	011a      	lsls	r2, r3, #4
 8006d32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006d36:	4413      	add	r3, r2
 8006d38:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006d3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d44:	b29a      	uxth	r2, r3
 8006d46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006d4a:	801a      	strh	r2, [r3, #0]
 8006d4c:	e001      	b.n	8006d52 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e03a      	b.n	8006dc8 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006d52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	4413      	add	r3, r2
 8006d6c:	881b      	ldrh	r3, [r3, #0]
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d78:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006d7c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006d80:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006d84:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006d88:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006d8c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006d90:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006d94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006da2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	441a      	add	r2, r3
 8006dae:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006db2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006db6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006dbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006dd2:	b480      	push	{r7}
 8006dd4:	b085      	sub	sp, #20
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
 8006dda:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	785b      	ldrb	r3, [r3, #1]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d020      	beq.n	8006e26 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	4413      	add	r3, r2
 8006dee:	881b      	ldrh	r3, [r3, #0]
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006df6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006dfa:	81bb      	strh	r3, [r7, #12]
 8006dfc:	89bb      	ldrh	r3, [r7, #12]
 8006dfe:	f083 0310 	eor.w	r3, r3, #16
 8006e02:	81bb      	strh	r3, [r7, #12]
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	441a      	add	r2, r3
 8006e0e:	89bb      	ldrh	r3, [r7, #12]
 8006e10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	8013      	strh	r3, [r2, #0]
 8006e24:	e01f      	b.n	8006e66 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	4413      	add	r3, r2
 8006e30:	881b      	ldrh	r3, [r3, #0]
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e3c:	81fb      	strh	r3, [r7, #14]
 8006e3e:	89fb      	ldrh	r3, [r7, #14]
 8006e40:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006e44:	81fb      	strh	r3, [r7, #14]
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	441a      	add	r2, r3
 8006e50:	89fb      	ldrh	r3, [r7, #14]
 8006e52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3714      	adds	r7, #20
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bc80      	pop	{r7}
 8006e70:	4770      	bx	lr

08006e72 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e72:	b480      	push	{r7}
 8006e74:	b087      	sub	sp, #28
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
 8006e7a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	7b1b      	ldrb	r3, [r3, #12]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	f040 809d 	bne.w	8006fc0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	785b      	ldrb	r3, [r3, #1]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d04c      	beq.n	8006f28 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	4413      	add	r3, r2
 8006e98:	881b      	ldrh	r3, [r3, #0]
 8006e9a:	823b      	strh	r3, [r7, #16]
 8006e9c:	8a3b      	ldrh	r3, [r7, #16]
 8006e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d01b      	beq.n	8006ede <USB_EPClearStall+0x6c>
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	4413      	add	r3, r2
 8006eb0:	881b      	ldrh	r3, [r3, #0]
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006eb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ebc:	81fb      	strh	r3, [r7, #14]
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	441a      	add	r2, r3
 8006ec8:	89fb      	ldrh	r3, [r7, #14]
 8006eca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ece:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ed2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ed6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	78db      	ldrb	r3, [r3, #3]
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d06c      	beq.n	8006fc0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	4413      	add	r3, r2
 8006ef0:	881b      	ldrh	r3, [r3, #0]
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ef8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006efc:	81bb      	strh	r3, [r7, #12]
 8006efe:	89bb      	ldrh	r3, [r7, #12]
 8006f00:	f083 0320 	eor.w	r3, r3, #32
 8006f04:	81bb      	strh	r3, [r7, #12]
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	441a      	add	r2, r3
 8006f10:	89bb      	ldrh	r3, [r7, #12]
 8006f12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	8013      	strh	r3, [r2, #0]
 8006f26:	e04b      	b.n	8006fc0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	4413      	add	r3, r2
 8006f32:	881b      	ldrh	r3, [r3, #0]
 8006f34:	82fb      	strh	r3, [r7, #22]
 8006f36:	8afb      	ldrh	r3, [r7, #22]
 8006f38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d01b      	beq.n	8006f78 <USB_EPClearStall+0x106>
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	4413      	add	r3, r2
 8006f4a:	881b      	ldrh	r3, [r3, #0]
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f56:	82bb      	strh	r3, [r7, #20]
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	441a      	add	r2, r3
 8006f62:	8abb      	ldrh	r3, [r7, #20]
 8006f64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f6c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006f70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	4413      	add	r3, r2
 8006f82:	881b      	ldrh	r3, [r3, #0]
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f8e:	827b      	strh	r3, [r7, #18]
 8006f90:	8a7b      	ldrh	r3, [r7, #18]
 8006f92:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006f96:	827b      	strh	r3, [r7, #18]
 8006f98:	8a7b      	ldrh	r3, [r7, #18]
 8006f9a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006f9e:	827b      	strh	r3, [r7, #18]
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	441a      	add	r2, r3
 8006faa:	8a7b      	ldrh	r3, [r7, #18]
 8006fac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fb0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	371c      	adds	r7, #28
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bc80      	pop	{r7}
 8006fca:	4770      	bx	lr

08006fcc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006fd8:	78fb      	ldrb	r3, [r7, #3]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d103      	bne.n	8006fe6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2280      	movs	r2, #128	@ 0x80
 8006fe2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bc80      	pop	{r7}
 8006ff0:	4770      	bx	lr

08006ff2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006ff2:	b480      	push	{r7}
 8006ff4:	b083      	sub	sp, #12
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006ffa:	2300      	movs	r3, #0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	370c      	adds	r7, #12
 8007000:	46bd      	mov	sp, r7
 8007002:	bc80      	pop	{r7}
 8007004:	4770      	bx	lr

08007006 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007006:	b480      	push	{r7}
 8007008:	b083      	sub	sp, #12
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	bc80      	pop	{r7}
 8007018:	4770      	bx	lr

0800701a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800701a:	b480      	push	{r7}
 800701c:	b085      	sub	sp, #20
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007028:	b29b      	uxth	r3, r3
 800702a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800702c:	68fb      	ldr	r3, [r7, #12]
}
 800702e:	4618      	mov	r0, r3
 8007030:	3714      	adds	r7, #20
 8007032:	46bd      	mov	sp, r7
 8007034:	bc80      	pop	{r7}
 8007036:	4770      	bx	lr

08007038 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	bc80      	pop	{r7}
 800704c:	4770      	bx	lr

0800704e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800704e:	b480      	push	{r7}
 8007050:	b08b      	sub	sp, #44	@ 0x2c
 8007052:	af00      	add	r7, sp, #0
 8007054:	60f8      	str	r0, [r7, #12]
 8007056:	60b9      	str	r1, [r7, #8]
 8007058:	4611      	mov	r1, r2
 800705a:	461a      	mov	r2, r3
 800705c:	460b      	mov	r3, r1
 800705e:	80fb      	strh	r3, [r7, #6]
 8007060:	4613      	mov	r3, r2
 8007062:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007064:	88bb      	ldrh	r3, [r7, #4]
 8007066:	3301      	adds	r3, #1
 8007068:	085b      	lsrs	r3, r3, #1
 800706a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007074:	88fb      	ldrh	r3, [r7, #6]
 8007076:	005a      	lsls	r2, r3, #1
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	4413      	add	r3, r2
 800707c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007080:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	627b      	str	r3, [r7, #36]	@ 0x24
 8007086:	e01f      	b.n	80070c8 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800708e:	69fb      	ldr	r3, [r7, #28]
 8007090:	3301      	adds	r3, #1
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	b21b      	sxth	r3, r3
 8007096:	021b      	lsls	r3, r3, #8
 8007098:	b21a      	sxth	r2, r3
 800709a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800709e:	4313      	orrs	r3, r2
 80070a0:	b21b      	sxth	r3, r3
 80070a2:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80070a4:	6a3b      	ldr	r3, [r7, #32]
 80070a6:	8a7a      	ldrh	r2, [r7, #18]
 80070a8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80070aa:	6a3b      	ldr	r3, [r7, #32]
 80070ac:	3302      	adds	r3, #2
 80070ae:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80070b0:	6a3b      	ldr	r3, [r7, #32]
 80070b2:	3302      	adds	r3, #2
 80070b4:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	3301      	adds	r3, #1
 80070ba:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	3301      	adds	r3, #1
 80070c0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80070c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c4:	3b01      	subs	r3, #1
 80070c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80070c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d1dc      	bne.n	8007088 <USB_WritePMA+0x3a>
  }
}
 80070ce:	bf00      	nop
 80070d0:	bf00      	nop
 80070d2:	372c      	adds	r7, #44	@ 0x2c
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bc80      	pop	{r7}
 80070d8:	4770      	bx	lr

080070da <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80070da:	b480      	push	{r7}
 80070dc:	b08b      	sub	sp, #44	@ 0x2c
 80070de:	af00      	add	r7, sp, #0
 80070e0:	60f8      	str	r0, [r7, #12]
 80070e2:	60b9      	str	r1, [r7, #8]
 80070e4:	4611      	mov	r1, r2
 80070e6:	461a      	mov	r2, r3
 80070e8:	460b      	mov	r3, r1
 80070ea:	80fb      	strh	r3, [r7, #6]
 80070ec:	4613      	mov	r3, r2
 80070ee:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80070f0:	88bb      	ldrh	r3, [r7, #4]
 80070f2:	085b      	lsrs	r3, r3, #1
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007100:	88fb      	ldrh	r3, [r7, #6]
 8007102:	005a      	lsls	r2, r3, #1
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	4413      	add	r3, r2
 8007108:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800710c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	627b      	str	r3, [r7, #36]	@ 0x24
 8007112:	e01b      	b.n	800714c <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007114:	6a3b      	ldr	r3, [r7, #32]
 8007116:	881b      	ldrh	r3, [r3, #0]
 8007118:	b29b      	uxth	r3, r3
 800711a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800711c:	6a3b      	ldr	r3, [r7, #32]
 800711e:	3302      	adds	r3, #2
 8007120:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	b2da      	uxtb	r2, r3
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	3301      	adds	r3, #1
 800712e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	0a1b      	lsrs	r3, r3, #8
 8007134:	b2da      	uxtb	r2, r3
 8007136:	69fb      	ldr	r3, [r7, #28]
 8007138:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	3301      	adds	r3, #1
 800713e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007140:	6a3b      	ldr	r3, [r7, #32]
 8007142:	3302      	adds	r3, #2
 8007144:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007148:	3b01      	subs	r3, #1
 800714a:	627b      	str	r3, [r7, #36]	@ 0x24
 800714c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800714e:	2b00      	cmp	r3, #0
 8007150:	d1e0      	bne.n	8007114 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007152:	88bb      	ldrh	r3, [r7, #4]
 8007154:	f003 0301 	and.w	r3, r3, #1
 8007158:	b29b      	uxth	r3, r3
 800715a:	2b00      	cmp	r3, #0
 800715c:	d007      	beq.n	800716e <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800715e:	6a3b      	ldr	r3, [r7, #32]
 8007160:	881b      	ldrh	r3, [r3, #0]
 8007162:	b29b      	uxth	r3, r3
 8007164:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	b2da      	uxtb	r2, r3
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	701a      	strb	r2, [r3, #0]
  }
}
 800716e:	bf00      	nop
 8007170:	372c      	adds	r7, #44	@ 0x2c
 8007172:	46bd      	mov	sp, r7
 8007174:	bc80      	pop	{r7}
 8007176:	4770      	bx	lr

08007178 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	460b      	mov	r3, r1
 8007182:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007184:	2300      	movs	r3, #0
 8007186:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	7c1b      	ldrb	r3, [r3, #16]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d115      	bne.n	80071bc <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007190:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007194:	2202      	movs	r2, #2
 8007196:	2181      	movs	r1, #129	@ 0x81
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f001 feaa 	bl	8008ef2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2201      	movs	r2, #1
 80071a2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80071a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80071a8:	2202      	movs	r2, #2
 80071aa:	2101      	movs	r1, #1
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f001 fea0 	bl	8008ef2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2201      	movs	r2, #1
 80071b6:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 80071ba:	e012      	b.n	80071e2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80071bc:	2340      	movs	r3, #64	@ 0x40
 80071be:	2202      	movs	r2, #2
 80071c0:	2181      	movs	r1, #129	@ 0x81
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f001 fe95 	bl	8008ef2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2201      	movs	r2, #1
 80071cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80071ce:	2340      	movs	r3, #64	@ 0x40
 80071d0:	2202      	movs	r2, #2
 80071d2:	2101      	movs	r1, #1
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f001 fe8c 	bl	8008ef2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2201      	movs	r2, #1
 80071de:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80071e2:	2308      	movs	r3, #8
 80071e4:	2203      	movs	r2, #3
 80071e6:	2182      	movs	r1, #130	@ 0x82
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f001 fe82 	bl	8008ef2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2201      	movs	r2, #1
 80071f2:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80071f4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80071f8:	f001 ffa2 	bl	8009140 <USBD_static_malloc>
 80071fc:	4602      	mov	r2, r0
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800720a:	2b00      	cmp	r3, #0
 800720c:	d102      	bne.n	8007214 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800720e:	2301      	movs	r3, #1
 8007210:	73fb      	strb	r3, [r7, #15]
 8007212:	e026      	b.n	8007262 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800721a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	2200      	movs	r2, #0
 800722a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	2200      	movs	r2, #0
 8007232:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	7c1b      	ldrb	r3, [r3, #16]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d109      	bne.n	8007252 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007244:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007248:	2101      	movs	r1, #1
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f001 ff41 	bl	80090d2 <USBD_LL_PrepareReceive>
 8007250:	e007      	b.n	8007262 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007258:	2340      	movs	r3, #64	@ 0x40
 800725a:	2101      	movs	r1, #1
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f001 ff38 	bl	80090d2 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007262:	7bfb      	ldrb	r3, [r7, #15]
}
 8007264:	4618      	mov	r0, r3
 8007266:	3710      	adds	r7, #16
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	460b      	mov	r3, r1
 8007276:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007278:	2300      	movs	r3, #0
 800727a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800727c:	2181      	movs	r1, #129	@ 0x81
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f001 fe5d 	bl	8008f3e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800728a:	2101      	movs	r1, #1
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f001 fe56 	bl	8008f3e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800729a:	2182      	movs	r1, #130	@ 0x82
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f001 fe4e 	bl	8008f3e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00e      	beq.n	80072d0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072c2:	4618      	mov	r0, r3
 80072c4:	f001 ff48 	bl	8009158 <USBD_static_free>
    pdev->pClassData = NULL;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 80072d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}

080072da <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80072da:	b580      	push	{r7, lr}
 80072dc:	b086      	sub	sp, #24
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
 80072e2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072ea:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80072ec:	2300      	movs	r3, #0
 80072ee:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80072f0:	2300      	movs	r3, #0
 80072f2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80072f4:	2300      	movs	r3, #0
 80072f6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007300:	2b00      	cmp	r3, #0
 8007302:	d039      	beq.n	8007378 <USBD_CDC_Setup+0x9e>
 8007304:	2b20      	cmp	r3, #32
 8007306:	d17f      	bne.n	8007408 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	88db      	ldrh	r3, [r3, #6]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d029      	beq.n	8007364 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	b25b      	sxtb	r3, r3
 8007316:	2b00      	cmp	r3, #0
 8007318:	da11      	bge.n	800733e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	683a      	ldr	r2, [r7, #0]
 8007324:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007326:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007328:	683a      	ldr	r2, [r7, #0]
 800732a:	88d2      	ldrh	r2, [r2, #6]
 800732c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800732e:	6939      	ldr	r1, [r7, #16]
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	88db      	ldrh	r3, [r3, #6]
 8007334:	461a      	mov	r2, r3
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f001 fa20 	bl	800877c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800733c:	e06b      	b.n	8007416 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	785a      	ldrb	r2, [r3, #1]
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	88db      	ldrh	r3, [r3, #6]
 800734c:	b2da      	uxtb	r2, r3
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007354:	6939      	ldr	r1, [r7, #16]
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	88db      	ldrh	r3, [r3, #6]
 800735a:	461a      	mov	r2, r3
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f001 fa3b 	bl	80087d8 <USBD_CtlPrepareRx>
      break;
 8007362:	e058      	b.n	8007416 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	683a      	ldr	r2, [r7, #0]
 800736e:	7850      	ldrb	r0, [r2, #1]
 8007370:	2200      	movs	r2, #0
 8007372:	6839      	ldr	r1, [r7, #0]
 8007374:	4798      	blx	r3
      break;
 8007376:	e04e      	b.n	8007416 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	785b      	ldrb	r3, [r3, #1]
 800737c:	2b0b      	cmp	r3, #11
 800737e:	d02e      	beq.n	80073de <USBD_CDC_Setup+0x104>
 8007380:	2b0b      	cmp	r3, #11
 8007382:	dc38      	bgt.n	80073f6 <USBD_CDC_Setup+0x11c>
 8007384:	2b00      	cmp	r3, #0
 8007386:	d002      	beq.n	800738e <USBD_CDC_Setup+0xb4>
 8007388:	2b0a      	cmp	r3, #10
 800738a:	d014      	beq.n	80073b6 <USBD_CDC_Setup+0xdc>
 800738c:	e033      	b.n	80073f6 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007394:	2b03      	cmp	r3, #3
 8007396:	d107      	bne.n	80073a8 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007398:	f107 030c 	add.w	r3, r7, #12
 800739c:	2202      	movs	r2, #2
 800739e:	4619      	mov	r1, r3
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f001 f9eb 	bl	800877c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80073a6:	e02e      	b.n	8007406 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80073a8:	6839      	ldr	r1, [r7, #0]
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f001 f97c 	bl	80086a8 <USBD_CtlError>
            ret = USBD_FAIL;
 80073b0:	2302      	movs	r3, #2
 80073b2:	75fb      	strb	r3, [r7, #23]
          break;
 80073b4:	e027      	b.n	8007406 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073bc:	2b03      	cmp	r3, #3
 80073be:	d107      	bne.n	80073d0 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80073c0:	f107 030f 	add.w	r3, r7, #15
 80073c4:	2201      	movs	r2, #1
 80073c6:	4619      	mov	r1, r3
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f001 f9d7 	bl	800877c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80073ce:	e01a      	b.n	8007406 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80073d0:	6839      	ldr	r1, [r7, #0]
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f001 f968 	bl	80086a8 <USBD_CtlError>
            ret = USBD_FAIL;
 80073d8:	2302      	movs	r3, #2
 80073da:	75fb      	strb	r3, [r7, #23]
          break;
 80073dc:	e013      	b.n	8007406 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073e4:	2b03      	cmp	r3, #3
 80073e6:	d00d      	beq.n	8007404 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80073e8:	6839      	ldr	r1, [r7, #0]
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f001 f95c 	bl	80086a8 <USBD_CtlError>
            ret = USBD_FAIL;
 80073f0:	2302      	movs	r3, #2
 80073f2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80073f4:	e006      	b.n	8007404 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80073f6:	6839      	ldr	r1, [r7, #0]
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f001 f955 	bl	80086a8 <USBD_CtlError>
          ret = USBD_FAIL;
 80073fe:	2302      	movs	r3, #2
 8007400:	75fb      	strb	r3, [r7, #23]
          break;
 8007402:	e000      	b.n	8007406 <USBD_CDC_Setup+0x12c>
          break;
 8007404:	bf00      	nop
      }
      break;
 8007406:	e006      	b.n	8007416 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007408:	6839      	ldr	r1, [r7, #0]
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f001 f94c 	bl	80086a8 <USBD_CtlError>
      ret = USBD_FAIL;
 8007410:	2302      	movs	r3, #2
 8007412:	75fb      	strb	r3, [r7, #23]
      break;
 8007414:	bf00      	nop
  }

  return ret;
 8007416:	7dfb      	ldrb	r3, [r7, #23]
}
 8007418:	4618      	mov	r0, r3
 800741a:	3718      	adds	r7, #24
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	460b      	mov	r3, r1
 800742a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007432:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800743a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007442:	2b00      	cmp	r3, #0
 8007444:	d03a      	beq.n	80074bc <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007446:	78fa      	ldrb	r2, [r7, #3]
 8007448:	6879      	ldr	r1, [r7, #4]
 800744a:	4613      	mov	r3, r2
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	4413      	add	r3, r2
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	440b      	add	r3, r1
 8007454:	331c      	adds	r3, #28
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d029      	beq.n	80074b0 <USBD_CDC_DataIn+0x90>
 800745c:	78fa      	ldrb	r2, [r7, #3]
 800745e:	6879      	ldr	r1, [r7, #4]
 8007460:	4613      	mov	r3, r2
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	4413      	add	r3, r2
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	440b      	add	r3, r1
 800746a:	331c      	adds	r3, #28
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	78f9      	ldrb	r1, [r7, #3]
 8007470:	68b8      	ldr	r0, [r7, #8]
 8007472:	460b      	mov	r3, r1
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	440b      	add	r3, r1
 8007478:	00db      	lsls	r3, r3, #3
 800747a:	4403      	add	r3, r0
 800747c:	3320      	adds	r3, #32
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	fbb2 f1f3 	udiv	r1, r2, r3
 8007484:	fb01 f303 	mul.w	r3, r1, r3
 8007488:	1ad3      	subs	r3, r2, r3
 800748a:	2b00      	cmp	r3, #0
 800748c:	d110      	bne.n	80074b0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800748e:	78fa      	ldrb	r2, [r7, #3]
 8007490:	6879      	ldr	r1, [r7, #4]
 8007492:	4613      	mov	r3, r2
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	4413      	add	r3, r2
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	440b      	add	r3, r1
 800749c:	331c      	adds	r3, #28
 800749e:	2200      	movs	r2, #0
 80074a0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80074a2:	78f9      	ldrb	r1, [r7, #3]
 80074a4:	2300      	movs	r3, #0
 80074a6:	2200      	movs	r2, #0
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f001 fdef 	bl	800908c <USBD_LL_Transmit>
 80074ae:	e003      	b.n	80074b8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 80074b8:	2300      	movs	r3, #0
 80074ba:	e000      	b.n	80074be <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80074bc:	2302      	movs	r3, #2
  }
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b084      	sub	sp, #16
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
 80074ce:	460b      	mov	r3, r1
 80074d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074d8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80074da:	78fb      	ldrb	r3, [r7, #3]
 80074dc:	4619      	mov	r1, r3
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f001 fe1a 	bl	8009118 <USBD_LL_GetRxDataSize>
 80074e4:	4602      	mov	r2, r0
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00d      	beq.n	8007512 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	68fa      	ldr	r2, [r7, #12]
 8007500:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007504:	68fa      	ldr	r2, [r7, #12]
 8007506:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800750a:	4611      	mov	r1, r2
 800750c:	4798      	blx	r3

    return USBD_OK;
 800750e:	2300      	movs	r3, #0
 8007510:	e000      	b.n	8007514 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007512:	2302      	movs	r3, #2
  }
}
 8007514:	4618      	mov	r0, r3
 8007516:	3710      	adds	r7, #16
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800752a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007532:	2b00      	cmp	r3, #0
 8007534:	d014      	beq.n	8007560 <USBD_CDC_EP0_RxReady+0x44>
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800753c:	2bff      	cmp	r3, #255	@ 0xff
 800753e:	d00f      	beq.n	8007560 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800754e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007556:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	22ff      	movs	r2, #255	@ 0xff
 800755c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	3710      	adds	r7, #16
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
	...

0800756c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2243      	movs	r2, #67	@ 0x43
 8007578:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800757a:	4b03      	ldr	r3, [pc, #12]	@ (8007588 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800757c:	4618      	mov	r0, r3
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	bc80      	pop	{r7}
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	20000094 	.word	0x20000094

0800758c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2243      	movs	r2, #67	@ 0x43
 8007598:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800759a:	4b03      	ldr	r3, [pc, #12]	@ (80075a8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800759c:	4618      	mov	r0, r3
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bc80      	pop	{r7}
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	20000050 	.word	0x20000050

080075ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2243      	movs	r2, #67	@ 0x43
 80075b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80075ba:	4b03      	ldr	r3, [pc, #12]	@ (80075c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80075bc:	4618      	mov	r0, r3
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bc80      	pop	{r7}
 80075c4:	4770      	bx	lr
 80075c6:	bf00      	nop
 80075c8:	200000d8 	.word	0x200000d8

080075cc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	220a      	movs	r2, #10
 80075d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80075da:	4b03      	ldr	r3, [pc, #12]	@ (80075e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80075dc:	4618      	mov	r0, r3
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bc80      	pop	{r7}
 80075e4:	4770      	bx	lr
 80075e6:	bf00      	nop
 80075e8:	2000000c 	.word	0x2000000c

080075ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b085      	sub	sp, #20
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80075f6:	2302      	movs	r3, #2
 80075f8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d005      	beq.n	800760c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	683a      	ldr	r2, [r7, #0]
 8007604:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8007608:	2300      	movs	r3, #0
 800760a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800760c:	7bfb      	ldrb	r3, [r7, #15]
}
 800760e:	4618      	mov	r0, r3
 8007610:	3714      	adds	r7, #20
 8007612:	46bd      	mov	sp, r7
 8007614:	bc80      	pop	{r7}
 8007616:	4770      	bx	lr

08007618 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007618:	b480      	push	{r7}
 800761a:	b087      	sub	sp, #28
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	4613      	mov	r3, r2
 8007624:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800762c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	68ba      	ldr	r2, [r7, #8]
 8007632:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007636:	88fa      	ldrh	r2, [r7, #6]
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800763e:	2300      	movs	r3, #0
}
 8007640:	4618      	mov	r0, r3
 8007642:	371c      	adds	r7, #28
 8007644:	46bd      	mov	sp, r7
 8007646:	bc80      	pop	{r7}
 8007648:	4770      	bx	lr

0800764a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800764a:	b480      	push	{r7}
 800764c:	b085      	sub	sp, #20
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
 8007652:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800765a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	683a      	ldr	r2, [r7, #0]
 8007660:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3714      	adds	r7, #20
 800766a:	46bd      	mov	sp, r7
 800766c:	bc80      	pop	{r7}
 800766e:	4770      	bx	lr

08007670 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800767e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007686:	2b00      	cmp	r3, #0
 8007688:	d01c      	beq.n	80076c4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007690:	2b00      	cmp	r3, #0
 8007692:	d115      	bne.n	80076c0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2201      	movs	r2, #1
 8007698:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	2181      	movs	r1, #129	@ 0x81
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f001 fce8 	bl	800908c <USBD_LL_Transmit>

      return USBD_OK;
 80076bc:	2300      	movs	r3, #0
 80076be:	e002      	b.n	80076c6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80076c0:	2301      	movs	r3, #1
 80076c2:	e000      	b.n	80076c6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80076c4:	2302      	movs	r3, #2
  }
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3710      	adds	r7, #16
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b084      	sub	sp, #16
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076dc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d017      	beq.n	8007718 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	7c1b      	ldrb	r3, [r3, #16]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d109      	bne.n	8007704 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80076f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80076fa:	2101      	movs	r1, #1
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f001 fce8 	bl	80090d2 <USBD_LL_PrepareReceive>
 8007702:	e007      	b.n	8007714 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800770a:	2340      	movs	r3, #64	@ 0x40
 800770c:	2101      	movs	r1, #1
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f001 fcdf 	bl	80090d2 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007714:	2300      	movs	r3, #0
 8007716:	e000      	b.n	800771a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007718:	2302      	movs	r3, #2
  }
}
 800771a:	4618      	mov	r0, r3
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
	...

08007724 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	4613      	mov	r3, r2
 8007730:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d10a      	bne.n	800774e <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8007738:	4814      	ldr	r0, [pc, #80]	@ (800778c <USBD_Init+0x68>)
 800773a:	f001 fe0f 	bl	800935c <iprintf>
 800773e:	4814      	ldr	r0, [pc, #80]	@ (8007790 <USBD_Init+0x6c>)
 8007740:	f001 fe0c 	bl	800935c <iprintf>
 8007744:	200a      	movs	r0, #10
 8007746:	f001 fe1b 	bl	8009380 <putchar>
#endif
    return USBD_FAIL;
 800774a:	2302      	movs	r3, #2
 800774c:	e01a      	b.n	8007784 <USBD_Init+0x60>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007754:	2b00      	cmp	r3, #0
 8007756:	d003      	beq.n	8007760 <USBD_Init+0x3c>
  {
    pdev->pClass = NULL;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2200      	movs	r2, #0
 800775c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d003      	beq.n	800776e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	68ba      	ldr	r2, [r7, #8]
 800776a:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2201      	movs	r2, #1
 8007772:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	79fa      	ldrb	r2, [r7, #7]
 800777a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800777c:	68f8      	ldr	r0, [r7, #12]
 800777e:	f001 fb43 	bl	8008e08 <USBD_LL_Init>

  return USBD_OK;
 8007782:	2300      	movs	r3, #0
}
 8007784:	4618      	mov	r0, r3
 8007786:	3710      	adds	r7, #16
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	0800a0dc 	.word	0x0800a0dc
 8007790:	0800a0e4 	.word	0x0800a0e4

08007794 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800779e:	2300      	movs	r3, #0
 80077a0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d006      	beq.n	80077b6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	683a      	ldr	r2, [r7, #0]
 80077ac:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80077b0:	2300      	movs	r3, #0
 80077b2:	73fb      	strb	r3, [r7, #15]
 80077b4:	e00a      	b.n	80077cc <USBD_RegisterClass+0x38>
  }
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 80077b6:	4808      	ldr	r0, [pc, #32]	@ (80077d8 <USBD_RegisterClass+0x44>)
 80077b8:	f001 fdd0 	bl	800935c <iprintf>
 80077bc:	4807      	ldr	r0, [pc, #28]	@ (80077dc <USBD_RegisterClass+0x48>)
 80077be:	f001 fdcd 	bl	800935c <iprintf>
 80077c2:	200a      	movs	r0, #10
 80077c4:	f001 fddc 	bl	8009380 <putchar>
#endif
    status = USBD_FAIL;
 80077c8:	2302      	movs	r3, #2
 80077ca:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80077cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3710      	adds	r7, #16
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	0800a0dc 	.word	0x0800a0dc
 80077dc:	0800a0fc 	.word	0x0800a0fc

080077e0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f001 fb67 	bl	8008ebc <USBD_LL_Start>

  return USBD_OK;
 80077ee:	2300      	movs	r3, #0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3708      	adds	r7, #8
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	370c      	adds	r7, #12
 8007806:	46bd      	mov	sp, r7
 8007808:	bc80      	pop	{r7}
 800780a:	4770      	bx	lr

0800780c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	460b      	mov	r3, r1
 8007816:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007818:	2302      	movs	r3, #2
 800781a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00c      	beq.n	8007840 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	78fa      	ldrb	r2, [r7, #3]
 8007830:	4611      	mov	r1, r2
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	4798      	blx	r3
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d101      	bne.n	8007840 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800783c:	2300      	movs	r3, #0
 800783e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007840:	7bfb      	ldrb	r3, [r7, #15]
}
 8007842:	4618      	mov	r0, r3
 8007844:	3710      	adds	r7, #16
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}

0800784a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800784a:	b580      	push	{r7, lr}
 800784c:	b082      	sub	sp, #8
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
 8007852:	460b      	mov	r3, r1
 8007854:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	78fa      	ldrb	r2, [r7, #3]
 8007860:	4611      	mov	r1, r2
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	4798      	blx	r3

  return USBD_OK;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	3708      	adds	r7, #8
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007880:	6839      	ldr	r1, [r7, #0]
 8007882:	4618      	mov	r0, r3
 8007884:	f000 fed7 	bl	8008636 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007896:	461a      	mov	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80078a4:	f003 031f 	and.w	r3, r3, #31
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	d016      	beq.n	80078da <USBD_LL_SetupStage+0x6a>
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	d81c      	bhi.n	80078ea <USBD_LL_SetupStage+0x7a>
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d002      	beq.n	80078ba <USBD_LL_SetupStage+0x4a>
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d008      	beq.n	80078ca <USBD_LL_SetupStage+0x5a>
 80078b8:	e017      	b.n	80078ea <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80078c0:	4619      	mov	r1, r3
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 f9ca 	bl	8007c5c <USBD_StdDevReq>
      break;
 80078c8:	e01a      	b.n	8007900 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80078d0:	4619      	mov	r1, r3
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 fa2c 	bl	8007d30 <USBD_StdItfReq>
      break;
 80078d8:	e012      	b.n	8007900 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80078e0:	4619      	mov	r1, r3
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 fa6c 	bl	8007dc0 <USBD_StdEPReq>
      break;
 80078e8:	e00a      	b.n	8007900 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80078f0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	4619      	mov	r1, r3
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f001 fb3f 	bl	8008f7c <USBD_LL_StallEP>
      break;
 80078fe:	bf00      	nop
  }

  return USBD_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3708      	adds	r7, #8
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}

0800790a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b086      	sub	sp, #24
 800790e:	af00      	add	r7, sp, #0
 8007910:	60f8      	str	r0, [r7, #12]
 8007912:	460b      	mov	r3, r1
 8007914:	607a      	str	r2, [r7, #4]
 8007916:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007918:	7afb      	ldrb	r3, [r7, #11]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d14b      	bne.n	80079b6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007924:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800792c:	2b03      	cmp	r3, #3
 800792e:	d134      	bne.n	800799a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	68da      	ldr	r2, [r3, #12]
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	429a      	cmp	r2, r3
 800793a:	d919      	bls.n	8007970 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	68da      	ldr	r2, [r3, #12]
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	691b      	ldr	r3, [r3, #16]
 8007944:	1ad2      	subs	r2, r2, r3
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	68da      	ldr	r2, [r3, #12]
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007952:	429a      	cmp	r2, r3
 8007954:	d203      	bcs.n	800795e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800795a:	b29b      	uxth	r3, r3
 800795c:	e002      	b.n	8007964 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007962:	b29b      	uxth	r3, r3
 8007964:	461a      	mov	r2, r3
 8007966:	6879      	ldr	r1, [r7, #4]
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	f000 ff53 	bl	8008814 <USBD_CtlContinueRx>
 800796e:	e038      	b.n	80079e2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007976:	691b      	ldr	r3, [r3, #16]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d00a      	beq.n	8007992 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007982:	2b03      	cmp	r3, #3
 8007984:	d105      	bne.n	8007992 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	68f8      	ldr	r0, [r7, #12]
 8007990:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007992:	68f8      	ldr	r0, [r7, #12]
 8007994:	f000 ff50 	bl	8008838 <USBD_CtlSendStatus>
 8007998:	e023      	b.n	80079e2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80079a0:	2b05      	cmp	r3, #5
 80079a2:	d11e      	bne.n	80079e2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80079ac:	2100      	movs	r1, #0
 80079ae:	68f8      	ldr	r0, [r7, #12]
 80079b0:	f001 fae4 	bl	8008f7c <USBD_LL_StallEP>
 80079b4:	e015      	b.n	80079e2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079bc:	699b      	ldr	r3, [r3, #24]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00d      	beq.n	80079de <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80079c8:	2b03      	cmp	r3, #3
 80079ca:	d108      	bne.n	80079de <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079d2:	699b      	ldr	r3, [r3, #24]
 80079d4:	7afa      	ldrb	r2, [r7, #11]
 80079d6:	4611      	mov	r1, r2
 80079d8:	68f8      	ldr	r0, [r7, #12]
 80079da:	4798      	blx	r3
 80079dc:	e001      	b.n	80079e2 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80079de:	2302      	movs	r3, #2
 80079e0:	e000      	b.n	80079e4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3718      	adds	r7, #24
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b086      	sub	sp, #24
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	460b      	mov	r3, r1
 80079f6:	607a      	str	r2, [r7, #4]
 80079f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80079fa:	7afb      	ldrb	r3, [r7, #11]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d17f      	bne.n	8007b00 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	3314      	adds	r3, #20
 8007a04:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007a0c:	2b02      	cmp	r3, #2
 8007a0e:	d15c      	bne.n	8007aca <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	68da      	ldr	r2, [r3, #12]
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	691b      	ldr	r3, [r3, #16]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d915      	bls.n	8007a48 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	68da      	ldr	r2, [r3, #12]
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	691b      	ldr	r3, [r3, #16]
 8007a24:	1ad2      	subs	r2, r2, r3
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	461a      	mov	r2, r3
 8007a32:	6879      	ldr	r1, [r7, #4]
 8007a34:	68f8      	ldr	r0, [r7, #12]
 8007a36:	f000 febd 	bl	80087b4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	2100      	movs	r1, #0
 8007a40:	68f8      	ldr	r0, [r7, #12]
 8007a42:	f001 fb46 	bl	80090d2 <USBD_LL_PrepareReceive>
 8007a46:	e04e      	b.n	8007ae6 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	697a      	ldr	r2, [r7, #20]
 8007a4e:	6912      	ldr	r2, [r2, #16]
 8007a50:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a54:	fb01 f202 	mul.w	r2, r1, r2
 8007a58:	1a9b      	subs	r3, r3, r2
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d11c      	bne.n	8007a98 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	689a      	ldr	r2, [r3, #8]
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d316      	bcc.n	8007a98 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	689a      	ldr	r2, [r3, #8]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d20f      	bcs.n	8007a98 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007a78:	2200      	movs	r2, #0
 8007a7a:	2100      	movs	r1, #0
 8007a7c:	68f8      	ldr	r0, [r7, #12]
 8007a7e:	f000 fe99 	bl	80087b4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	2100      	movs	r1, #0
 8007a90:	68f8      	ldr	r0, [r7, #12]
 8007a92:	f001 fb1e 	bl	80090d2 <USBD_LL_PrepareReceive>
 8007a96:	e026      	b.n	8007ae6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d00a      	beq.n	8007aba <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007aaa:	2b03      	cmp	r3, #3
 8007aac:	d105      	bne.n	8007aba <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007aba:	2180      	movs	r1, #128	@ 0x80
 8007abc:	68f8      	ldr	r0, [r7, #12]
 8007abe:	f001 fa5d 	bl	8008f7c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007ac2:	68f8      	ldr	r0, [r7, #12]
 8007ac4:	f000 fecb 	bl	800885e <USBD_CtlReceiveStatus>
 8007ac8:	e00d      	b.n	8007ae6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007ad0:	2b04      	cmp	r3, #4
 8007ad2:	d004      	beq.n	8007ade <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d103      	bne.n	8007ae6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007ade:	2180      	movs	r1, #128	@ 0x80
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f001 fa4b 	bl	8008f7c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d11d      	bne.n	8007b2c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	f7ff fe81 	bl	80077f8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007afe:	e015      	b.n	8007b2c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b06:	695b      	ldr	r3, [r3, #20]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00d      	beq.n	8007b28 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007b12:	2b03      	cmp	r3, #3
 8007b14:	d108      	bne.n	8007b28 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b1c:	695b      	ldr	r3, [r3, #20]
 8007b1e:	7afa      	ldrb	r2, [r7, #11]
 8007b20:	4611      	mov	r1, r2
 8007b22:	68f8      	ldr	r0, [r7, #12]
 8007b24:	4798      	blx	r3
 8007b26:	e001      	b.n	8007b2c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007b28:	2302      	movs	r3, #2
 8007b2a:	e000      	b.n	8007b2e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3718      	adds	r7, #24
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b082      	sub	sp, #8
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007b3e:	2340      	movs	r3, #64	@ 0x40
 8007b40:	2200      	movs	r2, #0
 8007b42:	2100      	movs	r1, #0
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f001 f9d4 	bl	8008ef2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2240      	movs	r2, #64	@ 0x40
 8007b56:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007b5a:	2340      	movs	r3, #64	@ 0x40
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	2180      	movs	r1, #128	@ 0x80
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f001 f9c6 	bl	8008ef2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2240      	movs	r2, #64	@ 0x40
 8007b70:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2201      	movs	r2, #1
 8007b76:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d009      	beq.n	8007bae <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	6852      	ldr	r2, [r2, #4]
 8007ba6:	b2d2      	uxtb	r2, r2
 8007ba8:	4611      	mov	r1, r2
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	4798      	blx	r3
  }

  return USBD_OK;
 8007bae:	2300      	movs	r3, #0
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3708      	adds	r7, #8
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	78fa      	ldrb	r2, [r7, #3]
 8007bc8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007bca:	2300      	movs	r3, #0
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	370c      	adds	r7, #12
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bc80      	pop	{r7}
 8007bd4:	4770      	bx	lr

08007bd6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007bd6:	b480      	push	{r7}
 8007bd8:	b083      	sub	sp, #12
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2204      	movs	r2, #4
 8007bee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007bf2:	2300      	movs	r3, #0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bc80      	pop	{r7}
 8007bfc:	4770      	bx	lr

08007bfe <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007bfe:	b480      	push	{r7}
 8007c00:	b083      	sub	sp, #12
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c0c:	2b04      	cmp	r3, #4
 8007c0e:	d105      	bne.n	8007c1c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	370c      	adds	r7, #12
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bc80      	pop	{r7}
 8007c26:	4770      	bx	lr

08007c28 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b082      	sub	sp, #8
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c36:	2b03      	cmp	r3, #3
 8007c38:	d10b      	bne.n	8007c52 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c40:	69db      	ldr	r3, [r3, #28]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d005      	beq.n	8007c52 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c4c:	69db      	ldr	r3, [r3, #28]
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007c52:	2300      	movs	r3, #0
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3708      	adds	r7, #8
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c66:	2300      	movs	r3, #0
 8007c68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007c72:	2b40      	cmp	r3, #64	@ 0x40
 8007c74:	d005      	beq.n	8007c82 <USBD_StdDevReq+0x26>
 8007c76:	2b40      	cmp	r3, #64	@ 0x40
 8007c78:	d84f      	bhi.n	8007d1a <USBD_StdDevReq+0xbe>
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d009      	beq.n	8007c92 <USBD_StdDevReq+0x36>
 8007c7e:	2b20      	cmp	r3, #32
 8007c80:	d14b      	bne.n	8007d1a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	6839      	ldr	r1, [r7, #0]
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	4798      	blx	r3
      break;
 8007c90:	e048      	b.n	8007d24 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	785b      	ldrb	r3, [r3, #1]
 8007c96:	2b09      	cmp	r3, #9
 8007c98:	d839      	bhi.n	8007d0e <USBD_StdDevReq+0xb2>
 8007c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8007ca0 <USBD_StdDevReq+0x44>)
 8007c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca0:	08007cf1 	.word	0x08007cf1
 8007ca4:	08007d05 	.word	0x08007d05
 8007ca8:	08007d0f 	.word	0x08007d0f
 8007cac:	08007cfb 	.word	0x08007cfb
 8007cb0:	08007d0f 	.word	0x08007d0f
 8007cb4:	08007cd3 	.word	0x08007cd3
 8007cb8:	08007cc9 	.word	0x08007cc9
 8007cbc:	08007d0f 	.word	0x08007d0f
 8007cc0:	08007ce7 	.word	0x08007ce7
 8007cc4:	08007cdd 	.word	0x08007cdd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007cc8:	6839      	ldr	r1, [r7, #0]
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f9dc 	bl	8008088 <USBD_GetDescriptor>
          break;
 8007cd0:	e022      	b.n	8007d18 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007cd2:	6839      	ldr	r1, [r7, #0]
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 fb3f 	bl	8008358 <USBD_SetAddress>
          break;
 8007cda:	e01d      	b.n	8007d18 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007cdc:	6839      	ldr	r1, [r7, #0]
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 fb7e 	bl	80083e0 <USBD_SetConfig>
          break;
 8007ce4:	e018      	b.n	8007d18 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007ce6:	6839      	ldr	r1, [r7, #0]
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 fc07 	bl	80084fc <USBD_GetConfig>
          break;
 8007cee:	e013      	b.n	8007d18 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007cf0:	6839      	ldr	r1, [r7, #0]
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 fc37 	bl	8008566 <USBD_GetStatus>
          break;
 8007cf8:	e00e      	b.n	8007d18 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007cfa:	6839      	ldr	r1, [r7, #0]
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 fc65 	bl	80085cc <USBD_SetFeature>
          break;
 8007d02:	e009      	b.n	8007d18 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007d04:	6839      	ldr	r1, [r7, #0]
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 fc74 	bl	80085f4 <USBD_ClrFeature>
          break;
 8007d0c:	e004      	b.n	8007d18 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007d0e:	6839      	ldr	r1, [r7, #0]
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 fcc9 	bl	80086a8 <USBD_CtlError>
          break;
 8007d16:	bf00      	nop
      }
      break;
 8007d18:	e004      	b.n	8007d24 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007d1a:	6839      	ldr	r1, [r7, #0]
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 fcc3 	bl	80086a8 <USBD_CtlError>
      break;
 8007d22:	bf00      	nop
  }

  return ret;
 8007d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop

08007d30 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007d46:	2b40      	cmp	r3, #64	@ 0x40
 8007d48:	d005      	beq.n	8007d56 <USBD_StdItfReq+0x26>
 8007d4a:	2b40      	cmp	r3, #64	@ 0x40
 8007d4c:	d82e      	bhi.n	8007dac <USBD_StdItfReq+0x7c>
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d001      	beq.n	8007d56 <USBD_StdItfReq+0x26>
 8007d52:	2b20      	cmp	r3, #32
 8007d54:	d12a      	bne.n	8007dac <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d5c:	3b01      	subs	r3, #1
 8007d5e:	2b02      	cmp	r3, #2
 8007d60:	d81d      	bhi.n	8007d9e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	889b      	ldrh	r3, [r3, #4]
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d813      	bhi.n	8007d94 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	6839      	ldr	r1, [r7, #0]
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	4798      	blx	r3
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	88db      	ldrh	r3, [r3, #6]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d110      	bne.n	8007da8 <USBD_StdItfReq+0x78>
 8007d86:	7bfb      	ldrb	r3, [r7, #15]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d10d      	bne.n	8007da8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 fd53 	bl	8008838 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007d92:	e009      	b.n	8007da8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007d94:	6839      	ldr	r1, [r7, #0]
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 fc86 	bl	80086a8 <USBD_CtlError>
          break;
 8007d9c:	e004      	b.n	8007da8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007d9e:	6839      	ldr	r1, [r7, #0]
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 fc81 	bl	80086a8 <USBD_CtlError>
          break;
 8007da6:	e000      	b.n	8007daa <USBD_StdItfReq+0x7a>
          break;
 8007da8:	bf00      	nop
      }
      break;
 8007daa:	e004      	b.n	8007db6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007dac:	6839      	ldr	r1, [r7, #0]
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 fc7a 	bl	80086a8 <USBD_CtlError>
      break;
 8007db4:	bf00      	nop
  }

  return USBD_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3710      	adds	r7, #16
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	889b      	ldrh	r3, [r3, #4]
 8007dd2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007ddc:	2b40      	cmp	r3, #64	@ 0x40
 8007dde:	d007      	beq.n	8007df0 <USBD_StdEPReq+0x30>
 8007de0:	2b40      	cmp	r3, #64	@ 0x40
 8007de2:	f200 8146 	bhi.w	8008072 <USBD_StdEPReq+0x2b2>
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d00a      	beq.n	8007e00 <USBD_StdEPReq+0x40>
 8007dea:	2b20      	cmp	r3, #32
 8007dec:	f040 8141 	bne.w	8008072 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	6839      	ldr	r1, [r7, #0]
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	4798      	blx	r3
      break;
 8007dfe:	e13d      	b.n	800807c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007e08:	2b20      	cmp	r3, #32
 8007e0a:	d10a      	bne.n	8007e22 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	6839      	ldr	r1, [r7, #0]
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	4798      	blx	r3
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007e1e:	7bfb      	ldrb	r3, [r7, #15]
 8007e20:	e12d      	b.n	800807e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	785b      	ldrb	r3, [r3, #1]
 8007e26:	2b03      	cmp	r3, #3
 8007e28:	d007      	beq.n	8007e3a <USBD_StdEPReq+0x7a>
 8007e2a:	2b03      	cmp	r3, #3
 8007e2c:	f300 811b 	bgt.w	8008066 <USBD_StdEPReq+0x2a6>
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d072      	beq.n	8007f1a <USBD_StdEPReq+0x15a>
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d03a      	beq.n	8007eae <USBD_StdEPReq+0xee>
 8007e38:	e115      	b.n	8008066 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e40:	2b02      	cmp	r3, #2
 8007e42:	d002      	beq.n	8007e4a <USBD_StdEPReq+0x8a>
 8007e44:	2b03      	cmp	r3, #3
 8007e46:	d015      	beq.n	8007e74 <USBD_StdEPReq+0xb4>
 8007e48:	e02b      	b.n	8007ea2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e4a:	7bbb      	ldrb	r3, [r7, #14]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d00c      	beq.n	8007e6a <USBD_StdEPReq+0xaa>
 8007e50:	7bbb      	ldrb	r3, [r7, #14]
 8007e52:	2b80      	cmp	r3, #128	@ 0x80
 8007e54:	d009      	beq.n	8007e6a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007e56:	7bbb      	ldrb	r3, [r7, #14]
 8007e58:	4619      	mov	r1, r3
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f001 f88e 	bl	8008f7c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007e60:	2180      	movs	r1, #128	@ 0x80
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f001 f88a 	bl	8008f7c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e68:	e020      	b.n	8007eac <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007e6a:	6839      	ldr	r1, [r7, #0]
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 fc1b 	bl	80086a8 <USBD_CtlError>
              break;
 8007e72:	e01b      	b.n	8007eac <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	885b      	ldrh	r3, [r3, #2]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d10e      	bne.n	8007e9a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007e7c:	7bbb      	ldrb	r3, [r7, #14]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00b      	beq.n	8007e9a <USBD_StdEPReq+0xda>
 8007e82:	7bbb      	ldrb	r3, [r7, #14]
 8007e84:	2b80      	cmp	r3, #128	@ 0x80
 8007e86:	d008      	beq.n	8007e9a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	88db      	ldrh	r3, [r3, #6]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d104      	bne.n	8007e9a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007e90:	7bbb      	ldrb	r3, [r7, #14]
 8007e92:	4619      	mov	r1, r3
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f001 f871 	bl	8008f7c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 fccc 	bl	8008838 <USBD_CtlSendStatus>

              break;
 8007ea0:	e004      	b.n	8007eac <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007ea2:	6839      	ldr	r1, [r7, #0]
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 fbff 	bl	80086a8 <USBD_CtlError>
              break;
 8007eaa:	bf00      	nop
          }
          break;
 8007eac:	e0e0      	b.n	8008070 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007eb4:	2b02      	cmp	r3, #2
 8007eb6:	d002      	beq.n	8007ebe <USBD_StdEPReq+0xfe>
 8007eb8:	2b03      	cmp	r3, #3
 8007eba:	d015      	beq.n	8007ee8 <USBD_StdEPReq+0x128>
 8007ebc:	e026      	b.n	8007f0c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ebe:	7bbb      	ldrb	r3, [r7, #14]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d00c      	beq.n	8007ede <USBD_StdEPReq+0x11e>
 8007ec4:	7bbb      	ldrb	r3, [r7, #14]
 8007ec6:	2b80      	cmp	r3, #128	@ 0x80
 8007ec8:	d009      	beq.n	8007ede <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007eca:	7bbb      	ldrb	r3, [r7, #14]
 8007ecc:	4619      	mov	r1, r3
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f001 f854 	bl	8008f7c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007ed4:	2180      	movs	r1, #128	@ 0x80
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f001 f850 	bl	8008f7c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007edc:	e01c      	b.n	8007f18 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007ede:	6839      	ldr	r1, [r7, #0]
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 fbe1 	bl	80086a8 <USBD_CtlError>
              break;
 8007ee6:	e017      	b.n	8007f18 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	885b      	ldrh	r3, [r3, #2]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d112      	bne.n	8007f16 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007ef0:	7bbb      	ldrb	r3, [r7, #14]
 8007ef2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d004      	beq.n	8007f04 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007efa:	7bbb      	ldrb	r3, [r7, #14]
 8007efc:	4619      	mov	r1, r3
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f001 f85b 	bl	8008fba <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 fc97 	bl	8008838 <USBD_CtlSendStatus>
              }
              break;
 8007f0a:	e004      	b.n	8007f16 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007f0c:	6839      	ldr	r1, [r7, #0]
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 fbca 	bl	80086a8 <USBD_CtlError>
              break;
 8007f14:	e000      	b.n	8007f18 <USBD_StdEPReq+0x158>
              break;
 8007f16:	bf00      	nop
          }
          break;
 8007f18:	e0aa      	b.n	8008070 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f20:	2b02      	cmp	r3, #2
 8007f22:	d002      	beq.n	8007f2a <USBD_StdEPReq+0x16a>
 8007f24:	2b03      	cmp	r3, #3
 8007f26:	d032      	beq.n	8007f8e <USBD_StdEPReq+0x1ce>
 8007f28:	e097      	b.n	800805a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f2a:	7bbb      	ldrb	r3, [r7, #14]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d007      	beq.n	8007f40 <USBD_StdEPReq+0x180>
 8007f30:	7bbb      	ldrb	r3, [r7, #14]
 8007f32:	2b80      	cmp	r3, #128	@ 0x80
 8007f34:	d004      	beq.n	8007f40 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007f36:	6839      	ldr	r1, [r7, #0]
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 fbb5 	bl	80086a8 <USBD_CtlError>
                break;
 8007f3e:	e091      	b.n	8008064 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	da0b      	bge.n	8007f60 <USBD_StdEPReq+0x1a0>
 8007f48:	7bbb      	ldrb	r3, [r7, #14]
 8007f4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f4e:	4613      	mov	r3, r2
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	4413      	add	r3, r2
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	3310      	adds	r3, #16
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	3304      	adds	r3, #4
 8007f5e:	e00b      	b.n	8007f78 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f60:	7bbb      	ldrb	r3, [r7, #14]
 8007f62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f66:	4613      	mov	r3, r2
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	4413      	add	r3, r2
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	4413      	add	r3, r2
 8007f76:	3304      	adds	r3, #4
 8007f78:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	2202      	movs	r2, #2
 8007f84:	4619      	mov	r1, r3
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 fbf8 	bl	800877c <USBD_CtlSendData>
              break;
 8007f8c:	e06a      	b.n	8008064 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007f8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	da11      	bge.n	8007fba <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007f96:	7bbb      	ldrb	r3, [r7, #14]
 8007f98:	f003 020f 	and.w	r2, r3, #15
 8007f9c:	6879      	ldr	r1, [r7, #4]
 8007f9e:	4613      	mov	r3, r2
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	4413      	add	r3, r2
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	440b      	add	r3, r1
 8007fa8:	3318      	adds	r3, #24
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d117      	bne.n	8007fe0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007fb0:	6839      	ldr	r1, [r7, #0]
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 fb78 	bl	80086a8 <USBD_CtlError>
                  break;
 8007fb8:	e054      	b.n	8008064 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007fba:	7bbb      	ldrb	r3, [r7, #14]
 8007fbc:	f003 020f 	and.w	r2, r3, #15
 8007fc0:	6879      	ldr	r1, [r7, #4]
 8007fc2:	4613      	mov	r3, r2
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	4413      	add	r3, r2
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	440b      	add	r3, r1
 8007fcc:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d104      	bne.n	8007fe0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007fd6:	6839      	ldr	r1, [r7, #0]
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 fb65 	bl	80086a8 <USBD_CtlError>
                  break;
 8007fde:	e041      	b.n	8008064 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fe0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	da0b      	bge.n	8008000 <USBD_StdEPReq+0x240>
 8007fe8:	7bbb      	ldrb	r3, [r7, #14]
 8007fea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007fee:	4613      	mov	r3, r2
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	4413      	add	r3, r2
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	3310      	adds	r3, #16
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	4413      	add	r3, r2
 8007ffc:	3304      	adds	r3, #4
 8007ffe:	e00b      	b.n	8008018 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008000:	7bbb      	ldrb	r3, [r7, #14]
 8008002:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008006:	4613      	mov	r3, r2
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	4413      	add	r3, r2
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	4413      	add	r3, r2
 8008016:	3304      	adds	r3, #4
 8008018:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800801a:	7bbb      	ldrb	r3, [r7, #14]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d002      	beq.n	8008026 <USBD_StdEPReq+0x266>
 8008020:	7bbb      	ldrb	r3, [r7, #14]
 8008022:	2b80      	cmp	r3, #128	@ 0x80
 8008024:	d103      	bne.n	800802e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	2200      	movs	r2, #0
 800802a:	601a      	str	r2, [r3, #0]
 800802c:	e00e      	b.n	800804c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800802e:	7bbb      	ldrb	r3, [r7, #14]
 8008030:	4619      	mov	r1, r3
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 ffe0 	bl	8008ff8 <USBD_LL_IsStallEP>
 8008038:	4603      	mov	r3, r0
 800803a:	2b00      	cmp	r3, #0
 800803c:	d003      	beq.n	8008046 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	2201      	movs	r2, #1
 8008042:	601a      	str	r2, [r3, #0]
 8008044:	e002      	b.n	800804c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	2200      	movs	r2, #0
 800804a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	2202      	movs	r2, #2
 8008050:	4619      	mov	r1, r3
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 fb92 	bl	800877c <USBD_CtlSendData>
              break;
 8008058:	e004      	b.n	8008064 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800805a:	6839      	ldr	r1, [r7, #0]
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 fb23 	bl	80086a8 <USBD_CtlError>
              break;
 8008062:	bf00      	nop
          }
          break;
 8008064:	e004      	b.n	8008070 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008066:	6839      	ldr	r1, [r7, #0]
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 fb1d 	bl	80086a8 <USBD_CtlError>
          break;
 800806e:	bf00      	nop
      }
      break;
 8008070:	e004      	b.n	800807c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008072:	6839      	ldr	r1, [r7, #0]
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 fb17 	bl	80086a8 <USBD_CtlError>
      break;
 800807a:	bf00      	nop
  }

  return ret;
 800807c:	7bfb      	ldrb	r3, [r7, #15]
}
 800807e:	4618      	mov	r0, r3
 8008080:	3710      	adds	r7, #16
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
	...

08008088 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008092:	2300      	movs	r3, #0
 8008094:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008096:	2300      	movs	r3, #0
 8008098:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800809a:	2300      	movs	r3, #0
 800809c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	885b      	ldrh	r3, [r3, #2]
 80080a2:	0a1b      	lsrs	r3, r3, #8
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	3b01      	subs	r3, #1
 80080a8:	2b06      	cmp	r3, #6
 80080aa:	f200 8128 	bhi.w	80082fe <USBD_GetDescriptor+0x276>
 80080ae:	a201      	add	r2, pc, #4	@ (adr r2, 80080b4 <USBD_GetDescriptor+0x2c>)
 80080b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b4:	080080d1 	.word	0x080080d1
 80080b8:	080080e9 	.word	0x080080e9
 80080bc:	08008129 	.word	0x08008129
 80080c0:	080082ff 	.word	0x080082ff
 80080c4:	080082ff 	.word	0x080082ff
 80080c8:	0800829f 	.word	0x0800829f
 80080cc:	080082cb 	.word	0x080082cb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	7c12      	ldrb	r2, [r2, #16]
 80080dc:	f107 0108 	add.w	r1, r7, #8
 80080e0:	4610      	mov	r0, r2
 80080e2:	4798      	blx	r3
 80080e4:	60f8      	str	r0, [r7, #12]
      break;
 80080e6:	e112      	b.n	800830e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	7c1b      	ldrb	r3, [r3, #16]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d10d      	bne.n	800810c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080f8:	f107 0208 	add.w	r2, r7, #8
 80080fc:	4610      	mov	r0, r2
 80080fe:	4798      	blx	r3
 8008100:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	3301      	adds	r3, #1
 8008106:	2202      	movs	r2, #2
 8008108:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800810a:	e100      	b.n	800830e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008114:	f107 0208 	add.w	r2, r7, #8
 8008118:	4610      	mov	r0, r2
 800811a:	4798      	blx	r3
 800811c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	3301      	adds	r3, #1
 8008122:	2202      	movs	r2, #2
 8008124:	701a      	strb	r2, [r3, #0]
      break;
 8008126:	e0f2      	b.n	800830e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	885b      	ldrh	r3, [r3, #2]
 800812c:	b2db      	uxtb	r3, r3
 800812e:	2b05      	cmp	r3, #5
 8008130:	f200 80ac 	bhi.w	800828c <USBD_GetDescriptor+0x204>
 8008134:	a201      	add	r2, pc, #4	@ (adr r2, 800813c <USBD_GetDescriptor+0xb4>)
 8008136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800813a:	bf00      	nop
 800813c:	08008155 	.word	0x08008155
 8008140:	08008189 	.word	0x08008189
 8008144:	080081bd 	.word	0x080081bd
 8008148:	080081f1 	.word	0x080081f1
 800814c:	08008225 	.word	0x08008225
 8008150:	08008259 	.word	0x08008259
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00b      	beq.n	8008178 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	7c12      	ldrb	r2, [r2, #16]
 800816c:	f107 0108 	add.w	r1, r7, #8
 8008170:	4610      	mov	r0, r2
 8008172:	4798      	blx	r3
 8008174:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008176:	e091      	b.n	800829c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008178:	6839      	ldr	r1, [r7, #0]
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 fa94 	bl	80086a8 <USBD_CtlError>
            err++;
 8008180:	7afb      	ldrb	r3, [r7, #11]
 8008182:	3301      	adds	r3, #1
 8008184:	72fb      	strb	r3, [r7, #11]
          break;
 8008186:	e089      	b.n	800829c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00b      	beq.n	80081ac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	7c12      	ldrb	r2, [r2, #16]
 80081a0:	f107 0108 	add.w	r1, r7, #8
 80081a4:	4610      	mov	r0, r2
 80081a6:	4798      	blx	r3
 80081a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081aa:	e077      	b.n	800829c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081ac:	6839      	ldr	r1, [r7, #0]
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 fa7a 	bl	80086a8 <USBD_CtlError>
            err++;
 80081b4:	7afb      	ldrb	r3, [r7, #11]
 80081b6:	3301      	adds	r3, #1
 80081b8:	72fb      	strb	r3, [r7, #11]
          break;
 80081ba:	e06f      	b.n	800829c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d00b      	beq.n	80081e0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80081ce:	68db      	ldr	r3, [r3, #12]
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	7c12      	ldrb	r2, [r2, #16]
 80081d4:	f107 0108 	add.w	r1, r7, #8
 80081d8:	4610      	mov	r0, r2
 80081da:	4798      	blx	r3
 80081dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081de:	e05d      	b.n	800829c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081e0:	6839      	ldr	r1, [r7, #0]
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 fa60 	bl	80086a8 <USBD_CtlError>
            err++;
 80081e8:	7afb      	ldrb	r3, [r7, #11]
 80081ea:	3301      	adds	r3, #1
 80081ec:	72fb      	strb	r3, [r7, #11]
          break;
 80081ee:	e055      	b.n	800829c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d00b      	beq.n	8008214 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008202:	691b      	ldr	r3, [r3, #16]
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	7c12      	ldrb	r2, [r2, #16]
 8008208:	f107 0108 	add.w	r1, r7, #8
 800820c:	4610      	mov	r0, r2
 800820e:	4798      	blx	r3
 8008210:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008212:	e043      	b.n	800829c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008214:	6839      	ldr	r1, [r7, #0]
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 fa46 	bl	80086a8 <USBD_CtlError>
            err++;
 800821c:	7afb      	ldrb	r3, [r7, #11]
 800821e:	3301      	adds	r3, #1
 8008220:	72fb      	strb	r3, [r7, #11]
          break;
 8008222:	e03b      	b.n	800829c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800822a:	695b      	ldr	r3, [r3, #20]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d00b      	beq.n	8008248 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008236:	695b      	ldr	r3, [r3, #20]
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	7c12      	ldrb	r2, [r2, #16]
 800823c:	f107 0108 	add.w	r1, r7, #8
 8008240:	4610      	mov	r0, r2
 8008242:	4798      	blx	r3
 8008244:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008246:	e029      	b.n	800829c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008248:	6839      	ldr	r1, [r7, #0]
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 fa2c 	bl	80086a8 <USBD_CtlError>
            err++;
 8008250:	7afb      	ldrb	r3, [r7, #11]
 8008252:	3301      	adds	r3, #1
 8008254:	72fb      	strb	r3, [r7, #11]
          break;
 8008256:	e021      	b.n	800829c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800825e:	699b      	ldr	r3, [r3, #24]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d00b      	beq.n	800827c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800826a:	699b      	ldr	r3, [r3, #24]
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	7c12      	ldrb	r2, [r2, #16]
 8008270:	f107 0108 	add.w	r1, r7, #8
 8008274:	4610      	mov	r0, r2
 8008276:	4798      	blx	r3
 8008278:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800827a:	e00f      	b.n	800829c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800827c:	6839      	ldr	r1, [r7, #0]
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 fa12 	bl	80086a8 <USBD_CtlError>
            err++;
 8008284:	7afb      	ldrb	r3, [r7, #11]
 8008286:	3301      	adds	r3, #1
 8008288:	72fb      	strb	r3, [r7, #11]
          break;
 800828a:	e007      	b.n	800829c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800828c:	6839      	ldr	r1, [r7, #0]
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 fa0a 	bl	80086a8 <USBD_CtlError>
          err++;
 8008294:	7afb      	ldrb	r3, [r7, #11]
 8008296:	3301      	adds	r3, #1
 8008298:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800829a:	e038      	b.n	800830e <USBD_GetDescriptor+0x286>
 800829c:	e037      	b.n	800830e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	7c1b      	ldrb	r3, [r3, #16]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d109      	bne.n	80082ba <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082ae:	f107 0208 	add.w	r2, r7, #8
 80082b2:	4610      	mov	r0, r2
 80082b4:	4798      	blx	r3
 80082b6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082b8:	e029      	b.n	800830e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80082ba:	6839      	ldr	r1, [r7, #0]
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 f9f3 	bl	80086a8 <USBD_CtlError>
        err++;
 80082c2:	7afb      	ldrb	r3, [r7, #11]
 80082c4:	3301      	adds	r3, #1
 80082c6:	72fb      	strb	r3, [r7, #11]
      break;
 80082c8:	e021      	b.n	800830e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	7c1b      	ldrb	r3, [r3, #16]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d10d      	bne.n	80082ee <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082da:	f107 0208 	add.w	r2, r7, #8
 80082de:	4610      	mov	r0, r2
 80082e0:	4798      	blx	r3
 80082e2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	3301      	adds	r3, #1
 80082e8:	2207      	movs	r2, #7
 80082ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082ec:	e00f      	b.n	800830e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80082ee:	6839      	ldr	r1, [r7, #0]
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 f9d9 	bl	80086a8 <USBD_CtlError>
        err++;
 80082f6:	7afb      	ldrb	r3, [r7, #11]
 80082f8:	3301      	adds	r3, #1
 80082fa:	72fb      	strb	r3, [r7, #11]
      break;
 80082fc:	e007      	b.n	800830e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80082fe:	6839      	ldr	r1, [r7, #0]
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 f9d1 	bl	80086a8 <USBD_CtlError>
      err++;
 8008306:	7afb      	ldrb	r3, [r7, #11]
 8008308:	3301      	adds	r3, #1
 800830a:	72fb      	strb	r3, [r7, #11]
      break;
 800830c:	bf00      	nop
  }

  if (err != 0U)
 800830e:	7afb      	ldrb	r3, [r7, #11]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d11c      	bne.n	800834e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008314:	893b      	ldrh	r3, [r7, #8]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d011      	beq.n	800833e <USBD_GetDescriptor+0x2b6>
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	88db      	ldrh	r3, [r3, #6]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d00d      	beq.n	800833e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	88da      	ldrh	r2, [r3, #6]
 8008326:	893b      	ldrh	r3, [r7, #8]
 8008328:	4293      	cmp	r3, r2
 800832a:	bf28      	it	cs
 800832c:	4613      	movcs	r3, r2
 800832e:	b29b      	uxth	r3, r3
 8008330:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008332:	893b      	ldrh	r3, [r7, #8]
 8008334:	461a      	mov	r2, r3
 8008336:	68f9      	ldr	r1, [r7, #12]
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 fa1f 	bl	800877c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	88db      	ldrh	r3, [r3, #6]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d104      	bne.n	8008350 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 fa76 	bl	8008838 <USBD_CtlSendStatus>
 800834c:	e000      	b.n	8008350 <USBD_GetDescriptor+0x2c8>
    return;
 800834e:	bf00      	nop
    }
  }
}
 8008350:	3710      	adds	r7, #16
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop

08008358 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	889b      	ldrh	r3, [r3, #4]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d130      	bne.n	80083cc <USBD_SetAddress+0x74>
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	88db      	ldrh	r3, [r3, #6]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d12c      	bne.n	80083cc <USBD_SetAddress+0x74>
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	885b      	ldrh	r3, [r3, #2]
 8008376:	2b7f      	cmp	r3, #127	@ 0x7f
 8008378:	d828      	bhi.n	80083cc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	885b      	ldrh	r3, [r3, #2]
 800837e:	b2db      	uxtb	r3, r3
 8008380:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008384:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800838c:	2b03      	cmp	r3, #3
 800838e:	d104      	bne.n	800839a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008390:	6839      	ldr	r1, [r7, #0]
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 f988 	bl	80086a8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008398:	e01d      	b.n	80083d6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	7bfa      	ldrb	r2, [r7, #15]
 800839e:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80083a2:	7bfb      	ldrb	r3, [r7, #15]
 80083a4:	4619      	mov	r1, r3
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 fe51 	bl	800904e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 fa43 	bl	8008838 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80083b2:	7bfb      	ldrb	r3, [r7, #15]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d004      	beq.n	80083c2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2202      	movs	r2, #2
 80083bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083c0:	e009      	b.n	80083d6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2201      	movs	r2, #1
 80083c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083ca:	e004      	b.n	80083d6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80083cc:	6839      	ldr	r1, [r7, #0]
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 f96a 	bl	80086a8 <USBD_CtlError>
  }
}
 80083d4:	bf00      	nop
 80083d6:	bf00      	nop
 80083d8:	3710      	adds	r7, #16
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
	...

080083e0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	885b      	ldrh	r3, [r3, #2]
 80083ee:	b2da      	uxtb	r2, r3
 80083f0:	4b41      	ldr	r3, [pc, #260]	@ (80084f8 <USBD_SetConfig+0x118>)
 80083f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80083f4:	4b40      	ldr	r3, [pc, #256]	@ (80084f8 <USBD_SetConfig+0x118>)
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d904      	bls.n	8008406 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80083fc:	6839      	ldr	r1, [r7, #0]
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 f952 	bl	80086a8 <USBD_CtlError>
 8008404:	e075      	b.n	80084f2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800840c:	2b02      	cmp	r3, #2
 800840e:	d002      	beq.n	8008416 <USBD_SetConfig+0x36>
 8008410:	2b03      	cmp	r3, #3
 8008412:	d023      	beq.n	800845c <USBD_SetConfig+0x7c>
 8008414:	e062      	b.n	80084dc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008416:	4b38      	ldr	r3, [pc, #224]	@ (80084f8 <USBD_SetConfig+0x118>)
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d01a      	beq.n	8008454 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800841e:	4b36      	ldr	r3, [pc, #216]	@ (80084f8 <USBD_SetConfig+0x118>)
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	461a      	mov	r2, r3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2203      	movs	r2, #3
 800842c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008430:	4b31      	ldr	r3, [pc, #196]	@ (80084f8 <USBD_SetConfig+0x118>)
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	4619      	mov	r1, r3
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f7ff f9e8 	bl	800780c <USBD_SetClassConfig>
 800843c:	4603      	mov	r3, r0
 800843e:	2b02      	cmp	r3, #2
 8008440:	d104      	bne.n	800844c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008442:	6839      	ldr	r1, [r7, #0]
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 f92f 	bl	80086a8 <USBD_CtlError>
            return;
 800844a:	e052      	b.n	80084f2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 f9f3 	bl	8008838 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008452:	e04e      	b.n	80084f2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f000 f9ef 	bl	8008838 <USBD_CtlSendStatus>
        break;
 800845a:	e04a      	b.n	80084f2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800845c:	4b26      	ldr	r3, [pc, #152]	@ (80084f8 <USBD_SetConfig+0x118>)
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d112      	bne.n	800848a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2202      	movs	r2, #2
 8008468:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800846c:	4b22      	ldr	r3, [pc, #136]	@ (80084f8 <USBD_SetConfig+0x118>)
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	461a      	mov	r2, r3
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008476:	4b20      	ldr	r3, [pc, #128]	@ (80084f8 <USBD_SetConfig+0x118>)
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	4619      	mov	r1, r3
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f7ff f9e4 	bl	800784a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 f9d8 	bl	8008838 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008488:	e033      	b.n	80084f2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800848a:	4b1b      	ldr	r3, [pc, #108]	@ (80084f8 <USBD_SetConfig+0x118>)
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	461a      	mov	r2, r3
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	429a      	cmp	r2, r3
 8008496:	d01d      	beq.n	80084d4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	b2db      	uxtb	r3, r3
 800849e:	4619      	mov	r1, r3
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f7ff f9d2 	bl	800784a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80084a6:	4b14      	ldr	r3, [pc, #80]	@ (80084f8 <USBD_SetConfig+0x118>)
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	461a      	mov	r2, r3
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80084b0:	4b11      	ldr	r3, [pc, #68]	@ (80084f8 <USBD_SetConfig+0x118>)
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	4619      	mov	r1, r3
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7ff f9a8 	bl	800780c <USBD_SetClassConfig>
 80084bc:	4603      	mov	r3, r0
 80084be:	2b02      	cmp	r3, #2
 80084c0:	d104      	bne.n	80084cc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80084c2:	6839      	ldr	r1, [r7, #0]
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 f8ef 	bl	80086a8 <USBD_CtlError>
            return;
 80084ca:	e012      	b.n	80084f2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 f9b3 	bl	8008838 <USBD_CtlSendStatus>
        break;
 80084d2:	e00e      	b.n	80084f2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 f9af 	bl	8008838 <USBD_CtlSendStatus>
        break;
 80084da:	e00a      	b.n	80084f2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80084dc:	6839      	ldr	r1, [r7, #0]
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 f8e2 	bl	80086a8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80084e4:	4b04      	ldr	r3, [pc, #16]	@ (80084f8 <USBD_SetConfig+0x118>)
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	4619      	mov	r1, r3
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f7ff f9ad 	bl	800784a <USBD_ClrClassConfig>
        break;
 80084f0:	bf00      	nop
    }
  }
}
 80084f2:	3708      	adds	r7, #8
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}
 80084f8:	20000324 	.word	0x20000324

080084fc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b082      	sub	sp, #8
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	88db      	ldrh	r3, [r3, #6]
 800850a:	2b01      	cmp	r3, #1
 800850c:	d004      	beq.n	8008518 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800850e:	6839      	ldr	r1, [r7, #0]
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 f8c9 	bl	80086a8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008516:	e022      	b.n	800855e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800851e:	2b02      	cmp	r3, #2
 8008520:	dc02      	bgt.n	8008528 <USBD_GetConfig+0x2c>
 8008522:	2b00      	cmp	r3, #0
 8008524:	dc03      	bgt.n	800852e <USBD_GetConfig+0x32>
 8008526:	e015      	b.n	8008554 <USBD_GetConfig+0x58>
 8008528:	2b03      	cmp	r3, #3
 800852a:	d00b      	beq.n	8008544 <USBD_GetConfig+0x48>
 800852c:	e012      	b.n	8008554 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	3308      	adds	r3, #8
 8008538:	2201      	movs	r2, #1
 800853a:	4619      	mov	r1, r3
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 f91d 	bl	800877c <USBD_CtlSendData>
        break;
 8008542:	e00c      	b.n	800855e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	3304      	adds	r3, #4
 8008548:	2201      	movs	r2, #1
 800854a:	4619      	mov	r1, r3
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 f915 	bl	800877c <USBD_CtlSendData>
        break;
 8008552:	e004      	b.n	800855e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008554:	6839      	ldr	r1, [r7, #0]
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 f8a6 	bl	80086a8 <USBD_CtlError>
        break;
 800855c:	bf00      	nop
}
 800855e:	bf00      	nop
 8008560:	3708      	adds	r7, #8
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}

08008566 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008566:	b580      	push	{r7, lr}
 8008568:	b082      	sub	sp, #8
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
 800856e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008576:	3b01      	subs	r3, #1
 8008578:	2b02      	cmp	r3, #2
 800857a:	d81e      	bhi.n	80085ba <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	88db      	ldrh	r3, [r3, #6]
 8008580:	2b02      	cmp	r3, #2
 8008582:	d004      	beq.n	800858e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008584:	6839      	ldr	r1, [r7, #0]
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 f88e 	bl	80086a8 <USBD_CtlError>
        break;
 800858c:	e01a      	b.n	80085c4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2201      	movs	r2, #1
 8008592:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800859a:	2b00      	cmp	r3, #0
 800859c:	d005      	beq.n	80085aa <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	f043 0202 	orr.w	r2, r3, #2
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	330c      	adds	r3, #12
 80085ae:	2202      	movs	r2, #2
 80085b0:	4619      	mov	r1, r3
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 f8e2 	bl	800877c <USBD_CtlSendData>
      break;
 80085b8:	e004      	b.n	80085c4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80085ba:	6839      	ldr	r1, [r7, #0]
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 f873 	bl	80086a8 <USBD_CtlError>
      break;
 80085c2:	bf00      	nop
  }
}
 80085c4:	bf00      	nop
 80085c6:	3708      	adds	r7, #8
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	885b      	ldrh	r3, [r3, #2]
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d106      	bne.n	80085ec <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2201      	movs	r2, #1
 80085e2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 f926 	bl	8008838 <USBD_CtlSendStatus>
  }
}
 80085ec:	bf00      	nop
 80085ee:	3708      	adds	r7, #8
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b082      	sub	sp, #8
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008604:	3b01      	subs	r3, #1
 8008606:	2b02      	cmp	r3, #2
 8008608:	d80b      	bhi.n	8008622 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	885b      	ldrh	r3, [r3, #2]
 800860e:	2b01      	cmp	r3, #1
 8008610:	d10c      	bne.n	800862c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 f90c 	bl	8008838 <USBD_CtlSendStatus>
      }
      break;
 8008620:	e004      	b.n	800862c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008622:	6839      	ldr	r1, [r7, #0]
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 f83f 	bl	80086a8 <USBD_CtlError>
      break;
 800862a:	e000      	b.n	800862e <USBD_ClrFeature+0x3a>
      break;
 800862c:	bf00      	nop
  }
}
 800862e:	bf00      	nop
 8008630:	3708      	adds	r7, #8
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}

08008636 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008636:	b480      	push	{r7}
 8008638:	b083      	sub	sp, #12
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
 800863e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	781a      	ldrb	r2, [r3, #0]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	785a      	ldrb	r2, [r3, #1]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	3302      	adds	r3, #2
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	461a      	mov	r2, r3
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	3303      	adds	r3, #3
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	021b      	lsls	r3, r3, #8
 8008660:	b29b      	uxth	r3, r3
 8008662:	4413      	add	r3, r2
 8008664:	b29a      	uxth	r2, r3
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	3304      	adds	r3, #4
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	461a      	mov	r2, r3
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	3305      	adds	r3, #5
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	021b      	lsls	r3, r3, #8
 800867a:	b29b      	uxth	r3, r3
 800867c:	4413      	add	r3, r2
 800867e:	b29a      	uxth	r2, r3
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	3306      	adds	r3, #6
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	461a      	mov	r2, r3
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	3307      	adds	r3, #7
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	021b      	lsls	r3, r3, #8
 8008694:	b29b      	uxth	r3, r3
 8008696:	4413      	add	r3, r2
 8008698:	b29a      	uxth	r2, r3
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	80da      	strh	r2, [r3, #6]

}
 800869e:	bf00      	nop
 80086a0:	370c      	adds	r7, #12
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bc80      	pop	{r7}
 80086a6:	4770      	bx	lr

080086a8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80086b2:	2180      	movs	r1, #128	@ 0x80
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 fc61 	bl	8008f7c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80086ba:	2100      	movs	r1, #0
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 fc5d 	bl	8008f7c <USBD_LL_StallEP>
}
 80086c2:	bf00      	nop
 80086c4:	3708      	adds	r7, #8
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}

080086ca <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80086ca:	b580      	push	{r7, lr}
 80086cc:	b086      	sub	sp, #24
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	60f8      	str	r0, [r7, #12]
 80086d2:	60b9      	str	r1, [r7, #8]
 80086d4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80086d6:	2300      	movs	r3, #0
 80086d8:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d032      	beq.n	8008746 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80086e0:	68f8      	ldr	r0, [r7, #12]
 80086e2:	f000 f834 	bl	800874e <USBD_GetLen>
 80086e6:	4603      	mov	r3, r0
 80086e8:	3301      	adds	r3, #1
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	005b      	lsls	r3, r3, #1
 80086ee:	b29a      	uxth	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80086f4:	7dfb      	ldrb	r3, [r7, #23]
 80086f6:	1c5a      	adds	r2, r3, #1
 80086f8:	75fa      	strb	r2, [r7, #23]
 80086fa:	461a      	mov	r2, r3
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	4413      	add	r3, r2
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	7812      	ldrb	r2, [r2, #0]
 8008704:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008706:	7dfb      	ldrb	r3, [r7, #23]
 8008708:	1c5a      	adds	r2, r3, #1
 800870a:	75fa      	strb	r2, [r7, #23]
 800870c:	461a      	mov	r2, r3
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	4413      	add	r3, r2
 8008712:	2203      	movs	r2, #3
 8008714:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008716:	e012      	b.n	800873e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	1c5a      	adds	r2, r3, #1
 800871c:	60fa      	str	r2, [r7, #12]
 800871e:	7dfa      	ldrb	r2, [r7, #23]
 8008720:	1c51      	adds	r1, r2, #1
 8008722:	75f9      	strb	r1, [r7, #23]
 8008724:	4611      	mov	r1, r2
 8008726:	68ba      	ldr	r2, [r7, #8]
 8008728:	440a      	add	r2, r1
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800872e:	7dfb      	ldrb	r3, [r7, #23]
 8008730:	1c5a      	adds	r2, r3, #1
 8008732:	75fa      	strb	r2, [r7, #23]
 8008734:	461a      	mov	r2, r3
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	4413      	add	r3, r2
 800873a:	2200      	movs	r2, #0
 800873c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d1e8      	bne.n	8008718 <USBD_GetString+0x4e>
    }
  }
}
 8008746:	bf00      	nop
 8008748:	3718      	adds	r7, #24
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800874e:	b480      	push	{r7}
 8008750:	b085      	sub	sp, #20
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008756:	2300      	movs	r3, #0
 8008758:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800875a:	e005      	b.n	8008768 <USBD_GetLen+0x1a>
  {
    len++;
 800875c:	7bfb      	ldrb	r3, [r7, #15]
 800875e:	3301      	adds	r3, #1
 8008760:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	3301      	adds	r3, #1
 8008766:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d1f5      	bne.n	800875c <USBD_GetLen+0xe>
  }

  return len;
 8008770:	7bfb      	ldrb	r3, [r7, #15]
}
 8008772:	4618      	mov	r0, r3
 8008774:	3714      	adds	r7, #20
 8008776:	46bd      	mov	sp, r7
 8008778:	bc80      	pop	{r7}
 800877a:	4770      	bx	lr

0800877c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	60b9      	str	r1, [r7, #8]
 8008786:	4613      	mov	r3, r2
 8008788:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2202      	movs	r2, #2
 800878e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008792:	88fa      	ldrh	r2, [r7, #6]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008798:	88fa      	ldrh	r2, [r7, #6]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800879e:	88fb      	ldrh	r3, [r7, #6]
 80087a0:	68ba      	ldr	r2, [r7, #8]
 80087a2:	2100      	movs	r1, #0
 80087a4:	68f8      	ldr	r0, [r7, #12]
 80087a6:	f000 fc71 	bl	800908c <USBD_LL_Transmit>

  return USBD_OK;
 80087aa:	2300      	movs	r3, #0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3710      	adds	r7, #16
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	4613      	mov	r3, r2
 80087c0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80087c2:	88fb      	ldrh	r3, [r7, #6]
 80087c4:	68ba      	ldr	r2, [r7, #8]
 80087c6:	2100      	movs	r1, #0
 80087c8:	68f8      	ldr	r0, [r7, #12]
 80087ca:	f000 fc5f 	bl	800908c <USBD_LL_Transmit>

  return USBD_OK;
 80087ce:	2300      	movs	r3, #0
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3710      	adds	r7, #16
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	60f8      	str	r0, [r7, #12]
 80087e0:	60b9      	str	r1, [r7, #8]
 80087e2:	4613      	mov	r3, r2
 80087e4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2203      	movs	r2, #3
 80087ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80087ee:	88fa      	ldrh	r2, [r7, #6]
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 80087f6:	88fa      	ldrh	r2, [r7, #6]
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80087fe:	88fb      	ldrh	r3, [r7, #6]
 8008800:	68ba      	ldr	r2, [r7, #8]
 8008802:	2100      	movs	r1, #0
 8008804:	68f8      	ldr	r0, [r7, #12]
 8008806:	f000 fc64 	bl	80090d2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800880a:	2300      	movs	r3, #0
}
 800880c:	4618      	mov	r0, r3
 800880e:	3710      	adds	r7, #16
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	4613      	mov	r3, r2
 8008820:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008822:	88fb      	ldrh	r3, [r7, #6]
 8008824:	68ba      	ldr	r2, [r7, #8]
 8008826:	2100      	movs	r1, #0
 8008828:	68f8      	ldr	r0, [r7, #12]
 800882a:	f000 fc52 	bl	80090d2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800882e:	2300      	movs	r3, #0
}
 8008830:	4618      	mov	r0, r3
 8008832:	3710      	adds	r7, #16
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2204      	movs	r2, #4
 8008844:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008848:	2300      	movs	r3, #0
 800884a:	2200      	movs	r2, #0
 800884c:	2100      	movs	r1, #0
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 fc1c 	bl	800908c <USBD_LL_Transmit>

  return USBD_OK;
 8008854:	2300      	movs	r3, #0
}
 8008856:	4618      	mov	r0, r3
 8008858:	3708      	adds	r7, #8
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}

0800885e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800885e:	b580      	push	{r7, lr}
 8008860:	b082      	sub	sp, #8
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2205      	movs	r2, #5
 800886a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800886e:	2300      	movs	r3, #0
 8008870:	2200      	movs	r2, #0
 8008872:	2100      	movs	r1, #0
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f000 fc2c 	bl	80090d2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800887a:	2300      	movs	r3, #0
}
 800887c:	4618      	mov	r0, r3
 800887e:	3708      	adds	r7, #8
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008888:	2200      	movs	r2, #0
 800888a:	4912      	ldr	r1, [pc, #72]	@ (80088d4 <MX_USB_DEVICE_Init+0x50>)
 800888c:	4812      	ldr	r0, [pc, #72]	@ (80088d8 <MX_USB_DEVICE_Init+0x54>)
 800888e:	f7fe ff49 	bl	8007724 <USBD_Init>
 8008892:	4603      	mov	r3, r0
 8008894:	2b00      	cmp	r3, #0
 8008896:	d001      	beq.n	800889c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008898:	f7f7 fe44 	bl	8000524 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800889c:	490f      	ldr	r1, [pc, #60]	@ (80088dc <MX_USB_DEVICE_Init+0x58>)
 800889e:	480e      	ldr	r0, [pc, #56]	@ (80088d8 <MX_USB_DEVICE_Init+0x54>)
 80088a0:	f7fe ff78 	bl	8007794 <USBD_RegisterClass>
 80088a4:	4603      	mov	r3, r0
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d001      	beq.n	80088ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80088aa:	f7f7 fe3b 	bl	8000524 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80088ae:	490c      	ldr	r1, [pc, #48]	@ (80088e0 <MX_USB_DEVICE_Init+0x5c>)
 80088b0:	4809      	ldr	r0, [pc, #36]	@ (80088d8 <MX_USB_DEVICE_Init+0x54>)
 80088b2:	f7fe fe9b 	bl	80075ec <USBD_CDC_RegisterInterface>
 80088b6:	4603      	mov	r3, r0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d001      	beq.n	80088c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80088bc:	f7f7 fe32 	bl	8000524 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80088c0:	4805      	ldr	r0, [pc, #20]	@ (80088d8 <MX_USB_DEVICE_Init+0x54>)
 80088c2:	f7fe ff8d 	bl	80077e0 <USBD_Start>
 80088c6:	4603      	mov	r3, r0
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d001      	beq.n	80088d0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80088cc:	f7f7 fe2a 	bl	8000524 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80088d0:	bf00      	nop
 80088d2:	bd80      	pop	{r7, pc}
 80088d4:	2000012c 	.word	0x2000012c
 80088d8:	20000328 	.word	0x20000328
 80088dc:	20000018 	.word	0x20000018
 80088e0:	2000011c 	.word	0x2000011c

080088e4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80088e8:	2200      	movs	r2, #0
 80088ea:	4905      	ldr	r1, [pc, #20]	@ (8008900 <CDC_Init_FS+0x1c>)
 80088ec:	4805      	ldr	r0, [pc, #20]	@ (8008904 <CDC_Init_FS+0x20>)
 80088ee:	f7fe fe93 	bl	8007618 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80088f2:	4905      	ldr	r1, [pc, #20]	@ (8008908 <CDC_Init_FS+0x24>)
 80088f4:	4803      	ldr	r0, [pc, #12]	@ (8008904 <CDC_Init_FS+0x20>)
 80088f6:	f7fe fea8 	bl	800764a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80088fa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	bd80      	pop	{r7, pc}
 8008900:	200009ec 	.word	0x200009ec
 8008904:	20000328 	.word	0x20000328
 8008908:	200005ec 	.word	0x200005ec

0800890c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800890c:	b480      	push	{r7}
 800890e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008910:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008912:	4618      	mov	r0, r3
 8008914:	46bd      	mov	sp, r7
 8008916:	bc80      	pop	{r7}
 8008918:	4770      	bx	lr
	...

0800891c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800891c:	b480      	push	{r7}
 800891e:	b083      	sub	sp, #12
 8008920:	af00      	add	r7, sp, #0
 8008922:	4603      	mov	r3, r0
 8008924:	6039      	str	r1, [r7, #0]
 8008926:	71fb      	strb	r3, [r7, #7]
 8008928:	4613      	mov	r3, r2
 800892a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800892c:	79fb      	ldrb	r3, [r7, #7]
 800892e:	2b23      	cmp	r3, #35	@ 0x23
 8008930:	d84a      	bhi.n	80089c8 <CDC_Control_FS+0xac>
 8008932:	a201      	add	r2, pc, #4	@ (adr r2, 8008938 <CDC_Control_FS+0x1c>)
 8008934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008938:	080089c9 	.word	0x080089c9
 800893c:	080089c9 	.word	0x080089c9
 8008940:	080089c9 	.word	0x080089c9
 8008944:	080089c9 	.word	0x080089c9
 8008948:	080089c9 	.word	0x080089c9
 800894c:	080089c9 	.word	0x080089c9
 8008950:	080089c9 	.word	0x080089c9
 8008954:	080089c9 	.word	0x080089c9
 8008958:	080089c9 	.word	0x080089c9
 800895c:	080089c9 	.word	0x080089c9
 8008960:	080089c9 	.word	0x080089c9
 8008964:	080089c9 	.word	0x080089c9
 8008968:	080089c9 	.word	0x080089c9
 800896c:	080089c9 	.word	0x080089c9
 8008970:	080089c9 	.word	0x080089c9
 8008974:	080089c9 	.word	0x080089c9
 8008978:	080089c9 	.word	0x080089c9
 800897c:	080089c9 	.word	0x080089c9
 8008980:	080089c9 	.word	0x080089c9
 8008984:	080089c9 	.word	0x080089c9
 8008988:	080089c9 	.word	0x080089c9
 800898c:	080089c9 	.word	0x080089c9
 8008990:	080089c9 	.word	0x080089c9
 8008994:	080089c9 	.word	0x080089c9
 8008998:	080089c9 	.word	0x080089c9
 800899c:	080089c9 	.word	0x080089c9
 80089a0:	080089c9 	.word	0x080089c9
 80089a4:	080089c9 	.word	0x080089c9
 80089a8:	080089c9 	.word	0x080089c9
 80089ac:	080089c9 	.word	0x080089c9
 80089b0:	080089c9 	.word	0x080089c9
 80089b4:	080089c9 	.word	0x080089c9
 80089b8:	080089c9 	.word	0x080089c9
 80089bc:	080089c9 	.word	0x080089c9
 80089c0:	080089c9 	.word	0x080089c9
 80089c4:	080089c9 	.word	0x080089c9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80089c8:	bf00      	nop
  }

  return (USBD_OK);
 80089ca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	370c      	adds	r7, #12
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bc80      	pop	{r7}
 80089d4:	4770      	bx	lr
 80089d6:	bf00      	nop

080089d8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80089e2:	6879      	ldr	r1, [r7, #4]
 80089e4:	480b      	ldr	r0, [pc, #44]	@ (8008a14 <CDC_Receive_FS+0x3c>)
 80089e6:	f7fe fe30 	bl	800764a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80089ea:	480a      	ldr	r0, [pc, #40]	@ (8008a14 <CDC_Receive_FS+0x3c>)
 80089ec:	f7fe fe6f 	bl	80076ce <USBD_CDC_ReceivePacket>
  USB_CDC_RxHandler(UserRxBufferFS, *Len);
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4619      	mov	r1, r3
 80089f6:	4808      	ldr	r0, [pc, #32]	@ (8008a18 <CDC_Receive_FS+0x40>)
 80089f8:	f7f7 fd66 	bl	80004c8 <USB_CDC_RxHandler>
  memset(UserRxBufferFS, '\0', *Len);
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	461a      	mov	r2, r3
 8008a02:	2100      	movs	r1, #0
 8008a04:	4804      	ldr	r0, [pc, #16]	@ (8008a18 <CDC_Receive_FS+0x40>)
 8008a06:	f000 fd06 	bl	8009416 <memset>
  return (USBD_OK);
 8008a0a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3708      	adds	r7, #8
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}
 8008a14:	20000328 	.word	0x20000328
 8008a18:	200005ec 	.word	0x200005ec

08008a1c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b084      	sub	sp, #16
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	460b      	mov	r3, r1
 8008a26:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008a2c:	4b0d      	ldr	r3, [pc, #52]	@ (8008a64 <CDC_Transmit_FS+0x48>)
 8008a2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a32:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d001      	beq.n	8008a42 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	e00b      	b.n	8008a5a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008a42:	887b      	ldrh	r3, [r7, #2]
 8008a44:	461a      	mov	r2, r3
 8008a46:	6879      	ldr	r1, [r7, #4]
 8008a48:	4806      	ldr	r0, [pc, #24]	@ (8008a64 <CDC_Transmit_FS+0x48>)
 8008a4a:	f7fe fde5 	bl	8007618 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008a4e:	4805      	ldr	r0, [pc, #20]	@ (8008a64 <CDC_Transmit_FS+0x48>)
 8008a50:	f7fe fe0e 	bl	8007670 <USBD_CDC_TransmitPacket>
 8008a54:	4603      	mov	r3, r0
 8008a56:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3710      	adds	r7, #16
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	20000328 	.word	0x20000328

08008a68 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	4603      	mov	r3, r0
 8008a70:	6039      	str	r1, [r7, #0]
 8008a72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	2212      	movs	r2, #18
 8008a78:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008a7a:	4b03      	ldr	r3, [pc, #12]	@ (8008a88 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	370c      	adds	r7, #12
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bc80      	pop	{r7}
 8008a84:	4770      	bx	lr
 8008a86:	bf00      	nop
 8008a88:	20000148 	.word	0x20000148

08008a8c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b083      	sub	sp, #12
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	4603      	mov	r3, r0
 8008a94:	6039      	str	r1, [r7, #0]
 8008a96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	2204      	movs	r2, #4
 8008a9c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008a9e:	4b03      	ldr	r3, [pc, #12]	@ (8008aac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	370c      	adds	r7, #12
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bc80      	pop	{r7}
 8008aa8:	4770      	bx	lr
 8008aaa:	bf00      	nop
 8008aac:	2000015c 	.word	0x2000015c

08008ab0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b082      	sub	sp, #8
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	6039      	str	r1, [r7, #0]
 8008aba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008abc:	79fb      	ldrb	r3, [r7, #7]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d105      	bne.n	8008ace <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008ac2:	683a      	ldr	r2, [r7, #0]
 8008ac4:	4907      	ldr	r1, [pc, #28]	@ (8008ae4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008ac6:	4808      	ldr	r0, [pc, #32]	@ (8008ae8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008ac8:	f7ff fdff 	bl	80086ca <USBD_GetString>
 8008acc:	e004      	b.n	8008ad8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008ace:	683a      	ldr	r2, [r7, #0]
 8008ad0:	4904      	ldr	r1, [pc, #16]	@ (8008ae4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008ad2:	4805      	ldr	r0, [pc, #20]	@ (8008ae8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008ad4:	f7ff fdf9 	bl	80086ca <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ad8:	4b02      	ldr	r3, [pc, #8]	@ (8008ae4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3708      	adds	r7, #8
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	bf00      	nop
 8008ae4:	20000dec 	.word	0x20000dec
 8008ae8:	0800a114 	.word	0x0800a114

08008aec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b082      	sub	sp, #8
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	4603      	mov	r3, r0
 8008af4:	6039      	str	r1, [r7, #0]
 8008af6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008af8:	683a      	ldr	r2, [r7, #0]
 8008afa:	4904      	ldr	r1, [pc, #16]	@ (8008b0c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008afc:	4804      	ldr	r0, [pc, #16]	@ (8008b10 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008afe:	f7ff fde4 	bl	80086ca <USBD_GetString>
  return USBD_StrDesc;
 8008b02:	4b02      	ldr	r3, [pc, #8]	@ (8008b0c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3708      	adds	r7, #8
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}
 8008b0c:	20000dec 	.word	0x20000dec
 8008b10:	0800a12c 	.word	0x0800a12c

08008b14 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	6039      	str	r1, [r7, #0]
 8008b1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	221a      	movs	r2, #26
 8008b24:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008b26:	f000 f843 	bl	8008bb0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008b2a:	4b02      	ldr	r3, [pc, #8]	@ (8008b34 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3708      	adds	r7, #8
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	20000160 	.word	0x20000160

08008b38 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b082      	sub	sp, #8
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	4603      	mov	r3, r0
 8008b40:	6039      	str	r1, [r7, #0]
 8008b42:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008b44:	79fb      	ldrb	r3, [r7, #7]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d105      	bne.n	8008b56 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b4a:	683a      	ldr	r2, [r7, #0]
 8008b4c:	4907      	ldr	r1, [pc, #28]	@ (8008b6c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b4e:	4808      	ldr	r0, [pc, #32]	@ (8008b70 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b50:	f7ff fdbb 	bl	80086ca <USBD_GetString>
 8008b54:	e004      	b.n	8008b60 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b56:	683a      	ldr	r2, [r7, #0]
 8008b58:	4904      	ldr	r1, [pc, #16]	@ (8008b6c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b5a:	4805      	ldr	r0, [pc, #20]	@ (8008b70 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b5c:	f7ff fdb5 	bl	80086ca <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b60:	4b02      	ldr	r3, [pc, #8]	@ (8008b6c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3708      	adds	r7, #8
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
 8008b6a:	bf00      	nop
 8008b6c:	20000dec 	.word	0x20000dec
 8008b70:	0800a140 	.word	0x0800a140

08008b74 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	6039      	str	r1, [r7, #0]
 8008b7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b80:	79fb      	ldrb	r3, [r7, #7]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d105      	bne.n	8008b92 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b86:	683a      	ldr	r2, [r7, #0]
 8008b88:	4907      	ldr	r1, [pc, #28]	@ (8008ba8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b8a:	4808      	ldr	r0, [pc, #32]	@ (8008bac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b8c:	f7ff fd9d 	bl	80086ca <USBD_GetString>
 8008b90:	e004      	b.n	8008b9c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b92:	683a      	ldr	r2, [r7, #0]
 8008b94:	4904      	ldr	r1, [pc, #16]	@ (8008ba8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b96:	4805      	ldr	r0, [pc, #20]	@ (8008bac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b98:	f7ff fd97 	bl	80086ca <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b9c:	4b02      	ldr	r3, [pc, #8]	@ (8008ba8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3708      	adds	r7, #8
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	20000dec 	.word	0x20000dec
 8008bac:	0800a14c 	.word	0x0800a14c

08008bb0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8008bf4 <Get_SerialNum+0x44>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8008bf8 <Get_SerialNum+0x48>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8008bfc <Get_SerialNum+0x4c>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008bc8:	68fa      	ldr	r2, [r7, #12]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	4413      	add	r3, r2
 8008bce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d009      	beq.n	8008bea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008bd6:	2208      	movs	r2, #8
 8008bd8:	4909      	ldr	r1, [pc, #36]	@ (8008c00 <Get_SerialNum+0x50>)
 8008bda:	68f8      	ldr	r0, [r7, #12]
 8008bdc:	f000 f814 	bl	8008c08 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008be0:	2204      	movs	r2, #4
 8008be2:	4908      	ldr	r1, [pc, #32]	@ (8008c04 <Get_SerialNum+0x54>)
 8008be4:	68b8      	ldr	r0, [r7, #8]
 8008be6:	f000 f80f 	bl	8008c08 <IntToUnicode>
  }
}
 8008bea:	bf00      	nop
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	1ffff7e8 	.word	0x1ffff7e8
 8008bf8:	1ffff7ec 	.word	0x1ffff7ec
 8008bfc:	1ffff7f0 	.word	0x1ffff7f0
 8008c00:	20000162 	.word	0x20000162
 8008c04:	20000172 	.word	0x20000172

08008c08 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b087      	sub	sp, #28
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	60f8      	str	r0, [r7, #12]
 8008c10:	60b9      	str	r1, [r7, #8]
 8008c12:	4613      	mov	r3, r2
 8008c14:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008c16:	2300      	movs	r3, #0
 8008c18:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	75fb      	strb	r3, [r7, #23]
 8008c1e:	e027      	b.n	8008c70 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	0f1b      	lsrs	r3, r3, #28
 8008c24:	2b09      	cmp	r3, #9
 8008c26:	d80b      	bhi.n	8008c40 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	0f1b      	lsrs	r3, r3, #28
 8008c2c:	b2da      	uxtb	r2, r3
 8008c2e:	7dfb      	ldrb	r3, [r7, #23]
 8008c30:	005b      	lsls	r3, r3, #1
 8008c32:	4619      	mov	r1, r3
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	440b      	add	r3, r1
 8008c38:	3230      	adds	r2, #48	@ 0x30
 8008c3a:	b2d2      	uxtb	r2, r2
 8008c3c:	701a      	strb	r2, [r3, #0]
 8008c3e:	e00a      	b.n	8008c56 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	0f1b      	lsrs	r3, r3, #28
 8008c44:	b2da      	uxtb	r2, r3
 8008c46:	7dfb      	ldrb	r3, [r7, #23]
 8008c48:	005b      	lsls	r3, r3, #1
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	440b      	add	r3, r1
 8008c50:	3237      	adds	r2, #55	@ 0x37
 8008c52:	b2d2      	uxtb	r2, r2
 8008c54:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	011b      	lsls	r3, r3, #4
 8008c5a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008c5c:	7dfb      	ldrb	r3, [r7, #23]
 8008c5e:	005b      	lsls	r3, r3, #1
 8008c60:	3301      	adds	r3, #1
 8008c62:	68ba      	ldr	r2, [r7, #8]
 8008c64:	4413      	add	r3, r2
 8008c66:	2200      	movs	r2, #0
 8008c68:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008c6a:	7dfb      	ldrb	r3, [r7, #23]
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	75fb      	strb	r3, [r7, #23]
 8008c70:	7dfa      	ldrb	r2, [r7, #23]
 8008c72:	79fb      	ldrb	r3, [r7, #7]
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d3d3      	bcc.n	8008c20 <IntToUnicode+0x18>
  }
}
 8008c78:	bf00      	nop
 8008c7a:	bf00      	nop
 8008c7c:	371c      	adds	r7, #28
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bc80      	pop	{r7}
 8008c82:	4770      	bx	lr

08008c84 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a0d      	ldr	r2, [pc, #52]	@ (8008cc8 <HAL_PCD_MspInit+0x44>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d113      	bne.n	8008cbe <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008c96:	4b0d      	ldr	r3, [pc, #52]	@ (8008ccc <HAL_PCD_MspInit+0x48>)
 8008c98:	69db      	ldr	r3, [r3, #28]
 8008c9a:	4a0c      	ldr	r2, [pc, #48]	@ (8008ccc <HAL_PCD_MspInit+0x48>)
 8008c9c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008ca0:	61d3      	str	r3, [r2, #28]
 8008ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8008ccc <HAL_PCD_MspInit+0x48>)
 8008ca4:	69db      	ldr	r3, [r3, #28]
 8008ca6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008caa:	60fb      	str	r3, [r7, #12]
 8008cac:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008cae:	2200      	movs	r2, #0
 8008cb0:	2100      	movs	r1, #0
 8008cb2:	2014      	movs	r0, #20
 8008cb4:	f7f8 f8a1 	bl	8000dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008cb8:	2014      	movs	r0, #20
 8008cba:	f7f8 f8ba 	bl	8000e32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008cbe:	bf00      	nop
 8008cc0:	3710      	adds	r7, #16
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	bf00      	nop
 8008cc8:	40005c00 	.word	0x40005c00
 8008ccc:	40021000 	.word	0x40021000

08008cd0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b082      	sub	sp, #8
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	4610      	mov	r0, r2
 8008ce8:	f7fe fdc2 	bl	8007870 <USBD_LL_SetupStage>
}
 8008cec:	bf00      	nop
 8008cee:	3708      	adds	r7, #8
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008d06:	78fa      	ldrb	r2, [r7, #3]
 8008d08:	6879      	ldr	r1, [r7, #4]
 8008d0a:	4613      	mov	r3, r2
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	4413      	add	r3, r2
 8008d10:	00db      	lsls	r3, r3, #3
 8008d12:	440b      	add	r3, r1
 8008d14:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	78fb      	ldrb	r3, [r7, #3]
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	f7fe fdf4 	bl	800790a <USBD_LL_DataOutStage>
}
 8008d22:	bf00      	nop
 8008d24:	3708      	adds	r7, #8
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}

08008d2a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d2a:	b580      	push	{r7, lr}
 8008d2c:	b082      	sub	sp, #8
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
 8008d32:	460b      	mov	r3, r1
 8008d34:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008d3c:	78fa      	ldrb	r2, [r7, #3]
 8008d3e:	6879      	ldr	r1, [r7, #4]
 8008d40:	4613      	mov	r3, r2
 8008d42:	009b      	lsls	r3, r3, #2
 8008d44:	4413      	add	r3, r2
 8008d46:	00db      	lsls	r3, r3, #3
 8008d48:	440b      	add	r3, r1
 8008d4a:	3324      	adds	r3, #36	@ 0x24
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	78fb      	ldrb	r3, [r7, #3]
 8008d50:	4619      	mov	r1, r3
 8008d52:	f7fe fe4b 	bl	80079ec <USBD_LL_DataInStage>
}
 8008d56:	bf00      	nop
 8008d58:	3708      	adds	r7, #8
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b082      	sub	sp, #8
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f7fe ff5b 	bl	8007c28 <USBD_LL_SOF>
}
 8008d72:	bf00      	nop
 8008d74:	3708      	adds	r7, #8
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}

08008d7a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d7a:	b580      	push	{r7, lr}
 8008d7c:	b084      	sub	sp, #16
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008d82:	2301      	movs	r3, #1
 8008d84:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	799b      	ldrb	r3, [r3, #6]
 8008d8a:	2b02      	cmp	r3, #2
 8008d8c:	d001      	beq.n	8008d92 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008d8e:	f7f7 fbc9 	bl	8000524 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008d98:	7bfa      	ldrb	r2, [r7, #15]
 8008d9a:	4611      	mov	r1, r2
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f7fe ff0b 	bl	8007bb8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008da8:	4618      	mov	r0, r3
 8008daa:	f7fe fec4 	bl	8007b36 <USBD_LL_Reset>
}
 8008dae:	bf00      	nop
 8008db0:	3710      	adds	r7, #16
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
	...

08008db8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f7fe ff05 	bl	8007bd6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	7a9b      	ldrb	r3, [r3, #10]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d005      	beq.n	8008de0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008dd4:	4b04      	ldr	r3, [pc, #16]	@ (8008de8 <HAL_PCD_SuspendCallback+0x30>)
 8008dd6:	691b      	ldr	r3, [r3, #16]
 8008dd8:	4a03      	ldr	r2, [pc, #12]	@ (8008de8 <HAL_PCD_SuspendCallback+0x30>)
 8008dda:	f043 0306 	orr.w	r3, r3, #6
 8008dde:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008de0:	bf00      	nop
 8008de2:	3708      	adds	r7, #8
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}
 8008de8:	e000ed00 	.word	0xe000ed00

08008dec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b082      	sub	sp, #8
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f7fe feff 	bl	8007bfe <USBD_LL_Resume>
}
 8008e00:	bf00      	nop
 8008e02:	3708      	adds	r7, #8
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008e10:	4a28      	ldr	r2, [pc, #160]	@ (8008eb4 <USBD_LL_Init+0xac>)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	4a26      	ldr	r2, [pc, #152]	@ (8008eb4 <USBD_LL_Init+0xac>)
 8008e1c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008e20:	4b24      	ldr	r3, [pc, #144]	@ (8008eb4 <USBD_LL_Init+0xac>)
 8008e22:	4a25      	ldr	r2, [pc, #148]	@ (8008eb8 <USBD_LL_Init+0xb0>)
 8008e24:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008e26:	4b23      	ldr	r3, [pc, #140]	@ (8008eb4 <USBD_LL_Init+0xac>)
 8008e28:	2208      	movs	r2, #8
 8008e2a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008e2c:	4b21      	ldr	r3, [pc, #132]	@ (8008eb4 <USBD_LL_Init+0xac>)
 8008e2e:	2202      	movs	r2, #2
 8008e30:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008e32:	4b20      	ldr	r3, [pc, #128]	@ (8008eb4 <USBD_LL_Init+0xac>)
 8008e34:	2200      	movs	r2, #0
 8008e36:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008e38:	4b1e      	ldr	r3, [pc, #120]	@ (8008eb4 <USBD_LL_Init+0xac>)
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008e3e:	4b1d      	ldr	r3, [pc, #116]	@ (8008eb4 <USBD_LL_Init+0xac>)
 8008e40:	2200      	movs	r2, #0
 8008e42:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008e44:	481b      	ldr	r0, [pc, #108]	@ (8008eb4 <USBD_LL_Init+0xac>)
 8008e46:	f7f8 fbbf 	bl	80015c8 <HAL_PCD_Init>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d001      	beq.n	8008e54 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008e50:	f7f7 fb68 	bl	8000524 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008e5a:	2318      	movs	r3, #24
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	2100      	movs	r1, #0
 8008e60:	f7fa f8d0 	bl	8003004 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008e6a:	2358      	movs	r3, #88	@ 0x58
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	2180      	movs	r1, #128	@ 0x80
 8008e70:	f7fa f8c8 	bl	8003004 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008e7a:	23c0      	movs	r3, #192	@ 0xc0
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	2181      	movs	r1, #129	@ 0x81
 8008e80:	f7fa f8c0 	bl	8003004 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008e8a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8008e8e:	2200      	movs	r2, #0
 8008e90:	2101      	movs	r1, #1
 8008e92:	f7fa f8b7 	bl	8003004 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008e9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	2182      	movs	r1, #130	@ 0x82
 8008ea4:	f7fa f8ae 	bl	8003004 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008ea8:	2300      	movs	r3, #0
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3708      	adds	r7, #8
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	20000fec 	.word	0x20000fec
 8008eb8:	40005c00 	.word	0x40005c00

08008ebc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b084      	sub	sp, #16
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7f8 fc6e 	bl	80017b4 <HAL_PCD_Start>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008edc:	7bfb      	ldrb	r3, [r7, #15]
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f000 f94e 	bl	8009180 <USBD_Get_USB_Status>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ee8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3710      	adds	r7, #16
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}

08008ef2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008ef2:	b580      	push	{r7, lr}
 8008ef4:	b084      	sub	sp, #16
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	6078      	str	r0, [r7, #4]
 8008efa:	4608      	mov	r0, r1
 8008efc:	4611      	mov	r1, r2
 8008efe:	461a      	mov	r2, r3
 8008f00:	4603      	mov	r3, r0
 8008f02:	70fb      	strb	r3, [r7, #3]
 8008f04:	460b      	mov	r3, r1
 8008f06:	70bb      	strb	r3, [r7, #2]
 8008f08:	4613      	mov	r3, r2
 8008f0a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f10:	2300      	movs	r3, #0
 8008f12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008f1a:	78bb      	ldrb	r3, [r7, #2]
 8008f1c:	883a      	ldrh	r2, [r7, #0]
 8008f1e:	78f9      	ldrb	r1, [r7, #3]
 8008f20:	f7f8 fdc2 	bl	8001aa8 <HAL_PCD_EP_Open>
 8008f24:	4603      	mov	r3, r0
 8008f26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f28:	7bfb      	ldrb	r3, [r7, #15]
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f000 f928 	bl	8009180 <USBD_Get_USB_Status>
 8008f30:	4603      	mov	r3, r0
 8008f32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f34:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3710      	adds	r7, #16
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}

08008f3e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f3e:	b580      	push	{r7, lr}
 8008f40:	b084      	sub	sp, #16
 8008f42:	af00      	add	r7, sp, #0
 8008f44:	6078      	str	r0, [r7, #4]
 8008f46:	460b      	mov	r3, r1
 8008f48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008f58:	78fa      	ldrb	r2, [r7, #3]
 8008f5a:	4611      	mov	r1, r2
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f7f8 fe00 	bl	8001b62 <HAL_PCD_EP_Close>
 8008f62:	4603      	mov	r3, r0
 8008f64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f66:	7bfb      	ldrb	r3, [r7, #15]
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f000 f909 	bl	8009180 <USBD_Get_USB_Status>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f72:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3710      	adds	r7, #16
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b084      	sub	sp, #16
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	460b      	mov	r3, r1
 8008f86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008f96:	78fa      	ldrb	r2, [r7, #3]
 8008f98:	4611      	mov	r1, r2
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f7f8 fea8 	bl	8001cf0 <HAL_PCD_EP_SetStall>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fa4:	7bfb      	ldrb	r3, [r7, #15]
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f000 f8ea 	bl	8009180 <USBD_Get_USB_Status>
 8008fac:	4603      	mov	r3, r0
 8008fae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3710      	adds	r7, #16
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	b084      	sub	sp, #16
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
 8008fc2:	460b      	mov	r3, r1
 8008fc4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008fd4:	78fa      	ldrb	r2, [r7, #3]
 8008fd6:	4611      	mov	r1, r2
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7f8 fee9 	bl	8001db0 <HAL_PCD_EP_ClrStall>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fe2:	7bfb      	ldrb	r3, [r7, #15]
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f000 f8cb 	bl	8009180 <USBD_Get_USB_Status>
 8008fea:	4603      	mov	r3, r0
 8008fec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fee:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3710      	adds	r7, #16
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b085      	sub	sp, #20
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	460b      	mov	r3, r1
 8009002:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800900a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800900c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009010:	2b00      	cmp	r3, #0
 8009012:	da0b      	bge.n	800902c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009014:	78fb      	ldrb	r3, [r7, #3]
 8009016:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800901a:	68f9      	ldr	r1, [r7, #12]
 800901c:	4613      	mov	r3, r2
 800901e:	009b      	lsls	r3, r3, #2
 8009020:	4413      	add	r3, r2
 8009022:	00db      	lsls	r3, r3, #3
 8009024:	440b      	add	r3, r1
 8009026:	3312      	adds	r3, #18
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	e00b      	b.n	8009044 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800902c:	78fb      	ldrb	r3, [r7, #3]
 800902e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009032:	68f9      	ldr	r1, [r7, #12]
 8009034:	4613      	mov	r3, r2
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	4413      	add	r3, r2
 800903a:	00db      	lsls	r3, r3, #3
 800903c:	440b      	add	r3, r1
 800903e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8009042:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009044:	4618      	mov	r0, r3
 8009046:	3714      	adds	r7, #20
 8009048:	46bd      	mov	sp, r7
 800904a:	bc80      	pop	{r7}
 800904c:	4770      	bx	lr

0800904e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800904e:	b580      	push	{r7, lr}
 8009050:	b084      	sub	sp, #16
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]
 8009056:	460b      	mov	r3, r1
 8009058:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800905a:	2300      	movs	r3, #0
 800905c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800905e:	2300      	movs	r3, #0
 8009060:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009068:	78fa      	ldrb	r2, [r7, #3]
 800906a:	4611      	mov	r1, r2
 800906c:	4618      	mov	r0, r3
 800906e:	f7f8 fcf7 	bl	8001a60 <HAL_PCD_SetAddress>
 8009072:	4603      	mov	r3, r0
 8009074:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009076:	7bfb      	ldrb	r3, [r7, #15]
 8009078:	4618      	mov	r0, r3
 800907a:	f000 f881 	bl	8009180 <USBD_Get_USB_Status>
 800907e:	4603      	mov	r3, r0
 8009080:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009082:	7bbb      	ldrb	r3, [r7, #14]
}
 8009084:	4618      	mov	r0, r3
 8009086:	3710      	adds	r7, #16
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b086      	sub	sp, #24
 8009090:	af00      	add	r7, sp, #0
 8009092:	60f8      	str	r0, [r7, #12]
 8009094:	607a      	str	r2, [r7, #4]
 8009096:	461a      	mov	r2, r3
 8009098:	460b      	mov	r3, r1
 800909a:	72fb      	strb	r3, [r7, #11]
 800909c:	4613      	mov	r3, r2
 800909e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090a0:	2300      	movs	r3, #0
 80090a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090a4:	2300      	movs	r3, #0
 80090a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80090ae:	893b      	ldrh	r3, [r7, #8]
 80090b0:	7af9      	ldrb	r1, [r7, #11]
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	f7f8 fde5 	bl	8001c82 <HAL_PCD_EP_Transmit>
 80090b8:	4603      	mov	r3, r0
 80090ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090bc:	7dfb      	ldrb	r3, [r7, #23]
 80090be:	4618      	mov	r0, r3
 80090c0:	f000 f85e 	bl	8009180 <USBD_Get_USB_Status>
 80090c4:	4603      	mov	r3, r0
 80090c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80090c8:	7dbb      	ldrb	r3, [r7, #22]
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3718      	adds	r7, #24
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}

080090d2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b086      	sub	sp, #24
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	60f8      	str	r0, [r7, #12]
 80090da:	607a      	str	r2, [r7, #4]
 80090dc:	461a      	mov	r2, r3
 80090de:	460b      	mov	r3, r1
 80090e0:	72fb      	strb	r3, [r7, #11]
 80090e2:	4613      	mov	r3, r2
 80090e4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090e6:	2300      	movs	r3, #0
 80090e8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090ea:	2300      	movs	r3, #0
 80090ec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80090f4:	893b      	ldrh	r3, [r7, #8]
 80090f6:	7af9      	ldrb	r1, [r7, #11]
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	f7f8 fd7a 	bl	8001bf2 <HAL_PCD_EP_Receive>
 80090fe:	4603      	mov	r3, r0
 8009100:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009102:	7dfb      	ldrb	r3, [r7, #23]
 8009104:	4618      	mov	r0, r3
 8009106:	f000 f83b 	bl	8009180 <USBD_Get_USB_Status>
 800910a:	4603      	mov	r3, r0
 800910c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800910e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009110:	4618      	mov	r0, r3
 8009112:	3718      	adds	r7, #24
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	460b      	mov	r3, r1
 8009122:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800912a:	78fa      	ldrb	r2, [r7, #3]
 800912c:	4611      	mov	r1, r2
 800912e:	4618      	mov	r0, r3
 8009130:	f7f8 fd90 	bl	8001c54 <HAL_PCD_EP_GetRxCount>
 8009134:	4603      	mov	r3, r0
}
 8009136:	4618      	mov	r0, r3
 8009138:	3708      	adds	r7, #8
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
	...

08009140 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009140:	b480      	push	{r7}
 8009142:	b083      	sub	sp, #12
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009148:	4b02      	ldr	r3, [pc, #8]	@ (8009154 <USBD_static_malloc+0x14>)
}
 800914a:	4618      	mov	r0, r3
 800914c:	370c      	adds	r7, #12
 800914e:	46bd      	mov	sp, r7
 8009150:	bc80      	pop	{r7}
 8009152:	4770      	bx	lr
 8009154:	200012c4 	.word	0x200012c4

08009158 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009158:	b480      	push	{r7}
 800915a:	b083      	sub	sp, #12
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]

}
 8009160:	bf00      	nop
 8009162:	370c      	adds	r7, #12
 8009164:	46bd      	mov	sp, r7
 8009166:	bc80      	pop	{r7}
 8009168:	4770      	bx	lr

0800916a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800916a:	b480      	push	{r7}
 800916c:	b083      	sub	sp, #12
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
 8009172:	460b      	mov	r3, r1
 8009174:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009176:	bf00      	nop
 8009178:	370c      	adds	r7, #12
 800917a:	46bd      	mov	sp, r7
 800917c:	bc80      	pop	{r7}
 800917e:	4770      	bx	lr

08009180 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009180:	b480      	push	{r7}
 8009182:	b085      	sub	sp, #20
 8009184:	af00      	add	r7, sp, #0
 8009186:	4603      	mov	r3, r0
 8009188:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800918a:	2300      	movs	r3, #0
 800918c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800918e:	79fb      	ldrb	r3, [r7, #7]
 8009190:	2b03      	cmp	r3, #3
 8009192:	d817      	bhi.n	80091c4 <USBD_Get_USB_Status+0x44>
 8009194:	a201      	add	r2, pc, #4	@ (adr r2, 800919c <USBD_Get_USB_Status+0x1c>)
 8009196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800919a:	bf00      	nop
 800919c:	080091ad 	.word	0x080091ad
 80091a0:	080091b3 	.word	0x080091b3
 80091a4:	080091b9 	.word	0x080091b9
 80091a8:	080091bf 	.word	0x080091bf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80091ac:	2300      	movs	r3, #0
 80091ae:	73fb      	strb	r3, [r7, #15]
    break;
 80091b0:	e00b      	b.n	80091ca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80091b2:	2302      	movs	r3, #2
 80091b4:	73fb      	strb	r3, [r7, #15]
    break;
 80091b6:	e008      	b.n	80091ca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80091b8:	2301      	movs	r3, #1
 80091ba:	73fb      	strb	r3, [r7, #15]
    break;
 80091bc:	e005      	b.n	80091ca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80091be:	2302      	movs	r3, #2
 80091c0:	73fb      	strb	r3, [r7, #15]
    break;
 80091c2:	e002      	b.n	80091ca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80091c4:	2302      	movs	r3, #2
 80091c6:	73fb      	strb	r3, [r7, #15]
    break;
 80091c8:	bf00      	nop
  }
  return usb_status;
 80091ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3714      	adds	r7, #20
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bc80      	pop	{r7}
 80091d4:	4770      	bx	lr
 80091d6:	bf00      	nop

080091d8 <std>:
 80091d8:	2300      	movs	r3, #0
 80091da:	b510      	push	{r4, lr}
 80091dc:	4604      	mov	r4, r0
 80091de:	e9c0 3300 	strd	r3, r3, [r0]
 80091e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80091e6:	6083      	str	r3, [r0, #8]
 80091e8:	8181      	strh	r1, [r0, #12]
 80091ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80091ec:	81c2      	strh	r2, [r0, #14]
 80091ee:	6183      	str	r3, [r0, #24]
 80091f0:	4619      	mov	r1, r3
 80091f2:	2208      	movs	r2, #8
 80091f4:	305c      	adds	r0, #92	@ 0x5c
 80091f6:	f000 f90e 	bl	8009416 <memset>
 80091fa:	4b0d      	ldr	r3, [pc, #52]	@ (8009230 <std+0x58>)
 80091fc:	6224      	str	r4, [r4, #32]
 80091fe:	6263      	str	r3, [r4, #36]	@ 0x24
 8009200:	4b0c      	ldr	r3, [pc, #48]	@ (8009234 <std+0x5c>)
 8009202:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009204:	4b0c      	ldr	r3, [pc, #48]	@ (8009238 <std+0x60>)
 8009206:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009208:	4b0c      	ldr	r3, [pc, #48]	@ (800923c <std+0x64>)
 800920a:	6323      	str	r3, [r4, #48]	@ 0x30
 800920c:	4b0c      	ldr	r3, [pc, #48]	@ (8009240 <std+0x68>)
 800920e:	429c      	cmp	r4, r3
 8009210:	d006      	beq.n	8009220 <std+0x48>
 8009212:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009216:	4294      	cmp	r4, r2
 8009218:	d002      	beq.n	8009220 <std+0x48>
 800921a:	33d0      	adds	r3, #208	@ 0xd0
 800921c:	429c      	cmp	r4, r3
 800921e:	d105      	bne.n	800922c <std+0x54>
 8009220:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009228:	f000 b96e 	b.w	8009508 <__retarget_lock_init_recursive>
 800922c:	bd10      	pop	{r4, pc}
 800922e:	bf00      	nop
 8009230:	08009391 	.word	0x08009391
 8009234:	080093b3 	.word	0x080093b3
 8009238:	080093eb 	.word	0x080093eb
 800923c:	0800940f 	.word	0x0800940f
 8009240:	200014e4 	.word	0x200014e4

08009244 <stdio_exit_handler>:
 8009244:	4a02      	ldr	r2, [pc, #8]	@ (8009250 <stdio_exit_handler+0xc>)
 8009246:	4903      	ldr	r1, [pc, #12]	@ (8009254 <stdio_exit_handler+0x10>)
 8009248:	4803      	ldr	r0, [pc, #12]	@ (8009258 <stdio_exit_handler+0x14>)
 800924a:	f000 b869 	b.w	8009320 <_fwalk_sglue>
 800924e:	bf00      	nop
 8009250:	2000017c 	.word	0x2000017c
 8009254:	08009d9d 	.word	0x08009d9d
 8009258:	2000018c 	.word	0x2000018c

0800925c <cleanup_stdio>:
 800925c:	6841      	ldr	r1, [r0, #4]
 800925e:	4b0c      	ldr	r3, [pc, #48]	@ (8009290 <cleanup_stdio+0x34>)
 8009260:	b510      	push	{r4, lr}
 8009262:	4299      	cmp	r1, r3
 8009264:	4604      	mov	r4, r0
 8009266:	d001      	beq.n	800926c <cleanup_stdio+0x10>
 8009268:	f000 fd98 	bl	8009d9c <_fflush_r>
 800926c:	68a1      	ldr	r1, [r4, #8]
 800926e:	4b09      	ldr	r3, [pc, #36]	@ (8009294 <cleanup_stdio+0x38>)
 8009270:	4299      	cmp	r1, r3
 8009272:	d002      	beq.n	800927a <cleanup_stdio+0x1e>
 8009274:	4620      	mov	r0, r4
 8009276:	f000 fd91 	bl	8009d9c <_fflush_r>
 800927a:	68e1      	ldr	r1, [r4, #12]
 800927c:	4b06      	ldr	r3, [pc, #24]	@ (8009298 <cleanup_stdio+0x3c>)
 800927e:	4299      	cmp	r1, r3
 8009280:	d004      	beq.n	800928c <cleanup_stdio+0x30>
 8009282:	4620      	mov	r0, r4
 8009284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009288:	f000 bd88 	b.w	8009d9c <_fflush_r>
 800928c:	bd10      	pop	{r4, pc}
 800928e:	bf00      	nop
 8009290:	200014e4 	.word	0x200014e4
 8009294:	2000154c 	.word	0x2000154c
 8009298:	200015b4 	.word	0x200015b4

0800929c <global_stdio_init.part.0>:
 800929c:	b510      	push	{r4, lr}
 800929e:	4b0b      	ldr	r3, [pc, #44]	@ (80092cc <global_stdio_init.part.0+0x30>)
 80092a0:	4c0b      	ldr	r4, [pc, #44]	@ (80092d0 <global_stdio_init.part.0+0x34>)
 80092a2:	4a0c      	ldr	r2, [pc, #48]	@ (80092d4 <global_stdio_init.part.0+0x38>)
 80092a4:	4620      	mov	r0, r4
 80092a6:	601a      	str	r2, [r3, #0]
 80092a8:	2104      	movs	r1, #4
 80092aa:	2200      	movs	r2, #0
 80092ac:	f7ff ff94 	bl	80091d8 <std>
 80092b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80092b4:	2201      	movs	r2, #1
 80092b6:	2109      	movs	r1, #9
 80092b8:	f7ff ff8e 	bl	80091d8 <std>
 80092bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80092c0:	2202      	movs	r2, #2
 80092c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092c6:	2112      	movs	r1, #18
 80092c8:	f7ff bf86 	b.w	80091d8 <std>
 80092cc:	2000161c 	.word	0x2000161c
 80092d0:	200014e4 	.word	0x200014e4
 80092d4:	08009245 	.word	0x08009245

080092d8 <__sfp_lock_acquire>:
 80092d8:	4801      	ldr	r0, [pc, #4]	@ (80092e0 <__sfp_lock_acquire+0x8>)
 80092da:	f000 b916 	b.w	800950a <__retarget_lock_acquire_recursive>
 80092de:	bf00      	nop
 80092e0:	20001625 	.word	0x20001625

080092e4 <__sfp_lock_release>:
 80092e4:	4801      	ldr	r0, [pc, #4]	@ (80092ec <__sfp_lock_release+0x8>)
 80092e6:	f000 b911 	b.w	800950c <__retarget_lock_release_recursive>
 80092ea:	bf00      	nop
 80092ec:	20001625 	.word	0x20001625

080092f0 <__sinit>:
 80092f0:	b510      	push	{r4, lr}
 80092f2:	4604      	mov	r4, r0
 80092f4:	f7ff fff0 	bl	80092d8 <__sfp_lock_acquire>
 80092f8:	6a23      	ldr	r3, [r4, #32]
 80092fa:	b11b      	cbz	r3, 8009304 <__sinit+0x14>
 80092fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009300:	f7ff bff0 	b.w	80092e4 <__sfp_lock_release>
 8009304:	4b04      	ldr	r3, [pc, #16]	@ (8009318 <__sinit+0x28>)
 8009306:	6223      	str	r3, [r4, #32]
 8009308:	4b04      	ldr	r3, [pc, #16]	@ (800931c <__sinit+0x2c>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d1f5      	bne.n	80092fc <__sinit+0xc>
 8009310:	f7ff ffc4 	bl	800929c <global_stdio_init.part.0>
 8009314:	e7f2      	b.n	80092fc <__sinit+0xc>
 8009316:	bf00      	nop
 8009318:	0800925d 	.word	0x0800925d
 800931c:	2000161c 	.word	0x2000161c

08009320 <_fwalk_sglue>:
 8009320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009324:	4607      	mov	r7, r0
 8009326:	4688      	mov	r8, r1
 8009328:	4614      	mov	r4, r2
 800932a:	2600      	movs	r6, #0
 800932c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009330:	f1b9 0901 	subs.w	r9, r9, #1
 8009334:	d505      	bpl.n	8009342 <_fwalk_sglue+0x22>
 8009336:	6824      	ldr	r4, [r4, #0]
 8009338:	2c00      	cmp	r4, #0
 800933a:	d1f7      	bne.n	800932c <_fwalk_sglue+0xc>
 800933c:	4630      	mov	r0, r6
 800933e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009342:	89ab      	ldrh	r3, [r5, #12]
 8009344:	2b01      	cmp	r3, #1
 8009346:	d907      	bls.n	8009358 <_fwalk_sglue+0x38>
 8009348:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800934c:	3301      	adds	r3, #1
 800934e:	d003      	beq.n	8009358 <_fwalk_sglue+0x38>
 8009350:	4629      	mov	r1, r5
 8009352:	4638      	mov	r0, r7
 8009354:	47c0      	blx	r8
 8009356:	4306      	orrs	r6, r0
 8009358:	3568      	adds	r5, #104	@ 0x68
 800935a:	e7e9      	b.n	8009330 <_fwalk_sglue+0x10>

0800935c <iprintf>:
 800935c:	b40f      	push	{r0, r1, r2, r3}
 800935e:	b507      	push	{r0, r1, r2, lr}
 8009360:	4906      	ldr	r1, [pc, #24]	@ (800937c <iprintf+0x20>)
 8009362:	ab04      	add	r3, sp, #16
 8009364:	6808      	ldr	r0, [r1, #0]
 8009366:	f853 2b04 	ldr.w	r2, [r3], #4
 800936a:	6881      	ldr	r1, [r0, #8]
 800936c:	9301      	str	r3, [sp, #4]
 800936e:	f000 f9ed 	bl	800974c <_vfiprintf_r>
 8009372:	b003      	add	sp, #12
 8009374:	f85d eb04 	ldr.w	lr, [sp], #4
 8009378:	b004      	add	sp, #16
 800937a:	4770      	bx	lr
 800937c:	20000188 	.word	0x20000188

08009380 <putchar>:
 8009380:	4b02      	ldr	r3, [pc, #8]	@ (800938c <putchar+0xc>)
 8009382:	4601      	mov	r1, r0
 8009384:	6818      	ldr	r0, [r3, #0]
 8009386:	6882      	ldr	r2, [r0, #8]
 8009388:	f000 bd30 	b.w	8009dec <_putc_r>
 800938c:	20000188 	.word	0x20000188

08009390 <__sread>:
 8009390:	b510      	push	{r4, lr}
 8009392:	460c      	mov	r4, r1
 8009394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009398:	f000 f868 	bl	800946c <_read_r>
 800939c:	2800      	cmp	r0, #0
 800939e:	bfab      	itete	ge
 80093a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80093a2:	89a3      	ldrhlt	r3, [r4, #12]
 80093a4:	181b      	addge	r3, r3, r0
 80093a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80093aa:	bfac      	ite	ge
 80093ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80093ae:	81a3      	strhlt	r3, [r4, #12]
 80093b0:	bd10      	pop	{r4, pc}

080093b2 <__swrite>:
 80093b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093b6:	461f      	mov	r7, r3
 80093b8:	898b      	ldrh	r3, [r1, #12]
 80093ba:	4605      	mov	r5, r0
 80093bc:	05db      	lsls	r3, r3, #23
 80093be:	460c      	mov	r4, r1
 80093c0:	4616      	mov	r6, r2
 80093c2:	d505      	bpl.n	80093d0 <__swrite+0x1e>
 80093c4:	2302      	movs	r3, #2
 80093c6:	2200      	movs	r2, #0
 80093c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093cc:	f000 f83c 	bl	8009448 <_lseek_r>
 80093d0:	89a3      	ldrh	r3, [r4, #12]
 80093d2:	4632      	mov	r2, r6
 80093d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80093d8:	81a3      	strh	r3, [r4, #12]
 80093da:	4628      	mov	r0, r5
 80093dc:	463b      	mov	r3, r7
 80093de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093e6:	f000 b853 	b.w	8009490 <_write_r>

080093ea <__sseek>:
 80093ea:	b510      	push	{r4, lr}
 80093ec:	460c      	mov	r4, r1
 80093ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093f2:	f000 f829 	bl	8009448 <_lseek_r>
 80093f6:	1c43      	adds	r3, r0, #1
 80093f8:	89a3      	ldrh	r3, [r4, #12]
 80093fa:	bf15      	itete	ne
 80093fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80093fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009402:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009406:	81a3      	strheq	r3, [r4, #12]
 8009408:	bf18      	it	ne
 800940a:	81a3      	strhne	r3, [r4, #12]
 800940c:	bd10      	pop	{r4, pc}

0800940e <__sclose>:
 800940e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009412:	f000 b809 	b.w	8009428 <_close_r>

08009416 <memset>:
 8009416:	4603      	mov	r3, r0
 8009418:	4402      	add	r2, r0
 800941a:	4293      	cmp	r3, r2
 800941c:	d100      	bne.n	8009420 <memset+0xa>
 800941e:	4770      	bx	lr
 8009420:	f803 1b01 	strb.w	r1, [r3], #1
 8009424:	e7f9      	b.n	800941a <memset+0x4>
	...

08009428 <_close_r>:
 8009428:	b538      	push	{r3, r4, r5, lr}
 800942a:	2300      	movs	r3, #0
 800942c:	4d05      	ldr	r5, [pc, #20]	@ (8009444 <_close_r+0x1c>)
 800942e:	4604      	mov	r4, r0
 8009430:	4608      	mov	r0, r1
 8009432:	602b      	str	r3, [r5, #0]
 8009434:	f7f7 faf1 	bl	8000a1a <_close>
 8009438:	1c43      	adds	r3, r0, #1
 800943a:	d102      	bne.n	8009442 <_close_r+0x1a>
 800943c:	682b      	ldr	r3, [r5, #0]
 800943e:	b103      	cbz	r3, 8009442 <_close_r+0x1a>
 8009440:	6023      	str	r3, [r4, #0]
 8009442:	bd38      	pop	{r3, r4, r5, pc}
 8009444:	20001620 	.word	0x20001620

08009448 <_lseek_r>:
 8009448:	b538      	push	{r3, r4, r5, lr}
 800944a:	4604      	mov	r4, r0
 800944c:	4608      	mov	r0, r1
 800944e:	4611      	mov	r1, r2
 8009450:	2200      	movs	r2, #0
 8009452:	4d05      	ldr	r5, [pc, #20]	@ (8009468 <_lseek_r+0x20>)
 8009454:	602a      	str	r2, [r5, #0]
 8009456:	461a      	mov	r2, r3
 8009458:	f7f7 fb03 	bl	8000a62 <_lseek>
 800945c:	1c43      	adds	r3, r0, #1
 800945e:	d102      	bne.n	8009466 <_lseek_r+0x1e>
 8009460:	682b      	ldr	r3, [r5, #0]
 8009462:	b103      	cbz	r3, 8009466 <_lseek_r+0x1e>
 8009464:	6023      	str	r3, [r4, #0]
 8009466:	bd38      	pop	{r3, r4, r5, pc}
 8009468:	20001620 	.word	0x20001620

0800946c <_read_r>:
 800946c:	b538      	push	{r3, r4, r5, lr}
 800946e:	4604      	mov	r4, r0
 8009470:	4608      	mov	r0, r1
 8009472:	4611      	mov	r1, r2
 8009474:	2200      	movs	r2, #0
 8009476:	4d05      	ldr	r5, [pc, #20]	@ (800948c <_read_r+0x20>)
 8009478:	602a      	str	r2, [r5, #0]
 800947a:	461a      	mov	r2, r3
 800947c:	f7f7 fa94 	bl	80009a8 <_read>
 8009480:	1c43      	adds	r3, r0, #1
 8009482:	d102      	bne.n	800948a <_read_r+0x1e>
 8009484:	682b      	ldr	r3, [r5, #0]
 8009486:	b103      	cbz	r3, 800948a <_read_r+0x1e>
 8009488:	6023      	str	r3, [r4, #0]
 800948a:	bd38      	pop	{r3, r4, r5, pc}
 800948c:	20001620 	.word	0x20001620

08009490 <_write_r>:
 8009490:	b538      	push	{r3, r4, r5, lr}
 8009492:	4604      	mov	r4, r0
 8009494:	4608      	mov	r0, r1
 8009496:	4611      	mov	r1, r2
 8009498:	2200      	movs	r2, #0
 800949a:	4d05      	ldr	r5, [pc, #20]	@ (80094b0 <_write_r+0x20>)
 800949c:	602a      	str	r2, [r5, #0]
 800949e:	461a      	mov	r2, r3
 80094a0:	f7f7 fa9f 	bl	80009e2 <_write>
 80094a4:	1c43      	adds	r3, r0, #1
 80094a6:	d102      	bne.n	80094ae <_write_r+0x1e>
 80094a8:	682b      	ldr	r3, [r5, #0]
 80094aa:	b103      	cbz	r3, 80094ae <_write_r+0x1e>
 80094ac:	6023      	str	r3, [r4, #0]
 80094ae:	bd38      	pop	{r3, r4, r5, pc}
 80094b0:	20001620 	.word	0x20001620

080094b4 <__errno>:
 80094b4:	4b01      	ldr	r3, [pc, #4]	@ (80094bc <__errno+0x8>)
 80094b6:	6818      	ldr	r0, [r3, #0]
 80094b8:	4770      	bx	lr
 80094ba:	bf00      	nop
 80094bc:	20000188 	.word	0x20000188

080094c0 <__libc_init_array>:
 80094c0:	b570      	push	{r4, r5, r6, lr}
 80094c2:	2600      	movs	r6, #0
 80094c4:	4d0c      	ldr	r5, [pc, #48]	@ (80094f8 <__libc_init_array+0x38>)
 80094c6:	4c0d      	ldr	r4, [pc, #52]	@ (80094fc <__libc_init_array+0x3c>)
 80094c8:	1b64      	subs	r4, r4, r5
 80094ca:	10a4      	asrs	r4, r4, #2
 80094cc:	42a6      	cmp	r6, r4
 80094ce:	d109      	bne.n	80094e4 <__libc_init_array+0x24>
 80094d0:	f000 fdf6 	bl	800a0c0 <_init>
 80094d4:	2600      	movs	r6, #0
 80094d6:	4d0a      	ldr	r5, [pc, #40]	@ (8009500 <__libc_init_array+0x40>)
 80094d8:	4c0a      	ldr	r4, [pc, #40]	@ (8009504 <__libc_init_array+0x44>)
 80094da:	1b64      	subs	r4, r4, r5
 80094dc:	10a4      	asrs	r4, r4, #2
 80094de:	42a6      	cmp	r6, r4
 80094e0:	d105      	bne.n	80094ee <__libc_init_array+0x2e>
 80094e2:	bd70      	pop	{r4, r5, r6, pc}
 80094e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80094e8:	4798      	blx	r3
 80094ea:	3601      	adds	r6, #1
 80094ec:	e7ee      	b.n	80094cc <__libc_init_array+0xc>
 80094ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80094f2:	4798      	blx	r3
 80094f4:	3601      	adds	r6, #1
 80094f6:	e7f2      	b.n	80094de <__libc_init_array+0x1e>
 80094f8:	0800a1c4 	.word	0x0800a1c4
 80094fc:	0800a1c4 	.word	0x0800a1c4
 8009500:	0800a1c4 	.word	0x0800a1c4
 8009504:	0800a1c8 	.word	0x0800a1c8

08009508 <__retarget_lock_init_recursive>:
 8009508:	4770      	bx	lr

0800950a <__retarget_lock_acquire_recursive>:
 800950a:	4770      	bx	lr

0800950c <__retarget_lock_release_recursive>:
 800950c:	4770      	bx	lr
	...

08009510 <_free_r>:
 8009510:	b538      	push	{r3, r4, r5, lr}
 8009512:	4605      	mov	r5, r0
 8009514:	2900      	cmp	r1, #0
 8009516:	d040      	beq.n	800959a <_free_r+0x8a>
 8009518:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800951c:	1f0c      	subs	r4, r1, #4
 800951e:	2b00      	cmp	r3, #0
 8009520:	bfb8      	it	lt
 8009522:	18e4      	addlt	r4, r4, r3
 8009524:	f000 f8de 	bl	80096e4 <__malloc_lock>
 8009528:	4a1c      	ldr	r2, [pc, #112]	@ (800959c <_free_r+0x8c>)
 800952a:	6813      	ldr	r3, [r2, #0]
 800952c:	b933      	cbnz	r3, 800953c <_free_r+0x2c>
 800952e:	6063      	str	r3, [r4, #4]
 8009530:	6014      	str	r4, [r2, #0]
 8009532:	4628      	mov	r0, r5
 8009534:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009538:	f000 b8da 	b.w	80096f0 <__malloc_unlock>
 800953c:	42a3      	cmp	r3, r4
 800953e:	d908      	bls.n	8009552 <_free_r+0x42>
 8009540:	6820      	ldr	r0, [r4, #0]
 8009542:	1821      	adds	r1, r4, r0
 8009544:	428b      	cmp	r3, r1
 8009546:	bf01      	itttt	eq
 8009548:	6819      	ldreq	r1, [r3, #0]
 800954a:	685b      	ldreq	r3, [r3, #4]
 800954c:	1809      	addeq	r1, r1, r0
 800954e:	6021      	streq	r1, [r4, #0]
 8009550:	e7ed      	b.n	800952e <_free_r+0x1e>
 8009552:	461a      	mov	r2, r3
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	b10b      	cbz	r3, 800955c <_free_r+0x4c>
 8009558:	42a3      	cmp	r3, r4
 800955a:	d9fa      	bls.n	8009552 <_free_r+0x42>
 800955c:	6811      	ldr	r1, [r2, #0]
 800955e:	1850      	adds	r0, r2, r1
 8009560:	42a0      	cmp	r0, r4
 8009562:	d10b      	bne.n	800957c <_free_r+0x6c>
 8009564:	6820      	ldr	r0, [r4, #0]
 8009566:	4401      	add	r1, r0
 8009568:	1850      	adds	r0, r2, r1
 800956a:	4283      	cmp	r3, r0
 800956c:	6011      	str	r1, [r2, #0]
 800956e:	d1e0      	bne.n	8009532 <_free_r+0x22>
 8009570:	6818      	ldr	r0, [r3, #0]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	4408      	add	r0, r1
 8009576:	6010      	str	r0, [r2, #0]
 8009578:	6053      	str	r3, [r2, #4]
 800957a:	e7da      	b.n	8009532 <_free_r+0x22>
 800957c:	d902      	bls.n	8009584 <_free_r+0x74>
 800957e:	230c      	movs	r3, #12
 8009580:	602b      	str	r3, [r5, #0]
 8009582:	e7d6      	b.n	8009532 <_free_r+0x22>
 8009584:	6820      	ldr	r0, [r4, #0]
 8009586:	1821      	adds	r1, r4, r0
 8009588:	428b      	cmp	r3, r1
 800958a:	bf01      	itttt	eq
 800958c:	6819      	ldreq	r1, [r3, #0]
 800958e:	685b      	ldreq	r3, [r3, #4]
 8009590:	1809      	addeq	r1, r1, r0
 8009592:	6021      	streq	r1, [r4, #0]
 8009594:	6063      	str	r3, [r4, #4]
 8009596:	6054      	str	r4, [r2, #4]
 8009598:	e7cb      	b.n	8009532 <_free_r+0x22>
 800959a:	bd38      	pop	{r3, r4, r5, pc}
 800959c:	2000162c 	.word	0x2000162c

080095a0 <sbrk_aligned>:
 80095a0:	b570      	push	{r4, r5, r6, lr}
 80095a2:	4e0f      	ldr	r6, [pc, #60]	@ (80095e0 <sbrk_aligned+0x40>)
 80095a4:	460c      	mov	r4, r1
 80095a6:	6831      	ldr	r1, [r6, #0]
 80095a8:	4605      	mov	r5, r0
 80095aa:	b911      	cbnz	r1, 80095b2 <sbrk_aligned+0x12>
 80095ac:	f000 fce6 	bl	8009f7c <_sbrk_r>
 80095b0:	6030      	str	r0, [r6, #0]
 80095b2:	4621      	mov	r1, r4
 80095b4:	4628      	mov	r0, r5
 80095b6:	f000 fce1 	bl	8009f7c <_sbrk_r>
 80095ba:	1c43      	adds	r3, r0, #1
 80095bc:	d103      	bne.n	80095c6 <sbrk_aligned+0x26>
 80095be:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80095c2:	4620      	mov	r0, r4
 80095c4:	bd70      	pop	{r4, r5, r6, pc}
 80095c6:	1cc4      	adds	r4, r0, #3
 80095c8:	f024 0403 	bic.w	r4, r4, #3
 80095cc:	42a0      	cmp	r0, r4
 80095ce:	d0f8      	beq.n	80095c2 <sbrk_aligned+0x22>
 80095d0:	1a21      	subs	r1, r4, r0
 80095d2:	4628      	mov	r0, r5
 80095d4:	f000 fcd2 	bl	8009f7c <_sbrk_r>
 80095d8:	3001      	adds	r0, #1
 80095da:	d1f2      	bne.n	80095c2 <sbrk_aligned+0x22>
 80095dc:	e7ef      	b.n	80095be <sbrk_aligned+0x1e>
 80095de:	bf00      	nop
 80095e0:	20001628 	.word	0x20001628

080095e4 <_malloc_r>:
 80095e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095e8:	1ccd      	adds	r5, r1, #3
 80095ea:	f025 0503 	bic.w	r5, r5, #3
 80095ee:	3508      	adds	r5, #8
 80095f0:	2d0c      	cmp	r5, #12
 80095f2:	bf38      	it	cc
 80095f4:	250c      	movcc	r5, #12
 80095f6:	2d00      	cmp	r5, #0
 80095f8:	4606      	mov	r6, r0
 80095fa:	db01      	blt.n	8009600 <_malloc_r+0x1c>
 80095fc:	42a9      	cmp	r1, r5
 80095fe:	d904      	bls.n	800960a <_malloc_r+0x26>
 8009600:	230c      	movs	r3, #12
 8009602:	6033      	str	r3, [r6, #0]
 8009604:	2000      	movs	r0, #0
 8009606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800960a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80096e0 <_malloc_r+0xfc>
 800960e:	f000 f869 	bl	80096e4 <__malloc_lock>
 8009612:	f8d8 3000 	ldr.w	r3, [r8]
 8009616:	461c      	mov	r4, r3
 8009618:	bb44      	cbnz	r4, 800966c <_malloc_r+0x88>
 800961a:	4629      	mov	r1, r5
 800961c:	4630      	mov	r0, r6
 800961e:	f7ff ffbf 	bl	80095a0 <sbrk_aligned>
 8009622:	1c43      	adds	r3, r0, #1
 8009624:	4604      	mov	r4, r0
 8009626:	d158      	bne.n	80096da <_malloc_r+0xf6>
 8009628:	f8d8 4000 	ldr.w	r4, [r8]
 800962c:	4627      	mov	r7, r4
 800962e:	2f00      	cmp	r7, #0
 8009630:	d143      	bne.n	80096ba <_malloc_r+0xd6>
 8009632:	2c00      	cmp	r4, #0
 8009634:	d04b      	beq.n	80096ce <_malloc_r+0xea>
 8009636:	6823      	ldr	r3, [r4, #0]
 8009638:	4639      	mov	r1, r7
 800963a:	4630      	mov	r0, r6
 800963c:	eb04 0903 	add.w	r9, r4, r3
 8009640:	f000 fc9c 	bl	8009f7c <_sbrk_r>
 8009644:	4581      	cmp	r9, r0
 8009646:	d142      	bne.n	80096ce <_malloc_r+0xea>
 8009648:	6821      	ldr	r1, [r4, #0]
 800964a:	4630      	mov	r0, r6
 800964c:	1a6d      	subs	r5, r5, r1
 800964e:	4629      	mov	r1, r5
 8009650:	f7ff ffa6 	bl	80095a0 <sbrk_aligned>
 8009654:	3001      	adds	r0, #1
 8009656:	d03a      	beq.n	80096ce <_malloc_r+0xea>
 8009658:	6823      	ldr	r3, [r4, #0]
 800965a:	442b      	add	r3, r5
 800965c:	6023      	str	r3, [r4, #0]
 800965e:	f8d8 3000 	ldr.w	r3, [r8]
 8009662:	685a      	ldr	r2, [r3, #4]
 8009664:	bb62      	cbnz	r2, 80096c0 <_malloc_r+0xdc>
 8009666:	f8c8 7000 	str.w	r7, [r8]
 800966a:	e00f      	b.n	800968c <_malloc_r+0xa8>
 800966c:	6822      	ldr	r2, [r4, #0]
 800966e:	1b52      	subs	r2, r2, r5
 8009670:	d420      	bmi.n	80096b4 <_malloc_r+0xd0>
 8009672:	2a0b      	cmp	r2, #11
 8009674:	d917      	bls.n	80096a6 <_malloc_r+0xc2>
 8009676:	1961      	adds	r1, r4, r5
 8009678:	42a3      	cmp	r3, r4
 800967a:	6025      	str	r5, [r4, #0]
 800967c:	bf18      	it	ne
 800967e:	6059      	strne	r1, [r3, #4]
 8009680:	6863      	ldr	r3, [r4, #4]
 8009682:	bf08      	it	eq
 8009684:	f8c8 1000 	streq.w	r1, [r8]
 8009688:	5162      	str	r2, [r4, r5]
 800968a:	604b      	str	r3, [r1, #4]
 800968c:	4630      	mov	r0, r6
 800968e:	f000 f82f 	bl	80096f0 <__malloc_unlock>
 8009692:	f104 000b 	add.w	r0, r4, #11
 8009696:	1d23      	adds	r3, r4, #4
 8009698:	f020 0007 	bic.w	r0, r0, #7
 800969c:	1ac2      	subs	r2, r0, r3
 800969e:	bf1c      	itt	ne
 80096a0:	1a1b      	subne	r3, r3, r0
 80096a2:	50a3      	strne	r3, [r4, r2]
 80096a4:	e7af      	b.n	8009606 <_malloc_r+0x22>
 80096a6:	6862      	ldr	r2, [r4, #4]
 80096a8:	42a3      	cmp	r3, r4
 80096aa:	bf0c      	ite	eq
 80096ac:	f8c8 2000 	streq.w	r2, [r8]
 80096b0:	605a      	strne	r2, [r3, #4]
 80096b2:	e7eb      	b.n	800968c <_malloc_r+0xa8>
 80096b4:	4623      	mov	r3, r4
 80096b6:	6864      	ldr	r4, [r4, #4]
 80096b8:	e7ae      	b.n	8009618 <_malloc_r+0x34>
 80096ba:	463c      	mov	r4, r7
 80096bc:	687f      	ldr	r7, [r7, #4]
 80096be:	e7b6      	b.n	800962e <_malloc_r+0x4a>
 80096c0:	461a      	mov	r2, r3
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	42a3      	cmp	r3, r4
 80096c6:	d1fb      	bne.n	80096c0 <_malloc_r+0xdc>
 80096c8:	2300      	movs	r3, #0
 80096ca:	6053      	str	r3, [r2, #4]
 80096cc:	e7de      	b.n	800968c <_malloc_r+0xa8>
 80096ce:	230c      	movs	r3, #12
 80096d0:	4630      	mov	r0, r6
 80096d2:	6033      	str	r3, [r6, #0]
 80096d4:	f000 f80c 	bl	80096f0 <__malloc_unlock>
 80096d8:	e794      	b.n	8009604 <_malloc_r+0x20>
 80096da:	6005      	str	r5, [r0, #0]
 80096dc:	e7d6      	b.n	800968c <_malloc_r+0xa8>
 80096de:	bf00      	nop
 80096e0:	2000162c 	.word	0x2000162c

080096e4 <__malloc_lock>:
 80096e4:	4801      	ldr	r0, [pc, #4]	@ (80096ec <__malloc_lock+0x8>)
 80096e6:	f7ff bf10 	b.w	800950a <__retarget_lock_acquire_recursive>
 80096ea:	bf00      	nop
 80096ec:	20001624 	.word	0x20001624

080096f0 <__malloc_unlock>:
 80096f0:	4801      	ldr	r0, [pc, #4]	@ (80096f8 <__malloc_unlock+0x8>)
 80096f2:	f7ff bf0b 	b.w	800950c <__retarget_lock_release_recursive>
 80096f6:	bf00      	nop
 80096f8:	20001624 	.word	0x20001624

080096fc <__sfputc_r>:
 80096fc:	6893      	ldr	r3, [r2, #8]
 80096fe:	b410      	push	{r4}
 8009700:	3b01      	subs	r3, #1
 8009702:	2b00      	cmp	r3, #0
 8009704:	6093      	str	r3, [r2, #8]
 8009706:	da07      	bge.n	8009718 <__sfputc_r+0x1c>
 8009708:	6994      	ldr	r4, [r2, #24]
 800970a:	42a3      	cmp	r3, r4
 800970c:	db01      	blt.n	8009712 <__sfputc_r+0x16>
 800970e:	290a      	cmp	r1, #10
 8009710:	d102      	bne.n	8009718 <__sfputc_r+0x1c>
 8009712:	bc10      	pop	{r4}
 8009714:	f000 bb9e 	b.w	8009e54 <__swbuf_r>
 8009718:	6813      	ldr	r3, [r2, #0]
 800971a:	1c58      	adds	r0, r3, #1
 800971c:	6010      	str	r0, [r2, #0]
 800971e:	7019      	strb	r1, [r3, #0]
 8009720:	4608      	mov	r0, r1
 8009722:	bc10      	pop	{r4}
 8009724:	4770      	bx	lr

08009726 <__sfputs_r>:
 8009726:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009728:	4606      	mov	r6, r0
 800972a:	460f      	mov	r7, r1
 800972c:	4614      	mov	r4, r2
 800972e:	18d5      	adds	r5, r2, r3
 8009730:	42ac      	cmp	r4, r5
 8009732:	d101      	bne.n	8009738 <__sfputs_r+0x12>
 8009734:	2000      	movs	r0, #0
 8009736:	e007      	b.n	8009748 <__sfputs_r+0x22>
 8009738:	463a      	mov	r2, r7
 800973a:	4630      	mov	r0, r6
 800973c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009740:	f7ff ffdc 	bl	80096fc <__sfputc_r>
 8009744:	1c43      	adds	r3, r0, #1
 8009746:	d1f3      	bne.n	8009730 <__sfputs_r+0xa>
 8009748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800974c <_vfiprintf_r>:
 800974c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009750:	460d      	mov	r5, r1
 8009752:	4614      	mov	r4, r2
 8009754:	4698      	mov	r8, r3
 8009756:	4606      	mov	r6, r0
 8009758:	b09d      	sub	sp, #116	@ 0x74
 800975a:	b118      	cbz	r0, 8009764 <_vfiprintf_r+0x18>
 800975c:	6a03      	ldr	r3, [r0, #32]
 800975e:	b90b      	cbnz	r3, 8009764 <_vfiprintf_r+0x18>
 8009760:	f7ff fdc6 	bl	80092f0 <__sinit>
 8009764:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009766:	07d9      	lsls	r1, r3, #31
 8009768:	d405      	bmi.n	8009776 <_vfiprintf_r+0x2a>
 800976a:	89ab      	ldrh	r3, [r5, #12]
 800976c:	059a      	lsls	r2, r3, #22
 800976e:	d402      	bmi.n	8009776 <_vfiprintf_r+0x2a>
 8009770:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009772:	f7ff feca 	bl	800950a <__retarget_lock_acquire_recursive>
 8009776:	89ab      	ldrh	r3, [r5, #12]
 8009778:	071b      	lsls	r3, r3, #28
 800977a:	d501      	bpl.n	8009780 <_vfiprintf_r+0x34>
 800977c:	692b      	ldr	r3, [r5, #16]
 800977e:	b99b      	cbnz	r3, 80097a8 <_vfiprintf_r+0x5c>
 8009780:	4629      	mov	r1, r5
 8009782:	4630      	mov	r0, r6
 8009784:	f000 fba4 	bl	8009ed0 <__swsetup_r>
 8009788:	b170      	cbz	r0, 80097a8 <_vfiprintf_r+0x5c>
 800978a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800978c:	07dc      	lsls	r4, r3, #31
 800978e:	d504      	bpl.n	800979a <_vfiprintf_r+0x4e>
 8009790:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009794:	b01d      	add	sp, #116	@ 0x74
 8009796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800979a:	89ab      	ldrh	r3, [r5, #12]
 800979c:	0598      	lsls	r0, r3, #22
 800979e:	d4f7      	bmi.n	8009790 <_vfiprintf_r+0x44>
 80097a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80097a2:	f7ff feb3 	bl	800950c <__retarget_lock_release_recursive>
 80097a6:	e7f3      	b.n	8009790 <_vfiprintf_r+0x44>
 80097a8:	2300      	movs	r3, #0
 80097aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80097ac:	2320      	movs	r3, #32
 80097ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80097b2:	2330      	movs	r3, #48	@ 0x30
 80097b4:	f04f 0901 	mov.w	r9, #1
 80097b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80097bc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009968 <_vfiprintf_r+0x21c>
 80097c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80097c4:	4623      	mov	r3, r4
 80097c6:	469a      	mov	sl, r3
 80097c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097cc:	b10a      	cbz	r2, 80097d2 <_vfiprintf_r+0x86>
 80097ce:	2a25      	cmp	r2, #37	@ 0x25
 80097d0:	d1f9      	bne.n	80097c6 <_vfiprintf_r+0x7a>
 80097d2:	ebba 0b04 	subs.w	fp, sl, r4
 80097d6:	d00b      	beq.n	80097f0 <_vfiprintf_r+0xa4>
 80097d8:	465b      	mov	r3, fp
 80097da:	4622      	mov	r2, r4
 80097dc:	4629      	mov	r1, r5
 80097de:	4630      	mov	r0, r6
 80097e0:	f7ff ffa1 	bl	8009726 <__sfputs_r>
 80097e4:	3001      	adds	r0, #1
 80097e6:	f000 80a7 	beq.w	8009938 <_vfiprintf_r+0x1ec>
 80097ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80097ec:	445a      	add	r2, fp
 80097ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80097f0:	f89a 3000 	ldrb.w	r3, [sl]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	f000 809f 	beq.w	8009938 <_vfiprintf_r+0x1ec>
 80097fa:	2300      	movs	r3, #0
 80097fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009800:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009804:	f10a 0a01 	add.w	sl, sl, #1
 8009808:	9304      	str	r3, [sp, #16]
 800980a:	9307      	str	r3, [sp, #28]
 800980c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009810:	931a      	str	r3, [sp, #104]	@ 0x68
 8009812:	4654      	mov	r4, sl
 8009814:	2205      	movs	r2, #5
 8009816:	f814 1b01 	ldrb.w	r1, [r4], #1
 800981a:	4853      	ldr	r0, [pc, #332]	@ (8009968 <_vfiprintf_r+0x21c>)
 800981c:	f000 fbbe 	bl	8009f9c <memchr>
 8009820:	9a04      	ldr	r2, [sp, #16]
 8009822:	b9d8      	cbnz	r0, 800985c <_vfiprintf_r+0x110>
 8009824:	06d1      	lsls	r1, r2, #27
 8009826:	bf44      	itt	mi
 8009828:	2320      	movmi	r3, #32
 800982a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800982e:	0713      	lsls	r3, r2, #28
 8009830:	bf44      	itt	mi
 8009832:	232b      	movmi	r3, #43	@ 0x2b
 8009834:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009838:	f89a 3000 	ldrb.w	r3, [sl]
 800983c:	2b2a      	cmp	r3, #42	@ 0x2a
 800983e:	d015      	beq.n	800986c <_vfiprintf_r+0x120>
 8009840:	4654      	mov	r4, sl
 8009842:	2000      	movs	r0, #0
 8009844:	f04f 0c0a 	mov.w	ip, #10
 8009848:	9a07      	ldr	r2, [sp, #28]
 800984a:	4621      	mov	r1, r4
 800984c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009850:	3b30      	subs	r3, #48	@ 0x30
 8009852:	2b09      	cmp	r3, #9
 8009854:	d94b      	bls.n	80098ee <_vfiprintf_r+0x1a2>
 8009856:	b1b0      	cbz	r0, 8009886 <_vfiprintf_r+0x13a>
 8009858:	9207      	str	r2, [sp, #28]
 800985a:	e014      	b.n	8009886 <_vfiprintf_r+0x13a>
 800985c:	eba0 0308 	sub.w	r3, r0, r8
 8009860:	fa09 f303 	lsl.w	r3, r9, r3
 8009864:	4313      	orrs	r3, r2
 8009866:	46a2      	mov	sl, r4
 8009868:	9304      	str	r3, [sp, #16]
 800986a:	e7d2      	b.n	8009812 <_vfiprintf_r+0xc6>
 800986c:	9b03      	ldr	r3, [sp, #12]
 800986e:	1d19      	adds	r1, r3, #4
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	9103      	str	r1, [sp, #12]
 8009874:	2b00      	cmp	r3, #0
 8009876:	bfbb      	ittet	lt
 8009878:	425b      	neglt	r3, r3
 800987a:	f042 0202 	orrlt.w	r2, r2, #2
 800987e:	9307      	strge	r3, [sp, #28]
 8009880:	9307      	strlt	r3, [sp, #28]
 8009882:	bfb8      	it	lt
 8009884:	9204      	strlt	r2, [sp, #16]
 8009886:	7823      	ldrb	r3, [r4, #0]
 8009888:	2b2e      	cmp	r3, #46	@ 0x2e
 800988a:	d10a      	bne.n	80098a2 <_vfiprintf_r+0x156>
 800988c:	7863      	ldrb	r3, [r4, #1]
 800988e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009890:	d132      	bne.n	80098f8 <_vfiprintf_r+0x1ac>
 8009892:	9b03      	ldr	r3, [sp, #12]
 8009894:	3402      	adds	r4, #2
 8009896:	1d1a      	adds	r2, r3, #4
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	9203      	str	r2, [sp, #12]
 800989c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80098a0:	9305      	str	r3, [sp, #20]
 80098a2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800996c <_vfiprintf_r+0x220>
 80098a6:	2203      	movs	r2, #3
 80098a8:	4650      	mov	r0, sl
 80098aa:	7821      	ldrb	r1, [r4, #0]
 80098ac:	f000 fb76 	bl	8009f9c <memchr>
 80098b0:	b138      	cbz	r0, 80098c2 <_vfiprintf_r+0x176>
 80098b2:	2240      	movs	r2, #64	@ 0x40
 80098b4:	9b04      	ldr	r3, [sp, #16]
 80098b6:	eba0 000a 	sub.w	r0, r0, sl
 80098ba:	4082      	lsls	r2, r0
 80098bc:	4313      	orrs	r3, r2
 80098be:	3401      	adds	r4, #1
 80098c0:	9304      	str	r3, [sp, #16]
 80098c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098c6:	2206      	movs	r2, #6
 80098c8:	4829      	ldr	r0, [pc, #164]	@ (8009970 <_vfiprintf_r+0x224>)
 80098ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80098ce:	f000 fb65 	bl	8009f9c <memchr>
 80098d2:	2800      	cmp	r0, #0
 80098d4:	d03f      	beq.n	8009956 <_vfiprintf_r+0x20a>
 80098d6:	4b27      	ldr	r3, [pc, #156]	@ (8009974 <_vfiprintf_r+0x228>)
 80098d8:	bb1b      	cbnz	r3, 8009922 <_vfiprintf_r+0x1d6>
 80098da:	9b03      	ldr	r3, [sp, #12]
 80098dc:	3307      	adds	r3, #7
 80098de:	f023 0307 	bic.w	r3, r3, #7
 80098e2:	3308      	adds	r3, #8
 80098e4:	9303      	str	r3, [sp, #12]
 80098e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098e8:	443b      	add	r3, r7
 80098ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80098ec:	e76a      	b.n	80097c4 <_vfiprintf_r+0x78>
 80098ee:	460c      	mov	r4, r1
 80098f0:	2001      	movs	r0, #1
 80098f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80098f6:	e7a8      	b.n	800984a <_vfiprintf_r+0xfe>
 80098f8:	2300      	movs	r3, #0
 80098fa:	f04f 0c0a 	mov.w	ip, #10
 80098fe:	4619      	mov	r1, r3
 8009900:	3401      	adds	r4, #1
 8009902:	9305      	str	r3, [sp, #20]
 8009904:	4620      	mov	r0, r4
 8009906:	f810 2b01 	ldrb.w	r2, [r0], #1
 800990a:	3a30      	subs	r2, #48	@ 0x30
 800990c:	2a09      	cmp	r2, #9
 800990e:	d903      	bls.n	8009918 <_vfiprintf_r+0x1cc>
 8009910:	2b00      	cmp	r3, #0
 8009912:	d0c6      	beq.n	80098a2 <_vfiprintf_r+0x156>
 8009914:	9105      	str	r1, [sp, #20]
 8009916:	e7c4      	b.n	80098a2 <_vfiprintf_r+0x156>
 8009918:	4604      	mov	r4, r0
 800991a:	2301      	movs	r3, #1
 800991c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009920:	e7f0      	b.n	8009904 <_vfiprintf_r+0x1b8>
 8009922:	ab03      	add	r3, sp, #12
 8009924:	9300      	str	r3, [sp, #0]
 8009926:	462a      	mov	r2, r5
 8009928:	4630      	mov	r0, r6
 800992a:	4b13      	ldr	r3, [pc, #76]	@ (8009978 <_vfiprintf_r+0x22c>)
 800992c:	a904      	add	r1, sp, #16
 800992e:	f3af 8000 	nop.w
 8009932:	4607      	mov	r7, r0
 8009934:	1c78      	adds	r0, r7, #1
 8009936:	d1d6      	bne.n	80098e6 <_vfiprintf_r+0x19a>
 8009938:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800993a:	07d9      	lsls	r1, r3, #31
 800993c:	d405      	bmi.n	800994a <_vfiprintf_r+0x1fe>
 800993e:	89ab      	ldrh	r3, [r5, #12]
 8009940:	059a      	lsls	r2, r3, #22
 8009942:	d402      	bmi.n	800994a <_vfiprintf_r+0x1fe>
 8009944:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009946:	f7ff fde1 	bl	800950c <__retarget_lock_release_recursive>
 800994a:	89ab      	ldrh	r3, [r5, #12]
 800994c:	065b      	lsls	r3, r3, #25
 800994e:	f53f af1f 	bmi.w	8009790 <_vfiprintf_r+0x44>
 8009952:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009954:	e71e      	b.n	8009794 <_vfiprintf_r+0x48>
 8009956:	ab03      	add	r3, sp, #12
 8009958:	9300      	str	r3, [sp, #0]
 800995a:	462a      	mov	r2, r5
 800995c:	4630      	mov	r0, r6
 800995e:	4b06      	ldr	r3, [pc, #24]	@ (8009978 <_vfiprintf_r+0x22c>)
 8009960:	a904      	add	r1, sp, #16
 8009962:	f000 f87d 	bl	8009a60 <_printf_i>
 8009966:	e7e4      	b.n	8009932 <_vfiprintf_r+0x1e6>
 8009968:	0800a186 	.word	0x0800a186
 800996c:	0800a18c 	.word	0x0800a18c
 8009970:	0800a190 	.word	0x0800a190
 8009974:	00000000 	.word	0x00000000
 8009978:	08009727 	.word	0x08009727

0800997c <_printf_common>:
 800997c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009980:	4616      	mov	r6, r2
 8009982:	4698      	mov	r8, r3
 8009984:	688a      	ldr	r2, [r1, #8]
 8009986:	690b      	ldr	r3, [r1, #16]
 8009988:	4607      	mov	r7, r0
 800998a:	4293      	cmp	r3, r2
 800998c:	bfb8      	it	lt
 800998e:	4613      	movlt	r3, r2
 8009990:	6033      	str	r3, [r6, #0]
 8009992:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009996:	460c      	mov	r4, r1
 8009998:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800999c:	b10a      	cbz	r2, 80099a2 <_printf_common+0x26>
 800999e:	3301      	adds	r3, #1
 80099a0:	6033      	str	r3, [r6, #0]
 80099a2:	6823      	ldr	r3, [r4, #0]
 80099a4:	0699      	lsls	r1, r3, #26
 80099a6:	bf42      	ittt	mi
 80099a8:	6833      	ldrmi	r3, [r6, #0]
 80099aa:	3302      	addmi	r3, #2
 80099ac:	6033      	strmi	r3, [r6, #0]
 80099ae:	6825      	ldr	r5, [r4, #0]
 80099b0:	f015 0506 	ands.w	r5, r5, #6
 80099b4:	d106      	bne.n	80099c4 <_printf_common+0x48>
 80099b6:	f104 0a19 	add.w	sl, r4, #25
 80099ba:	68e3      	ldr	r3, [r4, #12]
 80099bc:	6832      	ldr	r2, [r6, #0]
 80099be:	1a9b      	subs	r3, r3, r2
 80099c0:	42ab      	cmp	r3, r5
 80099c2:	dc2b      	bgt.n	8009a1c <_printf_common+0xa0>
 80099c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80099c8:	6822      	ldr	r2, [r4, #0]
 80099ca:	3b00      	subs	r3, #0
 80099cc:	bf18      	it	ne
 80099ce:	2301      	movne	r3, #1
 80099d0:	0692      	lsls	r2, r2, #26
 80099d2:	d430      	bmi.n	8009a36 <_printf_common+0xba>
 80099d4:	4641      	mov	r1, r8
 80099d6:	4638      	mov	r0, r7
 80099d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80099dc:	47c8      	blx	r9
 80099de:	3001      	adds	r0, #1
 80099e0:	d023      	beq.n	8009a2a <_printf_common+0xae>
 80099e2:	6823      	ldr	r3, [r4, #0]
 80099e4:	6922      	ldr	r2, [r4, #16]
 80099e6:	f003 0306 	and.w	r3, r3, #6
 80099ea:	2b04      	cmp	r3, #4
 80099ec:	bf14      	ite	ne
 80099ee:	2500      	movne	r5, #0
 80099f0:	6833      	ldreq	r3, [r6, #0]
 80099f2:	f04f 0600 	mov.w	r6, #0
 80099f6:	bf08      	it	eq
 80099f8:	68e5      	ldreq	r5, [r4, #12]
 80099fa:	f104 041a 	add.w	r4, r4, #26
 80099fe:	bf08      	it	eq
 8009a00:	1aed      	subeq	r5, r5, r3
 8009a02:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009a06:	bf08      	it	eq
 8009a08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	bfc4      	itt	gt
 8009a10:	1a9b      	subgt	r3, r3, r2
 8009a12:	18ed      	addgt	r5, r5, r3
 8009a14:	42b5      	cmp	r5, r6
 8009a16:	d11a      	bne.n	8009a4e <_printf_common+0xd2>
 8009a18:	2000      	movs	r0, #0
 8009a1a:	e008      	b.n	8009a2e <_printf_common+0xb2>
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	4652      	mov	r2, sl
 8009a20:	4641      	mov	r1, r8
 8009a22:	4638      	mov	r0, r7
 8009a24:	47c8      	blx	r9
 8009a26:	3001      	adds	r0, #1
 8009a28:	d103      	bne.n	8009a32 <_printf_common+0xb6>
 8009a2a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a32:	3501      	adds	r5, #1
 8009a34:	e7c1      	b.n	80099ba <_printf_common+0x3e>
 8009a36:	2030      	movs	r0, #48	@ 0x30
 8009a38:	18e1      	adds	r1, r4, r3
 8009a3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009a3e:	1c5a      	adds	r2, r3, #1
 8009a40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009a44:	4422      	add	r2, r4
 8009a46:	3302      	adds	r3, #2
 8009a48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009a4c:	e7c2      	b.n	80099d4 <_printf_common+0x58>
 8009a4e:	2301      	movs	r3, #1
 8009a50:	4622      	mov	r2, r4
 8009a52:	4641      	mov	r1, r8
 8009a54:	4638      	mov	r0, r7
 8009a56:	47c8      	blx	r9
 8009a58:	3001      	adds	r0, #1
 8009a5a:	d0e6      	beq.n	8009a2a <_printf_common+0xae>
 8009a5c:	3601      	adds	r6, #1
 8009a5e:	e7d9      	b.n	8009a14 <_printf_common+0x98>

08009a60 <_printf_i>:
 8009a60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a64:	7e0f      	ldrb	r7, [r1, #24]
 8009a66:	4691      	mov	r9, r2
 8009a68:	2f78      	cmp	r7, #120	@ 0x78
 8009a6a:	4680      	mov	r8, r0
 8009a6c:	460c      	mov	r4, r1
 8009a6e:	469a      	mov	sl, r3
 8009a70:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009a72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009a76:	d807      	bhi.n	8009a88 <_printf_i+0x28>
 8009a78:	2f62      	cmp	r7, #98	@ 0x62
 8009a7a:	d80a      	bhi.n	8009a92 <_printf_i+0x32>
 8009a7c:	2f00      	cmp	r7, #0
 8009a7e:	f000 80d1 	beq.w	8009c24 <_printf_i+0x1c4>
 8009a82:	2f58      	cmp	r7, #88	@ 0x58
 8009a84:	f000 80b8 	beq.w	8009bf8 <_printf_i+0x198>
 8009a88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009a90:	e03a      	b.n	8009b08 <_printf_i+0xa8>
 8009a92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009a96:	2b15      	cmp	r3, #21
 8009a98:	d8f6      	bhi.n	8009a88 <_printf_i+0x28>
 8009a9a:	a101      	add	r1, pc, #4	@ (adr r1, 8009aa0 <_printf_i+0x40>)
 8009a9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009aa0:	08009af9 	.word	0x08009af9
 8009aa4:	08009b0d 	.word	0x08009b0d
 8009aa8:	08009a89 	.word	0x08009a89
 8009aac:	08009a89 	.word	0x08009a89
 8009ab0:	08009a89 	.word	0x08009a89
 8009ab4:	08009a89 	.word	0x08009a89
 8009ab8:	08009b0d 	.word	0x08009b0d
 8009abc:	08009a89 	.word	0x08009a89
 8009ac0:	08009a89 	.word	0x08009a89
 8009ac4:	08009a89 	.word	0x08009a89
 8009ac8:	08009a89 	.word	0x08009a89
 8009acc:	08009c0b 	.word	0x08009c0b
 8009ad0:	08009b37 	.word	0x08009b37
 8009ad4:	08009bc5 	.word	0x08009bc5
 8009ad8:	08009a89 	.word	0x08009a89
 8009adc:	08009a89 	.word	0x08009a89
 8009ae0:	08009c2d 	.word	0x08009c2d
 8009ae4:	08009a89 	.word	0x08009a89
 8009ae8:	08009b37 	.word	0x08009b37
 8009aec:	08009a89 	.word	0x08009a89
 8009af0:	08009a89 	.word	0x08009a89
 8009af4:	08009bcd 	.word	0x08009bcd
 8009af8:	6833      	ldr	r3, [r6, #0]
 8009afa:	1d1a      	adds	r2, r3, #4
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	6032      	str	r2, [r6, #0]
 8009b00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009b04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009b08:	2301      	movs	r3, #1
 8009b0a:	e09c      	b.n	8009c46 <_printf_i+0x1e6>
 8009b0c:	6833      	ldr	r3, [r6, #0]
 8009b0e:	6820      	ldr	r0, [r4, #0]
 8009b10:	1d19      	adds	r1, r3, #4
 8009b12:	6031      	str	r1, [r6, #0]
 8009b14:	0606      	lsls	r6, r0, #24
 8009b16:	d501      	bpl.n	8009b1c <_printf_i+0xbc>
 8009b18:	681d      	ldr	r5, [r3, #0]
 8009b1a:	e003      	b.n	8009b24 <_printf_i+0xc4>
 8009b1c:	0645      	lsls	r5, r0, #25
 8009b1e:	d5fb      	bpl.n	8009b18 <_printf_i+0xb8>
 8009b20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009b24:	2d00      	cmp	r5, #0
 8009b26:	da03      	bge.n	8009b30 <_printf_i+0xd0>
 8009b28:	232d      	movs	r3, #45	@ 0x2d
 8009b2a:	426d      	negs	r5, r5
 8009b2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b30:	230a      	movs	r3, #10
 8009b32:	4858      	ldr	r0, [pc, #352]	@ (8009c94 <_printf_i+0x234>)
 8009b34:	e011      	b.n	8009b5a <_printf_i+0xfa>
 8009b36:	6821      	ldr	r1, [r4, #0]
 8009b38:	6833      	ldr	r3, [r6, #0]
 8009b3a:	0608      	lsls	r0, r1, #24
 8009b3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009b40:	d402      	bmi.n	8009b48 <_printf_i+0xe8>
 8009b42:	0649      	lsls	r1, r1, #25
 8009b44:	bf48      	it	mi
 8009b46:	b2ad      	uxthmi	r5, r5
 8009b48:	2f6f      	cmp	r7, #111	@ 0x6f
 8009b4a:	6033      	str	r3, [r6, #0]
 8009b4c:	bf14      	ite	ne
 8009b4e:	230a      	movne	r3, #10
 8009b50:	2308      	moveq	r3, #8
 8009b52:	4850      	ldr	r0, [pc, #320]	@ (8009c94 <_printf_i+0x234>)
 8009b54:	2100      	movs	r1, #0
 8009b56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009b5a:	6866      	ldr	r6, [r4, #4]
 8009b5c:	2e00      	cmp	r6, #0
 8009b5e:	60a6      	str	r6, [r4, #8]
 8009b60:	db05      	blt.n	8009b6e <_printf_i+0x10e>
 8009b62:	6821      	ldr	r1, [r4, #0]
 8009b64:	432e      	orrs	r6, r5
 8009b66:	f021 0104 	bic.w	r1, r1, #4
 8009b6a:	6021      	str	r1, [r4, #0]
 8009b6c:	d04b      	beq.n	8009c06 <_printf_i+0x1a6>
 8009b6e:	4616      	mov	r6, r2
 8009b70:	fbb5 f1f3 	udiv	r1, r5, r3
 8009b74:	fb03 5711 	mls	r7, r3, r1, r5
 8009b78:	5dc7      	ldrb	r7, [r0, r7]
 8009b7a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009b7e:	462f      	mov	r7, r5
 8009b80:	42bb      	cmp	r3, r7
 8009b82:	460d      	mov	r5, r1
 8009b84:	d9f4      	bls.n	8009b70 <_printf_i+0x110>
 8009b86:	2b08      	cmp	r3, #8
 8009b88:	d10b      	bne.n	8009ba2 <_printf_i+0x142>
 8009b8a:	6823      	ldr	r3, [r4, #0]
 8009b8c:	07df      	lsls	r7, r3, #31
 8009b8e:	d508      	bpl.n	8009ba2 <_printf_i+0x142>
 8009b90:	6923      	ldr	r3, [r4, #16]
 8009b92:	6861      	ldr	r1, [r4, #4]
 8009b94:	4299      	cmp	r1, r3
 8009b96:	bfde      	ittt	le
 8009b98:	2330      	movle	r3, #48	@ 0x30
 8009b9a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009b9e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009ba2:	1b92      	subs	r2, r2, r6
 8009ba4:	6122      	str	r2, [r4, #16]
 8009ba6:	464b      	mov	r3, r9
 8009ba8:	4621      	mov	r1, r4
 8009baa:	4640      	mov	r0, r8
 8009bac:	f8cd a000 	str.w	sl, [sp]
 8009bb0:	aa03      	add	r2, sp, #12
 8009bb2:	f7ff fee3 	bl	800997c <_printf_common>
 8009bb6:	3001      	adds	r0, #1
 8009bb8:	d14a      	bne.n	8009c50 <_printf_i+0x1f0>
 8009bba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009bbe:	b004      	add	sp, #16
 8009bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bc4:	6823      	ldr	r3, [r4, #0]
 8009bc6:	f043 0320 	orr.w	r3, r3, #32
 8009bca:	6023      	str	r3, [r4, #0]
 8009bcc:	2778      	movs	r7, #120	@ 0x78
 8009bce:	4832      	ldr	r0, [pc, #200]	@ (8009c98 <_printf_i+0x238>)
 8009bd0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009bd4:	6823      	ldr	r3, [r4, #0]
 8009bd6:	6831      	ldr	r1, [r6, #0]
 8009bd8:	061f      	lsls	r7, r3, #24
 8009bda:	f851 5b04 	ldr.w	r5, [r1], #4
 8009bde:	d402      	bmi.n	8009be6 <_printf_i+0x186>
 8009be0:	065f      	lsls	r7, r3, #25
 8009be2:	bf48      	it	mi
 8009be4:	b2ad      	uxthmi	r5, r5
 8009be6:	6031      	str	r1, [r6, #0]
 8009be8:	07d9      	lsls	r1, r3, #31
 8009bea:	bf44      	itt	mi
 8009bec:	f043 0320 	orrmi.w	r3, r3, #32
 8009bf0:	6023      	strmi	r3, [r4, #0]
 8009bf2:	b11d      	cbz	r5, 8009bfc <_printf_i+0x19c>
 8009bf4:	2310      	movs	r3, #16
 8009bf6:	e7ad      	b.n	8009b54 <_printf_i+0xf4>
 8009bf8:	4826      	ldr	r0, [pc, #152]	@ (8009c94 <_printf_i+0x234>)
 8009bfa:	e7e9      	b.n	8009bd0 <_printf_i+0x170>
 8009bfc:	6823      	ldr	r3, [r4, #0]
 8009bfe:	f023 0320 	bic.w	r3, r3, #32
 8009c02:	6023      	str	r3, [r4, #0]
 8009c04:	e7f6      	b.n	8009bf4 <_printf_i+0x194>
 8009c06:	4616      	mov	r6, r2
 8009c08:	e7bd      	b.n	8009b86 <_printf_i+0x126>
 8009c0a:	6833      	ldr	r3, [r6, #0]
 8009c0c:	6825      	ldr	r5, [r4, #0]
 8009c0e:	1d18      	adds	r0, r3, #4
 8009c10:	6961      	ldr	r1, [r4, #20]
 8009c12:	6030      	str	r0, [r6, #0]
 8009c14:	062e      	lsls	r6, r5, #24
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	d501      	bpl.n	8009c1e <_printf_i+0x1be>
 8009c1a:	6019      	str	r1, [r3, #0]
 8009c1c:	e002      	b.n	8009c24 <_printf_i+0x1c4>
 8009c1e:	0668      	lsls	r0, r5, #25
 8009c20:	d5fb      	bpl.n	8009c1a <_printf_i+0x1ba>
 8009c22:	8019      	strh	r1, [r3, #0]
 8009c24:	2300      	movs	r3, #0
 8009c26:	4616      	mov	r6, r2
 8009c28:	6123      	str	r3, [r4, #16]
 8009c2a:	e7bc      	b.n	8009ba6 <_printf_i+0x146>
 8009c2c:	6833      	ldr	r3, [r6, #0]
 8009c2e:	2100      	movs	r1, #0
 8009c30:	1d1a      	adds	r2, r3, #4
 8009c32:	6032      	str	r2, [r6, #0]
 8009c34:	681e      	ldr	r6, [r3, #0]
 8009c36:	6862      	ldr	r2, [r4, #4]
 8009c38:	4630      	mov	r0, r6
 8009c3a:	f000 f9af 	bl	8009f9c <memchr>
 8009c3e:	b108      	cbz	r0, 8009c44 <_printf_i+0x1e4>
 8009c40:	1b80      	subs	r0, r0, r6
 8009c42:	6060      	str	r0, [r4, #4]
 8009c44:	6863      	ldr	r3, [r4, #4]
 8009c46:	6123      	str	r3, [r4, #16]
 8009c48:	2300      	movs	r3, #0
 8009c4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c4e:	e7aa      	b.n	8009ba6 <_printf_i+0x146>
 8009c50:	4632      	mov	r2, r6
 8009c52:	4649      	mov	r1, r9
 8009c54:	4640      	mov	r0, r8
 8009c56:	6923      	ldr	r3, [r4, #16]
 8009c58:	47d0      	blx	sl
 8009c5a:	3001      	adds	r0, #1
 8009c5c:	d0ad      	beq.n	8009bba <_printf_i+0x15a>
 8009c5e:	6823      	ldr	r3, [r4, #0]
 8009c60:	079b      	lsls	r3, r3, #30
 8009c62:	d413      	bmi.n	8009c8c <_printf_i+0x22c>
 8009c64:	68e0      	ldr	r0, [r4, #12]
 8009c66:	9b03      	ldr	r3, [sp, #12]
 8009c68:	4298      	cmp	r0, r3
 8009c6a:	bfb8      	it	lt
 8009c6c:	4618      	movlt	r0, r3
 8009c6e:	e7a6      	b.n	8009bbe <_printf_i+0x15e>
 8009c70:	2301      	movs	r3, #1
 8009c72:	4632      	mov	r2, r6
 8009c74:	4649      	mov	r1, r9
 8009c76:	4640      	mov	r0, r8
 8009c78:	47d0      	blx	sl
 8009c7a:	3001      	adds	r0, #1
 8009c7c:	d09d      	beq.n	8009bba <_printf_i+0x15a>
 8009c7e:	3501      	adds	r5, #1
 8009c80:	68e3      	ldr	r3, [r4, #12]
 8009c82:	9903      	ldr	r1, [sp, #12]
 8009c84:	1a5b      	subs	r3, r3, r1
 8009c86:	42ab      	cmp	r3, r5
 8009c88:	dcf2      	bgt.n	8009c70 <_printf_i+0x210>
 8009c8a:	e7eb      	b.n	8009c64 <_printf_i+0x204>
 8009c8c:	2500      	movs	r5, #0
 8009c8e:	f104 0619 	add.w	r6, r4, #25
 8009c92:	e7f5      	b.n	8009c80 <_printf_i+0x220>
 8009c94:	0800a197 	.word	0x0800a197
 8009c98:	0800a1a8 	.word	0x0800a1a8

08009c9c <__sflush_r>:
 8009c9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ca2:	0716      	lsls	r6, r2, #28
 8009ca4:	4605      	mov	r5, r0
 8009ca6:	460c      	mov	r4, r1
 8009ca8:	d454      	bmi.n	8009d54 <__sflush_r+0xb8>
 8009caa:	684b      	ldr	r3, [r1, #4]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	dc02      	bgt.n	8009cb6 <__sflush_r+0x1a>
 8009cb0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	dd48      	ble.n	8009d48 <__sflush_r+0xac>
 8009cb6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009cb8:	2e00      	cmp	r6, #0
 8009cba:	d045      	beq.n	8009d48 <__sflush_r+0xac>
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009cc2:	682f      	ldr	r7, [r5, #0]
 8009cc4:	6a21      	ldr	r1, [r4, #32]
 8009cc6:	602b      	str	r3, [r5, #0]
 8009cc8:	d030      	beq.n	8009d2c <__sflush_r+0x90>
 8009cca:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009ccc:	89a3      	ldrh	r3, [r4, #12]
 8009cce:	0759      	lsls	r1, r3, #29
 8009cd0:	d505      	bpl.n	8009cde <__sflush_r+0x42>
 8009cd2:	6863      	ldr	r3, [r4, #4]
 8009cd4:	1ad2      	subs	r2, r2, r3
 8009cd6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009cd8:	b10b      	cbz	r3, 8009cde <__sflush_r+0x42>
 8009cda:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009cdc:	1ad2      	subs	r2, r2, r3
 8009cde:	2300      	movs	r3, #0
 8009ce0:	4628      	mov	r0, r5
 8009ce2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009ce4:	6a21      	ldr	r1, [r4, #32]
 8009ce6:	47b0      	blx	r6
 8009ce8:	1c43      	adds	r3, r0, #1
 8009cea:	89a3      	ldrh	r3, [r4, #12]
 8009cec:	d106      	bne.n	8009cfc <__sflush_r+0x60>
 8009cee:	6829      	ldr	r1, [r5, #0]
 8009cf0:	291d      	cmp	r1, #29
 8009cf2:	d82b      	bhi.n	8009d4c <__sflush_r+0xb0>
 8009cf4:	4a28      	ldr	r2, [pc, #160]	@ (8009d98 <__sflush_r+0xfc>)
 8009cf6:	40ca      	lsrs	r2, r1
 8009cf8:	07d6      	lsls	r6, r2, #31
 8009cfa:	d527      	bpl.n	8009d4c <__sflush_r+0xb0>
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	6062      	str	r2, [r4, #4]
 8009d00:	6922      	ldr	r2, [r4, #16]
 8009d02:	04d9      	lsls	r1, r3, #19
 8009d04:	6022      	str	r2, [r4, #0]
 8009d06:	d504      	bpl.n	8009d12 <__sflush_r+0x76>
 8009d08:	1c42      	adds	r2, r0, #1
 8009d0a:	d101      	bne.n	8009d10 <__sflush_r+0x74>
 8009d0c:	682b      	ldr	r3, [r5, #0]
 8009d0e:	b903      	cbnz	r3, 8009d12 <__sflush_r+0x76>
 8009d10:	6560      	str	r0, [r4, #84]	@ 0x54
 8009d12:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d14:	602f      	str	r7, [r5, #0]
 8009d16:	b1b9      	cbz	r1, 8009d48 <__sflush_r+0xac>
 8009d18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009d1c:	4299      	cmp	r1, r3
 8009d1e:	d002      	beq.n	8009d26 <__sflush_r+0x8a>
 8009d20:	4628      	mov	r0, r5
 8009d22:	f7ff fbf5 	bl	8009510 <_free_r>
 8009d26:	2300      	movs	r3, #0
 8009d28:	6363      	str	r3, [r4, #52]	@ 0x34
 8009d2a:	e00d      	b.n	8009d48 <__sflush_r+0xac>
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	4628      	mov	r0, r5
 8009d30:	47b0      	blx	r6
 8009d32:	4602      	mov	r2, r0
 8009d34:	1c50      	adds	r0, r2, #1
 8009d36:	d1c9      	bne.n	8009ccc <__sflush_r+0x30>
 8009d38:	682b      	ldr	r3, [r5, #0]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d0c6      	beq.n	8009ccc <__sflush_r+0x30>
 8009d3e:	2b1d      	cmp	r3, #29
 8009d40:	d001      	beq.n	8009d46 <__sflush_r+0xaa>
 8009d42:	2b16      	cmp	r3, #22
 8009d44:	d11d      	bne.n	8009d82 <__sflush_r+0xe6>
 8009d46:	602f      	str	r7, [r5, #0]
 8009d48:	2000      	movs	r0, #0
 8009d4a:	e021      	b.n	8009d90 <__sflush_r+0xf4>
 8009d4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d50:	b21b      	sxth	r3, r3
 8009d52:	e01a      	b.n	8009d8a <__sflush_r+0xee>
 8009d54:	690f      	ldr	r7, [r1, #16]
 8009d56:	2f00      	cmp	r7, #0
 8009d58:	d0f6      	beq.n	8009d48 <__sflush_r+0xac>
 8009d5a:	0793      	lsls	r3, r2, #30
 8009d5c:	bf18      	it	ne
 8009d5e:	2300      	movne	r3, #0
 8009d60:	680e      	ldr	r6, [r1, #0]
 8009d62:	bf08      	it	eq
 8009d64:	694b      	ldreq	r3, [r1, #20]
 8009d66:	1bf6      	subs	r6, r6, r7
 8009d68:	600f      	str	r7, [r1, #0]
 8009d6a:	608b      	str	r3, [r1, #8]
 8009d6c:	2e00      	cmp	r6, #0
 8009d6e:	ddeb      	ble.n	8009d48 <__sflush_r+0xac>
 8009d70:	4633      	mov	r3, r6
 8009d72:	463a      	mov	r2, r7
 8009d74:	4628      	mov	r0, r5
 8009d76:	6a21      	ldr	r1, [r4, #32]
 8009d78:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009d7c:	47e0      	blx	ip
 8009d7e:	2800      	cmp	r0, #0
 8009d80:	dc07      	bgt.n	8009d92 <__sflush_r+0xf6>
 8009d82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009d8e:	81a3      	strh	r3, [r4, #12]
 8009d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d92:	4407      	add	r7, r0
 8009d94:	1a36      	subs	r6, r6, r0
 8009d96:	e7e9      	b.n	8009d6c <__sflush_r+0xd0>
 8009d98:	20400001 	.word	0x20400001

08009d9c <_fflush_r>:
 8009d9c:	b538      	push	{r3, r4, r5, lr}
 8009d9e:	690b      	ldr	r3, [r1, #16]
 8009da0:	4605      	mov	r5, r0
 8009da2:	460c      	mov	r4, r1
 8009da4:	b913      	cbnz	r3, 8009dac <_fflush_r+0x10>
 8009da6:	2500      	movs	r5, #0
 8009da8:	4628      	mov	r0, r5
 8009daa:	bd38      	pop	{r3, r4, r5, pc}
 8009dac:	b118      	cbz	r0, 8009db6 <_fflush_r+0x1a>
 8009dae:	6a03      	ldr	r3, [r0, #32]
 8009db0:	b90b      	cbnz	r3, 8009db6 <_fflush_r+0x1a>
 8009db2:	f7ff fa9d 	bl	80092f0 <__sinit>
 8009db6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d0f3      	beq.n	8009da6 <_fflush_r+0xa>
 8009dbe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009dc0:	07d0      	lsls	r0, r2, #31
 8009dc2:	d404      	bmi.n	8009dce <_fflush_r+0x32>
 8009dc4:	0599      	lsls	r1, r3, #22
 8009dc6:	d402      	bmi.n	8009dce <_fflush_r+0x32>
 8009dc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009dca:	f7ff fb9e 	bl	800950a <__retarget_lock_acquire_recursive>
 8009dce:	4628      	mov	r0, r5
 8009dd0:	4621      	mov	r1, r4
 8009dd2:	f7ff ff63 	bl	8009c9c <__sflush_r>
 8009dd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009dd8:	4605      	mov	r5, r0
 8009dda:	07da      	lsls	r2, r3, #31
 8009ddc:	d4e4      	bmi.n	8009da8 <_fflush_r+0xc>
 8009dde:	89a3      	ldrh	r3, [r4, #12]
 8009de0:	059b      	lsls	r3, r3, #22
 8009de2:	d4e1      	bmi.n	8009da8 <_fflush_r+0xc>
 8009de4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009de6:	f7ff fb91 	bl	800950c <__retarget_lock_release_recursive>
 8009dea:	e7dd      	b.n	8009da8 <_fflush_r+0xc>

08009dec <_putc_r>:
 8009dec:	b570      	push	{r4, r5, r6, lr}
 8009dee:	460d      	mov	r5, r1
 8009df0:	4614      	mov	r4, r2
 8009df2:	4606      	mov	r6, r0
 8009df4:	b118      	cbz	r0, 8009dfe <_putc_r+0x12>
 8009df6:	6a03      	ldr	r3, [r0, #32]
 8009df8:	b90b      	cbnz	r3, 8009dfe <_putc_r+0x12>
 8009dfa:	f7ff fa79 	bl	80092f0 <__sinit>
 8009dfe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009e00:	07d8      	lsls	r0, r3, #31
 8009e02:	d405      	bmi.n	8009e10 <_putc_r+0x24>
 8009e04:	89a3      	ldrh	r3, [r4, #12]
 8009e06:	0599      	lsls	r1, r3, #22
 8009e08:	d402      	bmi.n	8009e10 <_putc_r+0x24>
 8009e0a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e0c:	f7ff fb7d 	bl	800950a <__retarget_lock_acquire_recursive>
 8009e10:	68a3      	ldr	r3, [r4, #8]
 8009e12:	3b01      	subs	r3, #1
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	60a3      	str	r3, [r4, #8]
 8009e18:	da05      	bge.n	8009e26 <_putc_r+0x3a>
 8009e1a:	69a2      	ldr	r2, [r4, #24]
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	db12      	blt.n	8009e46 <_putc_r+0x5a>
 8009e20:	b2eb      	uxtb	r3, r5
 8009e22:	2b0a      	cmp	r3, #10
 8009e24:	d00f      	beq.n	8009e46 <_putc_r+0x5a>
 8009e26:	6823      	ldr	r3, [r4, #0]
 8009e28:	1c5a      	adds	r2, r3, #1
 8009e2a:	6022      	str	r2, [r4, #0]
 8009e2c:	701d      	strb	r5, [r3, #0]
 8009e2e:	b2ed      	uxtb	r5, r5
 8009e30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009e32:	07da      	lsls	r2, r3, #31
 8009e34:	d405      	bmi.n	8009e42 <_putc_r+0x56>
 8009e36:	89a3      	ldrh	r3, [r4, #12]
 8009e38:	059b      	lsls	r3, r3, #22
 8009e3a:	d402      	bmi.n	8009e42 <_putc_r+0x56>
 8009e3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e3e:	f7ff fb65 	bl	800950c <__retarget_lock_release_recursive>
 8009e42:	4628      	mov	r0, r5
 8009e44:	bd70      	pop	{r4, r5, r6, pc}
 8009e46:	4629      	mov	r1, r5
 8009e48:	4622      	mov	r2, r4
 8009e4a:	4630      	mov	r0, r6
 8009e4c:	f000 f802 	bl	8009e54 <__swbuf_r>
 8009e50:	4605      	mov	r5, r0
 8009e52:	e7ed      	b.n	8009e30 <_putc_r+0x44>

08009e54 <__swbuf_r>:
 8009e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e56:	460e      	mov	r6, r1
 8009e58:	4614      	mov	r4, r2
 8009e5a:	4605      	mov	r5, r0
 8009e5c:	b118      	cbz	r0, 8009e66 <__swbuf_r+0x12>
 8009e5e:	6a03      	ldr	r3, [r0, #32]
 8009e60:	b90b      	cbnz	r3, 8009e66 <__swbuf_r+0x12>
 8009e62:	f7ff fa45 	bl	80092f0 <__sinit>
 8009e66:	69a3      	ldr	r3, [r4, #24]
 8009e68:	60a3      	str	r3, [r4, #8]
 8009e6a:	89a3      	ldrh	r3, [r4, #12]
 8009e6c:	071a      	lsls	r2, r3, #28
 8009e6e:	d501      	bpl.n	8009e74 <__swbuf_r+0x20>
 8009e70:	6923      	ldr	r3, [r4, #16]
 8009e72:	b943      	cbnz	r3, 8009e86 <__swbuf_r+0x32>
 8009e74:	4621      	mov	r1, r4
 8009e76:	4628      	mov	r0, r5
 8009e78:	f000 f82a 	bl	8009ed0 <__swsetup_r>
 8009e7c:	b118      	cbz	r0, 8009e86 <__swbuf_r+0x32>
 8009e7e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009e82:	4638      	mov	r0, r7
 8009e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e86:	6823      	ldr	r3, [r4, #0]
 8009e88:	6922      	ldr	r2, [r4, #16]
 8009e8a:	b2f6      	uxtb	r6, r6
 8009e8c:	1a98      	subs	r0, r3, r2
 8009e8e:	6963      	ldr	r3, [r4, #20]
 8009e90:	4637      	mov	r7, r6
 8009e92:	4283      	cmp	r3, r0
 8009e94:	dc05      	bgt.n	8009ea2 <__swbuf_r+0x4e>
 8009e96:	4621      	mov	r1, r4
 8009e98:	4628      	mov	r0, r5
 8009e9a:	f7ff ff7f 	bl	8009d9c <_fflush_r>
 8009e9e:	2800      	cmp	r0, #0
 8009ea0:	d1ed      	bne.n	8009e7e <__swbuf_r+0x2a>
 8009ea2:	68a3      	ldr	r3, [r4, #8]
 8009ea4:	3b01      	subs	r3, #1
 8009ea6:	60a3      	str	r3, [r4, #8]
 8009ea8:	6823      	ldr	r3, [r4, #0]
 8009eaa:	1c5a      	adds	r2, r3, #1
 8009eac:	6022      	str	r2, [r4, #0]
 8009eae:	701e      	strb	r6, [r3, #0]
 8009eb0:	6962      	ldr	r2, [r4, #20]
 8009eb2:	1c43      	adds	r3, r0, #1
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	d004      	beq.n	8009ec2 <__swbuf_r+0x6e>
 8009eb8:	89a3      	ldrh	r3, [r4, #12]
 8009eba:	07db      	lsls	r3, r3, #31
 8009ebc:	d5e1      	bpl.n	8009e82 <__swbuf_r+0x2e>
 8009ebe:	2e0a      	cmp	r6, #10
 8009ec0:	d1df      	bne.n	8009e82 <__swbuf_r+0x2e>
 8009ec2:	4621      	mov	r1, r4
 8009ec4:	4628      	mov	r0, r5
 8009ec6:	f7ff ff69 	bl	8009d9c <_fflush_r>
 8009eca:	2800      	cmp	r0, #0
 8009ecc:	d0d9      	beq.n	8009e82 <__swbuf_r+0x2e>
 8009ece:	e7d6      	b.n	8009e7e <__swbuf_r+0x2a>

08009ed0 <__swsetup_r>:
 8009ed0:	b538      	push	{r3, r4, r5, lr}
 8009ed2:	4b29      	ldr	r3, [pc, #164]	@ (8009f78 <__swsetup_r+0xa8>)
 8009ed4:	4605      	mov	r5, r0
 8009ed6:	6818      	ldr	r0, [r3, #0]
 8009ed8:	460c      	mov	r4, r1
 8009eda:	b118      	cbz	r0, 8009ee4 <__swsetup_r+0x14>
 8009edc:	6a03      	ldr	r3, [r0, #32]
 8009ede:	b90b      	cbnz	r3, 8009ee4 <__swsetup_r+0x14>
 8009ee0:	f7ff fa06 	bl	80092f0 <__sinit>
 8009ee4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ee8:	0719      	lsls	r1, r3, #28
 8009eea:	d422      	bmi.n	8009f32 <__swsetup_r+0x62>
 8009eec:	06da      	lsls	r2, r3, #27
 8009eee:	d407      	bmi.n	8009f00 <__swsetup_r+0x30>
 8009ef0:	2209      	movs	r2, #9
 8009ef2:	602a      	str	r2, [r5, #0]
 8009ef4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ef8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009efc:	81a3      	strh	r3, [r4, #12]
 8009efe:	e033      	b.n	8009f68 <__swsetup_r+0x98>
 8009f00:	0758      	lsls	r0, r3, #29
 8009f02:	d512      	bpl.n	8009f2a <__swsetup_r+0x5a>
 8009f04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009f06:	b141      	cbz	r1, 8009f1a <__swsetup_r+0x4a>
 8009f08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009f0c:	4299      	cmp	r1, r3
 8009f0e:	d002      	beq.n	8009f16 <__swsetup_r+0x46>
 8009f10:	4628      	mov	r0, r5
 8009f12:	f7ff fafd 	bl	8009510 <_free_r>
 8009f16:	2300      	movs	r3, #0
 8009f18:	6363      	str	r3, [r4, #52]	@ 0x34
 8009f1a:	89a3      	ldrh	r3, [r4, #12]
 8009f1c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009f20:	81a3      	strh	r3, [r4, #12]
 8009f22:	2300      	movs	r3, #0
 8009f24:	6063      	str	r3, [r4, #4]
 8009f26:	6923      	ldr	r3, [r4, #16]
 8009f28:	6023      	str	r3, [r4, #0]
 8009f2a:	89a3      	ldrh	r3, [r4, #12]
 8009f2c:	f043 0308 	orr.w	r3, r3, #8
 8009f30:	81a3      	strh	r3, [r4, #12]
 8009f32:	6923      	ldr	r3, [r4, #16]
 8009f34:	b94b      	cbnz	r3, 8009f4a <__swsetup_r+0x7a>
 8009f36:	89a3      	ldrh	r3, [r4, #12]
 8009f38:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009f3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f40:	d003      	beq.n	8009f4a <__swsetup_r+0x7a>
 8009f42:	4621      	mov	r1, r4
 8009f44:	4628      	mov	r0, r5
 8009f46:	f000 f85c 	bl	800a002 <__smakebuf_r>
 8009f4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f4e:	f013 0201 	ands.w	r2, r3, #1
 8009f52:	d00a      	beq.n	8009f6a <__swsetup_r+0x9a>
 8009f54:	2200      	movs	r2, #0
 8009f56:	60a2      	str	r2, [r4, #8]
 8009f58:	6962      	ldr	r2, [r4, #20]
 8009f5a:	4252      	negs	r2, r2
 8009f5c:	61a2      	str	r2, [r4, #24]
 8009f5e:	6922      	ldr	r2, [r4, #16]
 8009f60:	b942      	cbnz	r2, 8009f74 <__swsetup_r+0xa4>
 8009f62:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009f66:	d1c5      	bne.n	8009ef4 <__swsetup_r+0x24>
 8009f68:	bd38      	pop	{r3, r4, r5, pc}
 8009f6a:	0799      	lsls	r1, r3, #30
 8009f6c:	bf58      	it	pl
 8009f6e:	6962      	ldrpl	r2, [r4, #20]
 8009f70:	60a2      	str	r2, [r4, #8]
 8009f72:	e7f4      	b.n	8009f5e <__swsetup_r+0x8e>
 8009f74:	2000      	movs	r0, #0
 8009f76:	e7f7      	b.n	8009f68 <__swsetup_r+0x98>
 8009f78:	20000188 	.word	0x20000188

08009f7c <_sbrk_r>:
 8009f7c:	b538      	push	{r3, r4, r5, lr}
 8009f7e:	2300      	movs	r3, #0
 8009f80:	4d05      	ldr	r5, [pc, #20]	@ (8009f98 <_sbrk_r+0x1c>)
 8009f82:	4604      	mov	r4, r0
 8009f84:	4608      	mov	r0, r1
 8009f86:	602b      	str	r3, [r5, #0]
 8009f88:	f7f6 fd78 	bl	8000a7c <_sbrk>
 8009f8c:	1c43      	adds	r3, r0, #1
 8009f8e:	d102      	bne.n	8009f96 <_sbrk_r+0x1a>
 8009f90:	682b      	ldr	r3, [r5, #0]
 8009f92:	b103      	cbz	r3, 8009f96 <_sbrk_r+0x1a>
 8009f94:	6023      	str	r3, [r4, #0]
 8009f96:	bd38      	pop	{r3, r4, r5, pc}
 8009f98:	20001620 	.word	0x20001620

08009f9c <memchr>:
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	b510      	push	{r4, lr}
 8009fa0:	b2c9      	uxtb	r1, r1
 8009fa2:	4402      	add	r2, r0
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	d101      	bne.n	8009fae <memchr+0x12>
 8009faa:	2000      	movs	r0, #0
 8009fac:	e003      	b.n	8009fb6 <memchr+0x1a>
 8009fae:	7804      	ldrb	r4, [r0, #0]
 8009fb0:	3301      	adds	r3, #1
 8009fb2:	428c      	cmp	r4, r1
 8009fb4:	d1f6      	bne.n	8009fa4 <memchr+0x8>
 8009fb6:	bd10      	pop	{r4, pc}

08009fb8 <__swhatbuf_r>:
 8009fb8:	b570      	push	{r4, r5, r6, lr}
 8009fba:	460c      	mov	r4, r1
 8009fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fc0:	4615      	mov	r5, r2
 8009fc2:	2900      	cmp	r1, #0
 8009fc4:	461e      	mov	r6, r3
 8009fc6:	b096      	sub	sp, #88	@ 0x58
 8009fc8:	da0c      	bge.n	8009fe4 <__swhatbuf_r+0x2c>
 8009fca:	89a3      	ldrh	r3, [r4, #12]
 8009fcc:	2100      	movs	r1, #0
 8009fce:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009fd2:	bf14      	ite	ne
 8009fd4:	2340      	movne	r3, #64	@ 0x40
 8009fd6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009fda:	2000      	movs	r0, #0
 8009fdc:	6031      	str	r1, [r6, #0]
 8009fde:	602b      	str	r3, [r5, #0]
 8009fe0:	b016      	add	sp, #88	@ 0x58
 8009fe2:	bd70      	pop	{r4, r5, r6, pc}
 8009fe4:	466a      	mov	r2, sp
 8009fe6:	f000 f849 	bl	800a07c <_fstat_r>
 8009fea:	2800      	cmp	r0, #0
 8009fec:	dbed      	blt.n	8009fca <__swhatbuf_r+0x12>
 8009fee:	9901      	ldr	r1, [sp, #4]
 8009ff0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009ff4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009ff8:	4259      	negs	r1, r3
 8009ffa:	4159      	adcs	r1, r3
 8009ffc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a000:	e7eb      	b.n	8009fda <__swhatbuf_r+0x22>

0800a002 <__smakebuf_r>:
 800a002:	898b      	ldrh	r3, [r1, #12]
 800a004:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a006:	079d      	lsls	r5, r3, #30
 800a008:	4606      	mov	r6, r0
 800a00a:	460c      	mov	r4, r1
 800a00c:	d507      	bpl.n	800a01e <__smakebuf_r+0x1c>
 800a00e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a012:	6023      	str	r3, [r4, #0]
 800a014:	6123      	str	r3, [r4, #16]
 800a016:	2301      	movs	r3, #1
 800a018:	6163      	str	r3, [r4, #20]
 800a01a:	b003      	add	sp, #12
 800a01c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a01e:	466a      	mov	r2, sp
 800a020:	ab01      	add	r3, sp, #4
 800a022:	f7ff ffc9 	bl	8009fb8 <__swhatbuf_r>
 800a026:	9f00      	ldr	r7, [sp, #0]
 800a028:	4605      	mov	r5, r0
 800a02a:	4639      	mov	r1, r7
 800a02c:	4630      	mov	r0, r6
 800a02e:	f7ff fad9 	bl	80095e4 <_malloc_r>
 800a032:	b948      	cbnz	r0, 800a048 <__smakebuf_r+0x46>
 800a034:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a038:	059a      	lsls	r2, r3, #22
 800a03a:	d4ee      	bmi.n	800a01a <__smakebuf_r+0x18>
 800a03c:	f023 0303 	bic.w	r3, r3, #3
 800a040:	f043 0302 	orr.w	r3, r3, #2
 800a044:	81a3      	strh	r3, [r4, #12]
 800a046:	e7e2      	b.n	800a00e <__smakebuf_r+0xc>
 800a048:	89a3      	ldrh	r3, [r4, #12]
 800a04a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a04e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a052:	81a3      	strh	r3, [r4, #12]
 800a054:	9b01      	ldr	r3, [sp, #4]
 800a056:	6020      	str	r0, [r4, #0]
 800a058:	b15b      	cbz	r3, 800a072 <__smakebuf_r+0x70>
 800a05a:	4630      	mov	r0, r6
 800a05c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a060:	f000 f81e 	bl	800a0a0 <_isatty_r>
 800a064:	b128      	cbz	r0, 800a072 <__smakebuf_r+0x70>
 800a066:	89a3      	ldrh	r3, [r4, #12]
 800a068:	f023 0303 	bic.w	r3, r3, #3
 800a06c:	f043 0301 	orr.w	r3, r3, #1
 800a070:	81a3      	strh	r3, [r4, #12]
 800a072:	89a3      	ldrh	r3, [r4, #12]
 800a074:	431d      	orrs	r5, r3
 800a076:	81a5      	strh	r5, [r4, #12]
 800a078:	e7cf      	b.n	800a01a <__smakebuf_r+0x18>
	...

0800a07c <_fstat_r>:
 800a07c:	b538      	push	{r3, r4, r5, lr}
 800a07e:	2300      	movs	r3, #0
 800a080:	4d06      	ldr	r5, [pc, #24]	@ (800a09c <_fstat_r+0x20>)
 800a082:	4604      	mov	r4, r0
 800a084:	4608      	mov	r0, r1
 800a086:	4611      	mov	r1, r2
 800a088:	602b      	str	r3, [r5, #0]
 800a08a:	f7f6 fcd1 	bl	8000a30 <_fstat>
 800a08e:	1c43      	adds	r3, r0, #1
 800a090:	d102      	bne.n	800a098 <_fstat_r+0x1c>
 800a092:	682b      	ldr	r3, [r5, #0]
 800a094:	b103      	cbz	r3, 800a098 <_fstat_r+0x1c>
 800a096:	6023      	str	r3, [r4, #0]
 800a098:	bd38      	pop	{r3, r4, r5, pc}
 800a09a:	bf00      	nop
 800a09c:	20001620 	.word	0x20001620

0800a0a0 <_isatty_r>:
 800a0a0:	b538      	push	{r3, r4, r5, lr}
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	4d05      	ldr	r5, [pc, #20]	@ (800a0bc <_isatty_r+0x1c>)
 800a0a6:	4604      	mov	r4, r0
 800a0a8:	4608      	mov	r0, r1
 800a0aa:	602b      	str	r3, [r5, #0]
 800a0ac:	f7f6 fccf 	bl	8000a4e <_isatty>
 800a0b0:	1c43      	adds	r3, r0, #1
 800a0b2:	d102      	bne.n	800a0ba <_isatty_r+0x1a>
 800a0b4:	682b      	ldr	r3, [r5, #0]
 800a0b6:	b103      	cbz	r3, 800a0ba <_isatty_r+0x1a>
 800a0b8:	6023      	str	r3, [r4, #0]
 800a0ba:	bd38      	pop	{r3, r4, r5, pc}
 800a0bc:	20001620 	.word	0x20001620

0800a0c0 <_init>:
 800a0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0c2:	bf00      	nop
 800a0c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0c6:	bc08      	pop	{r3}
 800a0c8:	469e      	mov	lr, r3
 800a0ca:	4770      	bx	lr

0800a0cc <_fini>:
 800a0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0ce:	bf00      	nop
 800a0d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0d2:	bc08      	pop	{r3}
 800a0d4:	469e      	mov	lr, r3
 800a0d6:	4770      	bx	lr
